// Generated by Haxe 4.2.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["echo"] = $hx_exports["echo"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var util_Events = function() {
	this.listeners = new haxe_ds_StringMap();
};
util_Events.__name__ = true;
util_Events.prototype = {
	listen: function(ev,fn) {
		if(!Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			this.listeners.h[ev] = [];
		}
		this.listeners.h[ev].push(fn);
	}
	,dispatch: function(ev,data) {
		if(!Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			return;
		}
		var _g = 0;
		var _g1 = this.listeners.h[ev];
		while(_g < _g1.length) _g1[_g++](data);
	}
	,unlisten: function(ev,fn) {
		if(ev == null && fn == null) {
			return;
		} else if(ev == null && fn != null) {
			var _g_keys = Object.keys(this.listeners.h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) HxOverrides.remove(this.listeners.h[_g_keys[_g_current++]],fn);
		} else if(ev != null && fn == null) {
			this.listeners.h[ev] = [];
		} else if(Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			HxOverrides.remove(this.listeners.h[ev],fn);
		}
	}
};
var Main = function() {
	var _gthis = this;
	PIXI.Application.call(this,{ width : window.innerWidth, height : window.innerHeight, backgroundColor : 26214, antialias : false, transparent : true, resizeTo : Main.container});
	util_Audio.init();
	Main.container.appendChild(this.view);
	Main.container.oncontextmenu = function(e) {
		return e.preventDefault();
	};
	this.ticker.add($bind(this,this.update));
	window.onresize = function() {
		return zero_utilities_Timer.get(0.025,function() {
			Main.app_events.dispatch(AppEvents.RESIZE,{ width : _gthis.renderer.width, height : _gthis.renderer.height});
		});
	};
	window.ondeviceorientation = function() {
		return zero_utilities_Timer.get(0.025,function() {
			Main.app_events.dispatch(AppEvents.RESIZE,{ width : _gthis.renderer.width, height : _gthis.renderer.height});
		});
	};
	this.switch_state(new states_PlayState());
	util_Pointer.init();
	Main.app_events.dispatch(AppEvents.RESIZE,{ width : this.renderer.width, height : this.renderer.height});
};
Main.__name__ = true;
Main.main = function() {
	Main.assets = new PIXI.Loader();
	Main.assets.add(["assets/arrow.png","assets/audio.png","assets/ball_and_chain.png","assets/box_glow.png","assets/box.png","assets/buildings.png","assets/clouds_bg.png","assets/copy.png","assets/copy_confirmation.png","assets/cta.png","assets/facebook.png","assets/heart.png","assets/level.json","assets/linkedin.png","assets/logo.png","assets/paddle.png","assets/player.png","assets/player_dead.png","assets/pointer.png","assets/poof.png","assets/power_icons.png","assets/project.ogmo","assets/rolling_ball.png","assets/saw_blade.png","assets/share.png","assets/spikes.png","assets/star.png","assets/test.png","assets/tiles.png","assets/twitter.png"]);
	Main.assets.load(function() {
		return Main.app = new Main();
	});
};
Main.__super__ = PIXI.Application;
Main.prototype = $extend(PIXI.Application.prototype,{
	update: function(dt) {
		dt /= 60;
		zero_utilities_Timer.update(dt);
		zero_utilities_Tween.update(dt);
		zero_utilities_SyncedSin.update(dt);
		Main.game_events.dispatch(GameEvents.PRE_UPDATE,{ dt : dt});
		Main.game_events.dispatch(GameEvents.UPDATE,{ dt : dt});
		Main.game_events.dispatch(GameEvents.POST_UPDATE,{ dt : dt});
	}
	,switch_state: function(state) {
		if(this.state != null) {
			this.state.destroy();
		}
		this.state = state;
		this.stage.addChild(state);
	}
});
var AppEvents = function() { };
AppEvents.__name__ = true;
var GameEvents = function() { };
GameEvents.__name__ = true;
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
var echo_Body = function(options) {
	this.transform = new echo_util_Transform();
	this.layer_mask = echo_util_BitMask._new();
	this.layers = echo_util_BitMask._new();
	this.drag = new hxmath_math_Vector2Default(0,0);
	this.max_velocity = new hxmath_math_Vector2Default(0,0);
	this.acceleration = new hxmath_math_Vector2Default(0,0);
	this.velocity = new hxmath_math_Vector2Default(0,0);
	this.id = ++echo_Body.ids;
	this.active = true;
	this.shapes = [];
	this.data = { };
	this.disposed = false;
	this.transform.on_dirty = $bind(this,this.on_dirty);
	this.load_options(options);
};
echo_Body.__name__ = true;
echo_Body.__properties__ = {get_defaults:"get_defaults"};
echo_Body.get_defaults = function() {
	return { kinematic : false, mass : 1, x : 0, y : 0, rotation : 0, scale_x : 1, scale_y : 1, elasticity : 0, velocity_x : 0, velocity_y : 0, rotational_velocity : 0, max_velocity_x : 0, max_velocity_y : 0, max_velocity_length : 0, max_rotational_velocity : 10000, drag_x : 0, drag_y : 0, drag_length : 0, rotational_drag : 0, gravity_scale : 1};
};
echo_Body.prototype = {
	load_options: function(options) {
		options = echo_util_JSON.copy_fields(options,echo_Body.get_defaults());
		var _g = 0;
		var _g1 = this.shapes;
		while(_g < _g1.length) _g1[_g++].put();
		this.shapes.length = 0;
		var value = options.x;
		var _this = this.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = value;
		if(this.on_move != null) {
			this.on_move(this.transform.local_x,this.transform.local_y);
		}
		var value = options.y;
		var _this = this.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = value;
		if(this.on_move != null) {
			this.on_move(this.transform.local_x,this.transform.local_y);
		}
		var value = options.rotation;
		var _this = this.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = value;
		if(this.on_rotate != null) {
			this.on_rotate(this.transform.local_rotation);
		}
		var value = options.scale_x;
		var _this = this.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = value;
		var value = options.scale_y;
		var _this = this.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = value;
		this.kinematic = options.kinematic;
		var value = options.mass;
		if(value < 0.0001) {
			this.mass = this.inverse_mass = 0;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		} else {
			if(this.mass <= 0 && this.world != null) {
				this.world.static_quadtree.remove(this.quadtree_data);
			}
			this.mass = value;
			this.inverse_mass = 1 / this.mass;
		}
		this.elasticity = options.elasticity;
		var self = this.velocity;
		self.x = options.velocity_x;
		self.y = options.velocity_y;
		this.rotational_velocity = options.rotational_velocity;
		var self = this.max_velocity;
		self.x = options.max_velocity_x;
		self.y = options.max_velocity_y;
		this.max_velocity_length = options.max_velocity_length;
		this.max_rotational_velocity = options.max_rotational_velocity;
		var self = this.drag;
		self.x = options.drag_x;
		self.y = options.drag_y;
		this.drag_length = options.drag_length;
		this.rotational_drag = options.rotational_drag;
		this.gravity_scale = options.gravity_scale;
		this.last_x = NaN;
		this.last_y = NaN;
		this.last_rotation = NaN;
		this.dirty = true;
		if(options.shape != null) {
			var s = echo_Shape.get(options.shape);
			if(this.shapes.indexOf(s) == -1) {
				this.shapes.push(s);
				s.set_parent(this);
				this.dirty = true;
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
			}
		}
		if(options.shapes != null) {
			var _g = 0;
			var _g1 = options.shapes;
			while(_g < _g1.length) {
				var s = echo_Shape.get(_g1[_g++]);
				if(this.shapes.indexOf(s) == -1) {
					this.shapes.push(s);
					s.set_parent(this);
					this.dirty = true;
					if(this.mass <= 0 && this.world != null) {
						this.bounds(this.quadtree_data.bounds);
						this.world.static_quadtree.update(this.quadtree_data);
					}
				}
			}
		}
		if(options.shape_instance != null) {
			var shape = options.shape_instance;
			if(this.shapes.indexOf(shape) == -1) {
				this.shapes.push(shape);
				shape.set_parent(this);
				this.dirty = true;
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
			}
		}
		if(options.shape_instances != null) {
			var _g = 0;
			var _g1 = options.shape_instances;
			while(_g < _g1.length) {
				var shape = _g1[_g];
				++_g;
				if(this.shapes.indexOf(shape) == -1) {
					this.shapes.push(shape);
					shape.set_parent(this);
					this.dirty = true;
					if(this.mass <= 0 && this.world != null) {
						this.bounds(this.quadtree_data.bounds);
						this.world.static_quadtree.update(this.quadtree_data);
					}
				}
			}
		}
	}
	,set_position: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this = this.transform;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = x1;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = y1;
	}
	,bounds: function(aabb) {
		if(this.shapes.length == 0) {
			var x = this.transform.local_x;
			var y = this.transform.local_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			aabb1.min_x = x1 - 0.5;
			aabb1.min_y = y1 - 0.5;
			aabb1.max_x = x1 + 0.5;
			aabb1.max_y = y1 + 0.5;
			aabb1.pooled = false;
			return aabb1;
		}
		var b1 = this.shapes[0].bounds();
		if(this.shapes.length > 1) {
			var _g = 1;
			var _g1 = this.shapes.length;
			while(_g < _g1) {
				var b2 = this.shapes[_g++].bounds();
				if(b1.min_x > b2.min_x) {
					b1.min_x = b2.min_x;
				}
				if(b1.min_y > b2.min_y) {
					b1.min_y = b2.min_y;
				}
				if(b1.max_x < b2.max_x) {
					b1.max_x = b2.max_x;
				}
				if(b1.max_y < b2.max_y) {
					b1.max_y = b2.max_y;
				}
				b2.put();
			}
		}
		if(aabb == null) {
			var aabb1 = echo_util_AABB._pool.get();
			var x = 0;
			var y = 0;
			aabb1.min_x = x - 0.5;
			aabb1.min_y = y - 0.5;
			aabb1.max_x = x + 0.5;
			aabb1.max_y = y + 0.5;
			aabb1.pooled = false;
			aabb = aabb1;
		}
		aabb.min_x = b1.min_x;
		aabb.max_x = b1.max_x;
		aabb.min_y = b1.min_y;
		aabb.max_y = b1.max_y;
		b1.put();
		return aabb;
	}
	,dispose: function() {
		this.disposed = true;
		if(this.world != null) {
			this.world.remove(this);
		}
		if(this.quadtree_data != null && this.quadtree_data.bounds != null) {
			this.quadtree_data.bounds.put();
		}
		var _g = 0;
		var _g1 = this.shapes;
		while(_g < _g1.length) _g1[_g++].put();
		this.shapes = null;
		this.velocity = null;
		this.max_velocity = null;
		this.drag = null;
		this.data = null;
		this.on_move = null;
		this.on_rotate = null;
		this.quadtree_data = null;
	}
	,on_dirty: function(t) {
		this.dirty = true;
		if(this.mass <= 0 && this.world != null) {
			this.bounds(this.quadtree_data.bounds);
			this.world.static_quadtree.update(this.quadtree_data);
		}
	}
};
var echo_Collisions = function() { };
echo_Collisions.__name__ = true;
echo_Collisions.update_quadtree = function(world) {
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(!b.disposed) {
			b.collided = false;
			var _g2 = 0;
			var _g3 = b.shapes;
			while(_g2 < _g3.length) _g3[_g2++].collided = false;
			if(b.active && b.mass > 0 && b.dirty && b.shapes.length > 0) {
				if(b.quadtree_data.bounds == null) {
					b.quadtree_data.bounds = b.bounds();
				} else {
					b.bounds(b.quadtree_data.bounds);
				}
				world.quadtree.update(b.quadtree_data,false);
				b.dirty = false;
			}
		}
	}
	world.quadtree.shake();
};
echo_Collisions.query = function(world,listeners) {
	echo_Collisions.update_quadtree(world);
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		listener.quadtree_results.length = 0;
		var _g1 = listener.a;
		switch(_g1._hx_index) {
		case 0:
			var _g2 = _g1.v;
			var _g3 = listener.b;
			switch(_g3._hx_index) {
			case 0:
				var col = echo_Collisions.overlap_body_and_body_bounds(_g2,_g3.v);
				if(col != null) {
					listener.quadtree_results.push(col);
				}
				break;
			case 1:
				echo_Collisions.overlap_body_and_bodies_bounds(_g2,_g3.v,world,listener.quadtree_results);
				break;
			}
			break;
		case 1:
			var _g4 = _g1.v;
			var _g5 = listener.b;
			switch(_g5._hx_index) {
			case 0:
				echo_Collisions.overlap_body_and_bodies_bounds(_g5.v,_g4,world,listener.quadtree_results);
				break;
			case 1:
				var _g6 = _g5.v;
				echo_Collisions.overlap_bodies_and_bodies_bounds(_g4,_g6,world,listener.quadtree_results);
				if(_g4 != _g6) {
					echo_Collisions.overlap_bodies_and_bodies_bounds(_g6,_g4,world,listener.quadtree_results);
				}
				break;
			}
			break;
		}
		var _g7 = 0;
		var _g8 = listener.last_collisions;
		while(_g7 < _g8.length) _g8[_g7++].put();
		listener.last_collisions.length = listener.collisions.length;
		var _g9 = 0;
		var _g10 = listener.collisions.length;
		while(_g9 < _g10) {
			var i = _g9++;
			listener.last_collisions[i] = listener.collisions[i];
		}
		listener.collisions.length = 0;
		var _g11 = 0;
		var _g12 = listener.quadtree_results;
		while(_g11 < _g12.length) {
			var result = _g12[_g11];
			++_g11;
			if(result.a.disposed || result.b.disposed) {
				result.put();
				continue;
			}
			if(result.a.id == result.b.id) {
				result.put();
				continue;
			}
			var flag = false;
			var _g13 = 0;
			var _g14 = listener.collisions;
			while(_g13 < _g14.length) {
				var collision = _g14[_g13];
				++_g13;
				if(collision.a.id == result.a.id && collision.b.id == result.b.id || collision.b.id == result.a.id && collision.a.id == result.b.id) {
					flag = true;
					break;
				}
			}
			if(flag) {
				result.put();
				continue;
			}
			if(result.a.shapes.length == 1 && result.b.shapes.length == 1) {
				var col1 = result.a.shapes[0].collides(result.b.shapes[0]);
				if(col1 != null) {
					result.data.push(col1);
				}
			} else {
				var sa = result.a.shapes;
				var _g15 = 0;
				var _g16 = sa.length;
				while(_g15 < _g16) {
					var i1 = _g15++;
					var sb = result.b.shapes;
					var b1 = sa[i1].bounds();
					var _g17 = 0;
					var _g18 = sb.length;
					while(_g17 < _g18) {
						var j = _g17++;
						var b2 = sb[j].bounds();
						if(b1.min_x < b2.max_x && b1.max_x >= b2.min_x && b1.min_y < b2.max_y && b1.max_y >= b2.min_y) {
							var col2 = sa[i1].collides(sb[j]);
							if(col2 != null) {
								result.data.push(col2);
							}
						}
						b2.put();
					}
					b1.put();
				}
			}
			if(result.data.length == 0) {
				result.put();
				continue;
			}
			if(listener.condition != null) {
				if(!listener.condition(result.a,result.b,result.data) || result.a.disposed || result.b.disposed) {
					result.put();
					continue;
				}
			}
			var _g19 = 0;
			var _g20 = result.data;
			while(_g19 < _g20.length) {
				var data = _g20[_g19];
				++_g19;
				data.sa.collided = data.sb.collided = true;
			}
			result.a.collided = result.b.collided = true;
			listener.collisions.push(result);
		}
	}
};
echo_Collisions.notify = function(world,listeners) {
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		if(listener.enter != null || listener.stay != null) {
			var _g1 = 0;
			var _g2 = listener.collisions;
			while(_g1 < _g2.length) {
				var c = _g2[_g1];
				++_g1;
				if(!c.a.disposed && !c.b.disposed) {
					var tmp;
					if(listener.enter != null) {
						var found = false;
						var _g3 = 0;
						var _g4 = listener.last_collisions;
						while(_g3 < _g4.length) {
							var l = _g4[_g3];
							++_g3;
							if(l.a == c.a && l.b == c.b || l.a == c.b && l.b == c.a) {
								found = true;
								break;
							}
						}
						tmp = !found;
					} else {
						tmp = false;
					}
					if(tmp) {
						listener.enter(c.a,c.b,c.data);
					} else if(listener.stay != null) {
						listener.stay(c.a,c.b,c.data);
					}
				}
			}
		}
		if(listener.exit != null) {
			var _g5 = 0;
			var _g6 = listener.last_collisions;
			while(_g5 < _g6.length) {
				var lc = _g6[_g5];
				++_g5;
				var tmp1;
				if(!lc.a.disposed && !lc.b.disposed) {
					var found1 = false;
					var _g7 = 0;
					var _g8 = listener.collisions;
					while(_g7 < _g8.length) {
						var c1 = _g8[_g7];
						++_g7;
						if(c1.a == lc.a && c1.b == lc.b || c1.a == lc.b && c1.b == lc.a) {
							found1 = true;
							break;
						}
					}
					tmp1 = !found1;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					listener.exit(lc.a,lc.b);
				}
			}
		}
	}
};
echo_Collisions.overlap_bodies_and_bodies_bounds = function(a,b,world,results) {
	if(a.length == 0 || b.length == 0) {
		return;
	}
	var _g = 0;
	while(_g < a.length) echo_Collisions.overlap_body_and_bodies_bounds(a[_g++],b,world,results);
};
echo_Collisions.overlap_body_and_bodies_bounds = function(body,bodies,world,results) {
	if(body.disposed || body.shapes.length == 0 || !body.active || body.mass <= 0) {
		return;
	}
	var bounds = body.bounds();
	echo_Collisions.qr.length = 0;
	echo_Collisions.sqr.length = 0;
	world.quadtree.query(bounds,echo_Collisions.qr);
	world.static_quadtree.query(bounds,echo_Collisions.sqr);
	var _g = 0;
	while(_g < bodies.length) {
		var member = bodies[_g];
		++_g;
		if(member.disposed || member.shapes.length == 0 || !member.active || !(body.layer_mask == 0 || (body.layer_mask & 1 << echo_util_BitMask.to_int(member.layers)) != 0)) {
			continue;
		}
		var _g1 = 0;
		var _g2 = member.mass > 0 ? echo_Collisions.qr : echo_Collisions.sqr;
		while(_g1 < _g2.length) if(_g2[_g1++].id == member.id) {
			var c = echo_data_Collision._pool.get();
			c.a = body;
			c.b = member;
			c.data.length = 0;
			c.pooled = false;
			results.push(c);
		}
	}
	bounds.put();
};
echo_Collisions.overlap_body_and_body_bounds = function(a,b) {
	if(a.disposed || b.disposed || a.shapes.length == 0 || b.shapes.length == 0 || !a.active || !b.active || a == b || !(a.layer_mask == 0 || (a.layer_mask & 1 << echo_util_BitMask.to_int(b.layers)) != 0) || a.mass <= 0 && b.mass <= 0) {
		return null;
	}
	var ab = a.bounds();
	var bb = b.bounds();
	var col = ab.min_x < bb.max_x && ab.max_x >= bb.min_x && ab.min_y < bb.max_y && ab.max_y >= bb.min_y;
	ab.put();
	bb.put();
	if(col) {
		var c = echo_data_Collision._pool.get();
		c.a = a;
		c.b = b;
		c.data.length = 0;
		c.pooled = false;
		return c;
	} else {
		return null;
	}
};
var echo_Listeners = function(members) {
	this.members = members == null ? [] : members;
};
echo_Listeners.__name__ = true;
echo_Listeners.prototype = {
	add: function(a,b,options) {
		options = echo_util_JSON.copy_fields(options,echo_Listener.get_defaults());
		var listener = new echo_Listener(a,b,options.separate,[],[],null,null,null,null,[],options.percent_correction,options.correction_threshold);
		if(options.enter != null) {
			listener.enter = options.enter;
		}
		if(options.stay != null) {
			listener.stay = options.stay;
		}
		if(options.exit != null) {
			listener.exit = options.exit;
		}
		if(options.condition != null) {
			listener.condition = options.condition;
		}
		this.members.push(listener);
		return listener;
	}
	,clear: function() {
		this.members.length = 0;
	}
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_Vector2Default.__name__ = true;
var echo_Echo = $hx_exports["echo"]["Echo"] = function() { };
echo_Echo.__name__ = true;
echo_Echo.start = function(options) {
	return new echo_World(options);
};
echo_Echo.make = function(world,options) {
	return world.add(new echo_Body(options));
};
echo_Echo.listen = function(world,a,b,options) {
	if(a == null) {
		if(b == null) {
			return world.listeners.add(haxe_ds_Either.Right(world.members),haxe_ds_Either.Right(world.members),options);
		} else {
			return world.listeners.add(b,b,options);
		}
	}
	if(b == null) {
		return world.listeners.add(a,a,options);
	}
	return world.listeners.add(a,b,options);
};
echo_Echo.check = function(world,a,b,options) {
	echo_Echo.cached_listeners.clear();
	if(a == null && b == null) {
		echo_Echo.cached_listeners.add(haxe_ds_Either.Right(world.members),haxe_ds_Either.Right(world.members),options);
	} else if(a == null) {
		echo_Echo.cached_listeners.add(b,b,options);
	} else if(b == null) {
		echo_Echo.cached_listeners.add(a,a,options);
	} else {
		echo_Echo.cached_listeners.add(a,b,options);
	}
	echo_Collisions.query(world,echo_Echo.cached_listeners);
	echo_Physics.separate(world,echo_Echo.cached_listeners);
	echo_Collisions.notify(world,echo_Echo.cached_listeners);
};
echo_Echo.step = function(world,dt) {
	if(world.history != null) {
		var world1 = world.history;
		var _g = [];
		var _g1 = 0;
		var _g2 = world.members;
		while(_g1 < _g2.length) {
			var b = _g2[_g1];
			++_g1;
			_g.push(new echo_data_BodyState(b.id,b.transform.local_x,b.transform.local_y,b.transform.local_rotation,b.velocity,b.acceleration,b.rotational_velocity));
		}
		world1.add(_g);
	}
	var fdt = dt / world.iterations;
	var _g = 0;
	var _g1 = world.iterations;
	while(_g < _g1) {
		++_g;
		echo_Physics.step(world,fdt);
		echo_Collisions.query(world);
		echo_Physics.separate(world);
		echo_Collisions.notify(world);
	}
};
echo_Echo.linecast_floats = function(x,y,dx,dy,test,world) {
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy == null) {
		dy1 = 1;
	}
	if(dx == null) {
		dx1 = 1;
	}
	if(y == null) {
		y1 = 0;
	}
	if(x == null) {
		x1 = 0;
	}
	var line = echo_Line._pool.get();
	var x = x1;
	var y = y1;
	var dx = dx1;
	var dy = dy1;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	line.pooled = false;
	var result = echo_Echo.linecast(line,test,world);
	if(!line.pooled) {
		line.pooled = true;
		echo_Line._pool.put_unsafe(line);
	}
	return result;
};
echo_Echo.linecast_vector = function(start,angle,length,test,world) {
	var line = echo_Line._pool.get();
	line.set_from_vector(start,angle,length);
	line.pooled = false;
	var result = echo_Echo.linecast(line,test,world);
	if(!line.pooled) {
		line.pooled = true;
		echo_Line._pool.put_unsafe(line);
	}
	return result;
};
echo_Echo.linecast_vectors = function(start,end,test,world) {
	var x = start.x;
	var y = start.y;
	var dx = end.x;
	var dy = end.y;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	var result = echo_Echo.linecast(line,test,world);
	if(!line.pooled) {
		line.pooled = true;
		echo_Line._pool.put_unsafe(line);
	}
	return result;
};
echo_Echo.linecast = function(line,test,world) {
	var closest = null;
	var min_x = Math.min(line.start.x,line.end.x);
	var min_y = Math.min(line.start.y,line.end.y);
	var max_x = Math.max(line.start.x,line.end.x);
	var max_y = Math.max(line.start.y,line.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	if(world != null && echo_Echo.cached_body == null) {
		echo_Echo.cached_body = new echo_Body();
	}
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.v;
		var bb = _g1.bounds();
		if(aabb.min_x < bb.max_x && aabb.max_x >= bb.min_x && aabb.min_y < bb.max_y && aabb.max_y >= bb.min_y) {
			var _g2 = 0;
			var _g3 = _g1.shapes.length;
			while(_g2 < _g3) {
				var result = _g1.shapes[_g2++].intersect(line);
				if(result != null) {
					if(closest == null) {
						var i = echo_data_Intersection._pool.get();
						i.line = line;
						i.body = _g1;
						i.data.length = 0;
						i.pooled = false;
						closest = i;
					}
					closest.data.push(result);
				}
			}
		}
		bb.put();
		break;
	case 1:
		var _g1 = _g.v;
		if(world == null) {
			var _g = 0;
			while(_g < _g1.length) {
				var body = _g1[_g];
				++_g;
				if(body == null) {
					continue;
				}
				var bb = body.bounds();
				var i = echo_data_Intersection._pool.get();
				i.line = line;
				i.body = body;
				i.data.length = 0;
				i.pooled = false;
				if(aabb.min_x < bb.max_x && aabb.max_x >= bb.min_x && aabb.min_y < bb.max_y && aabb.max_y >= bb.min_y) {
					var _g2 = 0;
					var _g3 = body.shapes.length;
					while(_g2 < _g3) {
						var result = body.shapes[_g2++].intersect(line);
						if(result != null) {
							i.data.push(result);
						}
					}
				}
				bb.put();
				var tmp;
				if(i.data.length > 0) {
					if(closest != null) {
						var tmp1;
						if(closest.data.length == 0) {
							tmp1 = null;
						} else if(closest.data.length == 1) {
							tmp1 = closest.data[0];
						} else {
							var closest1 = closest.data[0];
							var _g4 = 1;
							var _g5 = closest.data.length;
							while(_g4 < _g5) {
								var i1 = _g4++;
								if(closest.data[i1] != null && closest.data[i1].distance < closest1.distance) {
									closest1 = closest.data[i1];
								}
							}
							tmp1 = closest1;
						}
						var tmp2 = tmp1.distance;
						var tmp3;
						if(i.data.length == 0) {
							tmp3 = null;
						} else if(i.data.length == 1) {
							tmp3 = i.data[0];
						} else {
							var closest2 = i.data[0];
							var _g6 = 1;
							var _g7 = i.data.length;
							while(_g6 < _g7) {
								var i2 = _g6++;
								if(i.data[i2] != null && i.data[i2].distance < closest2.distance) {
									closest2 = i.data[i2];
								}
							}
							tmp3 = closest2;
						}
						tmp = tmp2 > tmp3.distance;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					if(closest != null) {
						closest.put();
					}
					closest = i;
				} else {
					i.put();
				}
			}
		} else {
			var _g = 0;
			var _g2 = echo_Echo.cached_collisions;
			while(_g < _g2.length) _g2[_g++].put();
			echo_Echo.cached_collisions.length = 0;
			var _this = echo_Echo.cached_body;
			var min_x = aabb.min_x;
			var min_y = aabb.min_y;
			var max_x = aabb.max_x;
			var max_y = aabb.max_y;
			var rect = echo_shape_Rect._pool.get();
			var x = (min_x + max_x) * 0.5;
			var y = (min_y + max_y) * 0.5;
			var width = max_x - min_x;
			var height = max_y - min_y;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = x;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = y;
			rect.ex = width * 0.5;
			if(rect.transformed_rect != null) {
				var _this1 = rect.transformed_rect;
				_this1.count = 4;
				var _g = 0;
				var _g2 = _this1.count;
				while(_g < _g2) {
					var i = _g++;
					if(_this1.local_vertices[i] == null) {
						_this1.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = _this1.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this1.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_x = v;
				var v = rect.transform.local_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_y = v;
				var v = rect.transform.local_rotation;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_y = v;
				_this1.dirty_vertices = true;
				_this1.dirty_bounds = true;
			}
			rect.ey = (height <= 0 ? width : height) * 0.5;
			if(rect.transformed_rect != null) {
				var _this1 = rect.transformed_rect;
				_this1.count = 4;
				var _g = 0;
				var _g2 = _this1.count;
				while(_g < _g2) {
					var i = _g++;
					if(_this1.local_vertices[i] == null) {
						_this1.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = _this1.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this1.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_x = v;
				var v = rect.transform.local_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_y = v;
				var v = rect.transform.local_rotation;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_y = v;
				_this1.dirty_vertices = true;
				_this1.dirty_bounds = true;
			}
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = 0;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = 1;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = 1;
			var tmp;
			if(rect.transformed_rect == null) {
				var _this1 = rect.transform;
				var tmp1;
				if(_this1.parent == null) {
					tmp1 = _this1.local_rotation;
				} else {
					_this1.sync();
					tmp1 = _this1._rotation;
				}
				tmp = tmp1 != 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g2 = polygon.count;
				while(_g < _g2) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_x = v;
				var v = rect.transform.local_y;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_y = v;
				var v = rect.transform.local_rotation;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_y = v;
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent);
			} else if(rect.transformed_rect != null) {
				var v = rect.transform.local_x;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_x = v;
				var v = rect.transform.local_y;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_y = v;
				var v = rect.transform.local_rotation;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_y = v;
			}
			rect.pooled = false;
			if(_this.shapes[0] != null) {
				_this.shapes[0].put();
			}
			_this.shapes[0] = rect;
			_this.shapes[0].set_parent(_this);
			_this.dirty = true;
			if(_this.mass <= 0 && _this.world != null) {
				_this.bounds(_this.quadtree_data.bounds);
				_this.world.static_quadtree.update(_this.quadtree_data);
			}
			echo_Collisions.update_quadtree(world);
			echo_Collisions.overlap_body_and_bodies_bounds(echo_Echo.cached_body,_g1,world,echo_Echo.cached_collisions);
			var _g = 0;
			var _g1 = echo_Echo.cached_collisions;
			while(_g < _g1.length) {
				var collision = _g1[_g];
				++_g;
				var body = collision.b;
				var i = echo_data_Intersection._pool.get();
				i.line = line;
				i.body = body;
				i.data.length = 0;
				i.pooled = false;
				var _g2 = 0;
				var _g3 = collision.b.shapes.length;
				while(_g2 < _g3) {
					var result = collision.b.shapes[_g2++].intersect(line);
					if(result != null) {
						i.data.push(result);
					}
				}
				var tmp;
				if(i.data.length > 0) {
					if(closest != null) {
						var tmp1;
						if(closest.data.length == 0) {
							tmp1 = null;
						} else if(closest.data.length == 1) {
							tmp1 = closest.data[0];
						} else {
							var closest1 = closest.data[0];
							var _g4 = 1;
							var _g5 = closest.data.length;
							while(_g4 < _g5) {
								var i1 = _g4++;
								if(closest.data[i1] != null && closest.data[i1].distance < closest1.distance) {
									closest1 = closest.data[i1];
								}
							}
							tmp1 = closest1;
						}
						var tmp2 = tmp1.distance;
						var tmp3;
						if(i.data.length == 0) {
							tmp3 = null;
						} else if(i.data.length == 1) {
							tmp3 = i.data[0];
						} else {
							var closest2 = i.data[0];
							var _g6 = 1;
							var _g7 = i.data.length;
							while(_g6 < _g7) {
								var i2 = _g6++;
								if(i.data[i2] != null && i.data[i2].distance < closest2.distance) {
									closest2 = i.data[i2];
								}
							}
							tmp3 = closest2;
						}
						tmp = tmp2 > tmp3.distance;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					if(closest != null) {
						closest.put();
					}
					closest = i;
				} else {
					i.put();
				}
			}
		}
		break;
	}
	aabb.put();
	return closest;
};
echo_Echo.linecast_all = function(line,test,world) {
	var intersections = [];
	var min_x = Math.min(line.start.x,line.end.x);
	var min_y = Math.min(line.start.y,line.end.y);
	var max_x = Math.max(line.start.x,line.end.x);
	var max_y = Math.max(line.start.y,line.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	if(world != null && echo_Echo.cached_body == null) {
		echo_Echo.cached_body = new echo_Body();
	}
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.v;
		var i = echo_data_Intersection._pool.get();
		i.line = line;
		i.body = _g1;
		i.data.length = 0;
		i.pooled = false;
		var bb = _g1.bounds();
		if(aabb.min_x < bb.max_x && aabb.max_x >= bb.min_x && aabb.min_y < bb.max_y && aabb.max_y >= bb.min_y) {
			var _g2 = 0;
			var _g3 = _g1.shapes.length;
			while(_g2 < _g3) {
				var result = _g1.shapes[_g2++].intersect(line);
				if(result != null) {
					i.data.push(result);
				}
			}
		}
		bb.put();
		if(i.data.length > 0) {
			intersections.push(i);
		} else {
			i.put();
		}
		break;
	case 1:
		var _g1 = _g.v;
		if(world == null) {
			var _g = 0;
			while(_g < _g1.length) {
				var body = _g1[_g];
				++_g;
				if(body == null) {
					continue;
				}
				var bb = body.bounds();
				var i = echo_data_Intersection._pool.get();
				i.line = line;
				i.body = body;
				i.data.length = 0;
				i.pooled = false;
				if(aabb.min_x < bb.max_x && aabb.max_x >= bb.min_x && aabb.min_y < bb.max_y && aabb.max_y >= bb.min_y) {
					var _g2 = 0;
					var _g3 = body.shapes.length;
					while(_g2 < _g3) {
						var result = body.shapes[_g2++].intersect(line);
						if(result != null) {
							i.data.push(result);
						}
					}
				}
				bb.put();
				if(i.data.length > 0) {
					intersections.push(i);
				} else {
					i.put();
				}
			}
		} else {
			var _g = 0;
			var _g2 = echo_Echo.cached_collisions;
			while(_g < _g2.length) _g2[_g++].put();
			echo_Echo.cached_collisions.length = 0;
			var _this = echo_Echo.cached_body;
			var min_x = aabb.min_x;
			var min_y = aabb.min_y;
			var max_x = aabb.max_x;
			var max_y = aabb.max_y;
			var rect = echo_shape_Rect._pool.get();
			var x = (min_x + max_x) * 0.5;
			var y = (min_y + max_y) * 0.5;
			var width = max_x - min_x;
			var height = max_y - min_y;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = x;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = y;
			rect.ex = width * 0.5;
			if(rect.transformed_rect != null) {
				var _this1 = rect.transformed_rect;
				_this1.count = 4;
				var _g = 0;
				var _g2 = _this1.count;
				while(_g < _g2) {
					var i = _g++;
					if(_this1.local_vertices[i] == null) {
						_this1.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = _this1.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this1.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_x = v;
				var v = rect.transform.local_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_y = v;
				var v = rect.transform.local_rotation;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_y = v;
				_this1.dirty_vertices = true;
				_this1.dirty_bounds = true;
			}
			rect.ey = (height <= 0 ? width : height) * 0.5;
			if(rect.transformed_rect != null) {
				var _this1 = rect.transformed_rect;
				_this1.count = 4;
				var _g = 0;
				var _g2 = _this1.count;
				while(_g < _g2) {
					var i = _g++;
					if(_this1.local_vertices[i] == null) {
						_this1.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = _this1.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this1.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this1.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_x = v;
				var v = rect.transform.local_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_y = v;
				var v = rect.transform.local_rotation;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this2 = _this1.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this2.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_scale_y = v;
				_this1.dirty_vertices = true;
				_this1.dirty_bounds = true;
			}
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = 0;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = 1;
			var _this1 = rect.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g2 = _this1.children;
				while(_g < _g2.length) {
					var child = _g2[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g3 = 0;
					var _g4 = child.children;
					while(_g3 < _g4.length) {
						var child1 = _g4[_g3];
						++_g3;
						child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
						var _g5 = 0;
						var _g6 = child1.children;
						while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
						if(child1.on_dirty != null) {
							child1.on_dirty(child1);
						}
					}
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = 1;
			var tmp;
			if(rect.transformed_rect == null) {
				var _this1 = rect.transform;
				var tmp1;
				if(_this1.parent == null) {
					tmp1 = _this1.local_rotation;
				} else {
					_this1.sync();
					tmp1 = _this1._rotation;
				}
				tmp = tmp1 != 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g2 = polygon.count;
				while(_g < _g2) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				var v = rect.transform.local_x;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_x = v;
				var v = rect.transform.local_y;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_y = v;
				var v = rect.transform.local_rotation;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this1 = polygon.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_y = v;
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent);
			} else if(rect.transformed_rect != null) {
				var v = rect.transform.local_x;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_x = v;
				var v = rect.transform.local_y;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_y = v;
				var v = rect.transform.local_rotation;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_rotation = v;
				var v = rect.transform.local_scale_x;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_x = v;
				var v = rect.transform.local_scale_y;
				var _this1 = rect.transformed_rect.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g = 0;
					var _g2 = _this1.children;
					while(_g < _g2.length) {
						var child = _g2[_g];
						++_g;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g3 = 0;
						var _g4 = child.children;
						while(_g3 < _g4.length) {
							var child1 = _g4[_g3];
							++_g3;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g5 = 0;
							var _g6 = child1.children;
							while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_scale_y = v;
			}
			rect.pooled = false;
			if(_this.shapes[0] != null) {
				_this.shapes[0].put();
			}
			_this.shapes[0] = rect;
			_this.shapes[0].set_parent(_this);
			_this.dirty = true;
			if(_this.mass <= 0 && _this.world != null) {
				_this.bounds(_this.quadtree_data.bounds);
				_this.world.static_quadtree.update(_this.quadtree_data);
			}
			echo_Collisions.update_quadtree(world);
			echo_Collisions.overlap_body_and_bodies_bounds(echo_Echo.cached_body,_g1,world,echo_Echo.cached_collisions);
			var _g = 0;
			var _g1 = echo_Echo.cached_collisions;
			while(_g < _g1.length) {
				var collision = _g1[_g];
				++_g;
				var body = collision.b;
				var i = echo_data_Intersection._pool.get();
				i.line = line;
				i.body = body;
				i.data.length = 0;
				i.pooled = false;
				var _g2 = 0;
				var _g3 = collision.b.shapes.length;
				while(_g2 < _g3) {
					var result = collision.b.shapes[_g2++].intersect(line);
					if(result != null) {
						i.data.push(result);
					}
				}
				if(i.data.length > 0) {
					intersections.push(i);
				} else {
					i.put();
				}
			}
		}
		break;
	}
	aabb.put();
	return intersections;
};
echo_Echo.undo = function(world) {
	if(world.history != null) {
		var state = world.history.undo();
		if(state != null) {
			var _g = 0;
			while(_g < state.length) {
				var item = state[_g];
				++_g;
				var _g1 = 0;
				var _g2 = world.members;
				while(_g1 < _g2.length) {
					var body = _g2[_g1];
					++_g1;
					if(item.id == body.id) {
						var value = item.x;
						var _this = body.transform;
						if(!_this.dirty) {
							_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
							var _g3 = 0;
							var _g4 = _this.children;
							while(_g3 < _g4.length) {
								var child = _g4[_g3];
								++_g3;
								child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
								var _g5 = 0;
								var _g6 = child.children;
								while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
								if(child.on_dirty != null) {
									child.on_dirty(child);
								}
							}
							if(_this.on_dirty != null) {
								_this.on_dirty(_this);
							}
						}
						_this.local_x = value;
						if(body.on_move != null) {
							body.on_move(body.transform.local_x,body.transform.local_y);
						}
						var value1 = item.y;
						var _this1 = body.transform;
						if(!_this1.dirty) {
							_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
							var _g7 = 0;
							var _g8 = _this1.children;
							while(_g7 < _g8.length) {
								var child1 = _g8[_g7];
								++_g7;
								child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
								var _g9 = 0;
								var _g10 = child1.children;
								while(_g9 < _g10.length) _g10[_g9++].set_dirty(true);
								if(child1.on_dirty != null) {
									child1.on_dirty(child1);
								}
							}
							if(_this1.on_dirty != null) {
								_this1.on_dirty(_this1);
							}
						}
						_this1.local_y = value1;
						if(body.on_move != null) {
							body.on_move(body.transform.local_x,body.transform.local_y);
						}
						var value2 = item.rotation;
						var _this2 = body.transform;
						if(!_this2.dirty) {
							_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
							var _g11 = 0;
							var _g12 = _this2.children;
							while(_g11 < _g12.length) {
								var child2 = _g12[_g11];
								++_g11;
								child2.dirty = child2.inverse_dirty = child2.coordinates_dirty = true;
								var _g13 = 0;
								var _g14 = child2.children;
								while(_g13 < _g14.length) _g14[_g13++].set_dirty(true);
								if(child2.on_dirty != null) {
									child2.on_dirty(child2);
								}
							}
							if(_this2.on_dirty != null) {
								_this2.on_dirty(_this2);
							}
						}
						_this2.local_rotation = value2;
						if(body.on_rotate != null) {
							body.on_rotate(body.transform.local_rotation);
						}
						body.velocity = item.velocity;
					}
				}
			}
			world.reset_quadtrees();
		}
	}
	return world;
};
echo_Echo.redo = function(world) {
	if(world.history != null) {
		var state = world.history.redo();
		if(state != null) {
			var _g = 0;
			while(_g < state.length) {
				var item = state[_g];
				++_g;
				var _g1 = 0;
				var _g2 = world.members;
				while(_g1 < _g2.length) {
					var body = _g2[_g1];
					++_g1;
					if(item.id == body.id) {
						var value = item.x;
						var _this = body.transform;
						if(!_this.dirty) {
							_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
							var _g3 = 0;
							var _g4 = _this.children;
							while(_g3 < _g4.length) {
								var child = _g4[_g3];
								++_g3;
								child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
								var _g5 = 0;
								var _g6 = child.children;
								while(_g5 < _g6.length) _g6[_g5++].set_dirty(true);
								if(child.on_dirty != null) {
									child.on_dirty(child);
								}
							}
							if(_this.on_dirty != null) {
								_this.on_dirty(_this);
							}
						}
						_this.local_x = value;
						if(body.on_move != null) {
							body.on_move(body.transform.local_x,body.transform.local_y);
						}
						var value1 = item.y;
						var _this1 = body.transform;
						if(!_this1.dirty) {
							_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
							var _g7 = 0;
							var _g8 = _this1.children;
							while(_g7 < _g8.length) {
								var child1 = _g8[_g7];
								++_g7;
								child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
								var _g9 = 0;
								var _g10 = child1.children;
								while(_g9 < _g10.length) _g10[_g9++].set_dirty(true);
								if(child1.on_dirty != null) {
									child1.on_dirty(child1);
								}
							}
							if(_this1.on_dirty != null) {
								_this1.on_dirty(_this1);
							}
						}
						_this1.local_y = value1;
						if(body.on_move != null) {
							body.on_move(body.transform.local_x,body.transform.local_y);
						}
						var value2 = item.rotation;
						var _this2 = body.transform;
						if(!_this2.dirty) {
							_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
							var _g11 = 0;
							var _g12 = _this2.children;
							while(_g11 < _g12.length) {
								var child2 = _g12[_g11];
								++_g11;
								child2.dirty = child2.inverse_dirty = child2.coordinates_dirty = true;
								var _g13 = 0;
								var _g14 = child2.children;
								while(_g13 < _g14.length) _g14[_g13++].set_dirty(true);
								if(child2.on_dirty != null) {
									child2.on_dirty(child2);
								}
							}
							if(_this2.on_dirty != null) {
								_this2.on_dirty(_this2);
							}
						}
						_this2.local_rotation = value2;
						if(body.on_rotate != null) {
							body.on_rotate(body.transform.local_rotation);
						}
						body.velocity = item.velocity;
						body.acceleration = item.acceleration;
						body.rotational_velocity = item.rotational_velocity;
					}
				}
			}
		}
		world.reset_quadtrees();
	}
	return world;
};
var echo_util_Pool = function(type) {
	this.type = type;
	this.pool = [];
	this.count = 0;
};
echo_util_Pool.__name__ = true;
echo_util_Pool.prototype = {
	get: function() {
		if(this.count == 0) {
			return Type.createInstance(this.type,[]);
		}
		return this.pool[--this.count];
	}
	,put_unsafe: function(obj) {
		if(obj != null) {
			this.pool[this.count++] = obj;
		}
	}
};
var echo_Line = function(x,y,dx,dy) {
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.start = new hxmath_math_Vector2Default(x,y);
	this.end = new hxmath_math_Vector2Default(dx,dy);
};
echo_Line.__name__ = true;
echo_Line.prototype = {
	set_from_vector: function(start,degrees,length) {
		var rad = Math.PI / 180 * degrees;
		var x = start.x + length * Math.cos(rad);
		var y = start.y + length * Math.sin(rad);
		var x1 = start.x;
		var y1 = start.y;
		var dx = x;
		var dy = y;
		if(y == null) {
			dy = 1;
		}
		if(x == null) {
			dx = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var self = this.start;
		self.x = x1;
		self.y = y1;
		var self = this.end;
		self.x = dx;
		self.y = dy;
		return this;
	}
	,get_x: function() {
		return this.start.x;
	}
	,get_y: function() {
		return this.start.y;
	}
	,get_dx: function() {
		return this.end.x;
	}
	,get_dy: function() {
		return this.end.y;
	}
	,__properties__: {get_dy:"get_dy",get_dx:"get_dx",get_y:"get_y",get_x:"get_x"}
};
var echo_Listener = function(a,b,separate,collisions,last_collisions,enter,stay,exit,condition,quadtree_results,percent_correction,correction_threshold) {
	this.a = a;
	this.b = b;
	this.separate = separate;
	this.collisions = collisions;
	this.last_collisions = last_collisions;
	this.enter = enter;
	this.stay = stay;
	this.exit = exit;
	this.condition = condition;
	this.quadtree_results = quadtree_results;
	this.percent_correction = percent_correction;
	this.correction_threshold = correction_threshold;
};
echo_Listener.__name__ = true;
echo_Listener.__properties__ = {get_defaults:"get_defaults"};
echo_Listener.get_defaults = function() {
	return { separate : true, percent_correction : 0.9, correction_threshold : 0.013};
};
var echo_Physics = function() { };
echo_Physics.__name__ = true;
echo_Physics.step = function(world,dt) {
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.mass > 0) {
			if(!b.disposed && b.active) {
				b.last_x = b.transform.local_x;
				b.last_y = b.transform.local_y;
				b.last_rotation = b.transform.local_rotation;
				var accel_x = b.acceleration.x;
				var accel_y = b.acceleration.y;
				if(!b.kinematic) {
					accel_x += world.gravity.x * b.gravity_scale;
					accel_y += world.gravity.y * b.gravity_scale;
				}
				var v = b.velocity.x;
				var d = b.drag.x;
				var m = b.max_velocity.x;
				if(!(Math.abs(accel_x) <= 0.00001)) {
					v += accel_x * dt;
				} else if(!(Math.abs(d) <= 0.00001)) {
					d *= dt;
					if(v - d > 0) {
						v -= d;
					} else if(v + d < 0) {
						v += d;
					} else {
						v = 0;
					}
				}
				if(!(Math.abs(m) <= 0.00001)) {
					var min = -m;
					if(v < min) {
						v = min;
					} else if(v > m) {
						v = m;
					}
				}
				b.velocity.x = v;
				var v1 = b.velocity.y;
				var d1 = b.drag.y;
				var m1 = b.max_velocity.y;
				if(!(Math.abs(accel_y) <= 0.00001)) {
					v1 += accel_y * dt;
				} else if(!(Math.abs(d1) <= 0.00001)) {
					d1 *= dt;
					if(v1 - d1 > 0) {
						v1 -= d1;
					} else if(v1 + d1 < 0) {
						v1 += d1;
					} else {
						v1 = 0;
					}
				}
				if(!(Math.abs(m1) <= 0.00001)) {
					var min1 = -m1;
					if(v1 < min1) {
						v1 = min1;
					} else if(v1 > m1) {
						v1 = m1;
					}
				}
				b.velocity.y = v1;
				var tmp;
				if(b.drag_length > 0) {
					var a = b.acceleration;
					var b1 = echo_Physics.zero;
					tmp = a == null && b1 == null || a != null && b1 != null && a.x == b1.x && a.y == b1.y;
				} else {
					tmp = false;
				}
				if(tmp && b.velocity != echo_Physics.zero) {
					var self = b.velocity;
					var newLength = Math.sqrt(self.x * self.x + self.y * self.y) - b.drag_length * dt;
					var self1 = b.velocity;
					var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
					if(length > 0.0) {
						self1.x /= length;
						self1.y /= length;
					}
					self1.x *= newLength;
					self1.y *= newLength;
				}
				var tmp1;
				if(b.max_velocity_length > 0) {
					var self2 = b.velocity;
					tmp1 = Math.sqrt(self2.x * self2.x + self2.y * self2.y) > b.max_velocity_length;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var newLength1 = b.max_velocity_length;
					var self3 = b.velocity;
					var length1 = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length1 > 0.0) {
						self3.x /= length1;
						self3.y /= length1;
					}
					self3.x *= newLength1;
					self3.y *= newLength1;
				}
				var value = b.transform.local_x + b.velocity.x * b.inverse_mass * dt;
				var _this = b.transform;
				if(!_this.dirty) {
					_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = _this.children;
					while(_g2 < _g3.length) {
						var child = _g3[_g2];
						++_g2;
						child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
						var _g4 = 0;
						var _g5 = child.children;
						while(_g4 < _g5.length) {
							var child1 = _g5[_g4];
							++_g4;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g6 = 0;
							var _g7 = child1.children;
							while(_g6 < _g7.length) {
								var child2 = _g7[_g6];
								++_g6;
								child2.dirty = child2.inverse_dirty = child2.coordinates_dirty = true;
								var _g8 = 0;
								var _g9 = child2.children;
								while(_g8 < _g9.length) _g9[_g8++].set_dirty(true);
								if(child2.on_dirty != null) {
									child2.on_dirty(child2);
								}
							}
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(child.on_dirty != null) {
							child.on_dirty(child);
						}
					}
					if(_this.on_dirty != null) {
						_this.on_dirty(_this);
					}
				}
				_this.local_x = value;
				if(b.on_move != null) {
					b.on_move(b.transform.local_x,b.transform.local_y);
				}
				var value1 = b.transform.local_y + b.velocity.y * b.inverse_mass * dt;
				var _this1 = b.transform;
				if(!_this1.dirty) {
					_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
					var _g10 = 0;
					var _g11 = _this1.children;
					while(_g10 < _g11.length) {
						var child3 = _g11[_g10];
						++_g10;
						child3.dirty = child3.inverse_dirty = child3.coordinates_dirty = true;
						var _g12 = 0;
						var _g13 = child3.children;
						while(_g12 < _g13.length) {
							var child4 = _g13[_g12];
							++_g12;
							child4.dirty = child4.inverse_dirty = child4.coordinates_dirty = true;
							var _g14 = 0;
							var _g15 = child4.children;
							while(_g14 < _g15.length) {
								var child5 = _g15[_g14];
								++_g14;
								child5.dirty = child5.inverse_dirty = child5.coordinates_dirty = true;
								var _g16 = 0;
								var _g17 = child5.children;
								while(_g16 < _g17.length) _g17[_g16++].set_dirty(true);
								if(child5.on_dirty != null) {
									child5.on_dirty(child5);
								}
							}
							if(child4.on_dirty != null) {
								child4.on_dirty(child4);
							}
						}
						if(child3.on_dirty != null) {
							child3.on_dirty(child3);
						}
					}
					if(_this1.on_dirty != null) {
						_this1.on_dirty(_this1);
					}
				}
				_this1.local_y = value1;
				if(b.on_move != null) {
					b.on_move(b.transform.local_x,b.transform.local_y);
				}
				if(b.max_rotational_velocity > 0) {
					var value2 = b.rotational_velocity;
					var min2 = -b.max_rotational_velocity;
					var max = b.max_rotational_velocity;
					b.rotational_velocity = value2 < min2 ? min2 : value2 > max ? max : value2;
				}
				if(b.rotational_drag > 0) {
					if(b.rotational_velocity > 0) {
						b.rotational_velocity -= b.rotational_drag * dt;
						if(b.rotational_velocity < 0) {
							b.rotational_velocity = 0;
						}
					} else {
						b.rotational_velocity += b.rotational_drag * dt;
						if(b.rotational_velocity > 0) {
							b.rotational_velocity = 0;
						}
					}
				}
				var value3 = b.transform.local_rotation + b.rotational_velocity * dt;
				var _this2 = b.transform;
				if(!_this2.dirty) {
					_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
					var _g18 = 0;
					var _g19 = _this2.children;
					while(_g18 < _g19.length) {
						var child6 = _g19[_g18];
						++_g18;
						child6.dirty = child6.inverse_dirty = child6.coordinates_dirty = true;
						var _g20 = 0;
						var _g21 = child6.children;
						while(_g20 < _g21.length) {
							var child7 = _g21[_g20];
							++_g20;
							child7.dirty = child7.inverse_dirty = child7.coordinates_dirty = true;
							var _g22 = 0;
							var _g23 = child7.children;
							while(_g22 < _g23.length) {
								var child8 = _g23[_g22];
								++_g22;
								child8.dirty = child8.inverse_dirty = child8.coordinates_dirty = true;
								var _g24 = 0;
								var _g25 = child8.children;
								while(_g24 < _g25.length) _g25[_g24++].set_dirty(true);
								if(child8.on_dirty != null) {
									child8.on_dirty(child8);
								}
							}
							if(child7.on_dirty != null) {
								child7.on_dirty(child7);
							}
						}
						if(child6.on_dirty != null) {
							child6.on_dirty(child6);
						}
					}
					if(_this2.on_dirty != null) {
						_this2.on_dirty(_this2);
					}
				}
				_this2.local_rotation = value3;
				if(b.on_rotate != null) {
					b.on_rotate(b.transform.local_rotation);
				}
			}
		}
	}
};
echo_Physics.separate = function(world,listeners) {
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		if(listener.separate) {
			var _g1 = 0;
			var _g2 = listener.collisions;
			while(_g1 < _g2.length) {
				var collision = _g2[_g1];
				++_g1;
				var _g3 = 0;
				var _g4 = collision.data.length;
				while(_g3 < _g4) {
					var a = collision.a;
					var b = collision.b;
					var cd = collision.data[_g3++];
					var correction_threshold = listener.correction_threshold;
					var percent_correction = listener.percent_correction;
					if(percent_correction == null) {
						percent_correction = 0.9;
					}
					if(correction_threshold == null) {
						correction_threshold = 0.013;
					}
					if(!(!cd.sa.solid || !cd.sb.solid || !a.active || !b.active || a.disposed || b.disposed || a.mass <= 0 && b.mass <= 0)) {
						var vel_to_normal = (a.velocity.x - b.velocity.x) * cd.normal.x + (a.velocity.y - b.velocity.y) * cd.normal.y;
						var inv_mass_sum = a.inverse_mass + b.inverse_mass;
						if(vel_to_normal > 0) {
							var j = -(1 + (a.elasticity + b.elasticity) * 0.5) * vel_to_normal / inv_mass_sum;
							var impulse_x = -j * cd.normal.x;
							var impulse_y = -j * cd.normal.y;
							if(!a.kinematic) {
								a.velocity.x -= impulse_x * a.inverse_mass;
								a.velocity.y -= impulse_y * a.inverse_mass;
							}
							if(!b.kinematic) {
								b.velocity.x += impulse_x * b.inverse_mass;
								b.velocity.y += impulse_y * b.inverse_mass;
							}
						}
						var correction = Math.max(cd.overlap - correction_threshold,0) / inv_mass_sum * percent_correction;
						var cx = correction * cd.normal.x;
						var cy = correction * cd.normal.y;
						if(!a.kinematic) {
							var value = a.transform.local_x - a.inverse_mass * cx;
							var _this = a.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g5 = 0;
								var _g6 = _this.children;
								while(_g5 < _g6.length) {
									var child = _g6[_g5];
									++_g5;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g7 = 0;
									var _g8 = child.children;
									while(_g7 < _g8.length) _g8[_g7++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = value;
							if(a.on_move != null) {
								a.on_move(a.transform.local_x,a.transform.local_y);
							}
							var value1 = a.transform.local_y - a.inverse_mass * cy;
							var _this1 = a.transform;
							if(!_this1.dirty) {
								_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
								var _g9 = 0;
								var _g10 = _this1.children;
								while(_g9 < _g10.length) {
									var child1 = _g10[_g9];
									++_g9;
									child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
									var _g11 = 0;
									var _g12 = child1.children;
									while(_g11 < _g12.length) _g12[_g11++].set_dirty(true);
									if(child1.on_dirty != null) {
										child1.on_dirty(child1);
									}
								}
								if(_this1.on_dirty != null) {
									_this1.on_dirty(_this1);
								}
							}
							_this1.local_y = value1;
							if(a.on_move != null) {
								a.on_move(a.transform.local_x,a.transform.local_y);
							}
						}
						if(!b.kinematic) {
							var value2 = b.transform.local_x + b.inverse_mass * cx;
							var _this2 = b.transform;
							if(!_this2.dirty) {
								_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
								var _g13 = 0;
								var _g14 = _this2.children;
								while(_g13 < _g14.length) {
									var child2 = _g14[_g13];
									++_g13;
									child2.dirty = child2.inverse_dirty = child2.coordinates_dirty = true;
									var _g15 = 0;
									var _g16 = child2.children;
									while(_g15 < _g16.length) _g16[_g15++].set_dirty(true);
									if(child2.on_dirty != null) {
										child2.on_dirty(child2);
									}
								}
								if(_this2.on_dirty != null) {
									_this2.on_dirty(_this2);
								}
							}
							_this2.local_x = value2;
							if(b.on_move != null) {
								b.on_move(b.transform.local_x,b.transform.local_y);
							}
							var value3 = b.transform.local_y + b.inverse_mass * cy;
							var _this3 = b.transform;
							if(!_this3.dirty) {
								_this3.dirty = _this3.inverse_dirty = _this3.coordinates_dirty = true;
								var _g17 = 0;
								var _g18 = _this3.children;
								while(_g17 < _g18.length) {
									var child3 = _g18[_g17];
									++_g17;
									child3.dirty = child3.inverse_dirty = child3.coordinates_dirty = true;
									var _g19 = 0;
									var _g20 = child3.children;
									while(_g19 < _g20.length) _g20[_g19++].set_dirty(true);
									if(child3.on_dirty != null) {
										child3.on_dirty(child3);
									}
								}
								if(_this3.on_dirty != null) {
									_this3.on_dirty(_this3);
								}
							}
							_this3.local_y = value3;
							if(b.on_move != null) {
								b.on_move(b.transform.local_x,b.transform.local_y);
							}
						}
					}
				}
			}
		}
	}
};
var echo_Shape = function(x,y,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.solid = true;
	this.transform = new echo_util_Transform();
	var _this = this.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_x = x;
	var _this = this.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_y = y;
	var _this = this.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_rotation = rotation;
};
echo_Shape.__name__ = true;
echo_Shape.__properties__ = {get_defaults:"get_defaults"};
echo_Shape.get = function(options) {
	options = echo_util_JSON.copy_fields(options,echo_Shape.get_defaults());
	var s;
	switch(options.type) {
	case 0:
		var x = options.offset_x;
		var y = options.offset_y;
		var width = options.width;
		var height = options.height;
		var rotation = options.rotation;
		var scale_x = options.scale_x;
		var scale_y = options.scale_y;
		if(scale_y == null) {
			scale_y = 1;
		}
		if(scale_x == null) {
			scale_x = 1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var rect = echo_shape_Rect._pool.get();
		var x1 = x;
		var y1 = y;
		var width1 = width;
		var height1 = height;
		var rotation1 = rotation;
		var scale_x1 = scale_x;
		var scale_y1 = scale_y;
		if(scale_y1 == null) {
			scale_y1 = 1;
		}
		if(scale_x1 == null) {
			scale_x1 = 1;
		}
		if(rotation1 == null) {
			rotation1 = 0;
		}
		if(height1 == null) {
			height1 = 0;
		}
		if(width1 == null) {
			width1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = x1;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = y1;
		rect.ex = width1 * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = v;
			var v = rect.transform.local_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = v;
			var v = rect.transform.local_rotation;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = v;
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
		}
		rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = v;
			var v = rect.transform.local_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = v;
			var v = rect.transform.local_rotation;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = v;
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
		}
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = rotation1;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = scale_x1;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = scale_y1;
		var s1;
		if(rect.transformed_rect == null) {
			var _this = rect.transform;
			var s2;
			if(_this.parent == null) {
				s2 = _this.local_rotation;
			} else {
				_this.sync();
				s2 = _this._rotation;
			}
			s1 = s2 != 0;
		} else {
			s1 = false;
		}
		if(s1) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = polygon.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = polygon.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = polygon.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = rect.transform.local_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = rect.transform.local_rotation;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			rect.transformed_rect = polygon;
			rect.transformed_rect.set_parent(rect.parent);
		} else if(rect.transformed_rect != null) {
			var v = rect.transform.local_x;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = rect.transform.local_y;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = rect.transform.local_rotation;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
		}
		rect.pooled = false;
		s = rect;
		break;
	case 1:
		var x = options.offset_x;
		var y = options.offset_y;
		var radius = options.radius;
		var rotation = options.rotation;
		var scale_x = options.scale_x;
		var scale_y = options.scale_y;
		if(scale_y == null) {
			scale_y = 1;
		}
		if(scale_x == null) {
			scale_x = 1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var circle = echo_shape_Circle._pool.get();
		var x1 = x;
		var y1 = y;
		var radius1 = radius;
		var rotation1 = rotation;
		var scale_x1 = scale_x;
		var scale_y1 = scale_y;
		if(scale_y1 == null) {
			scale_y1 = 1;
		}
		if(scale_x1 == null) {
			scale_x1 = 1;
		}
		if(rotation1 == null) {
			rotation1 = 0;
		}
		if(radius1 == null) {
			radius1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var _this = circle.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = x1;
		var _this = circle.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = y1;
		var _this = circle.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = rotation1;
		var _this = circle.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = scale_x1;
		var _this = circle.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = scale_y1;
		var _this = circle.transform;
		var s1;
		if(_this.parent == null) {
			s1 = _this.local_scale_x;
		} else {
			_this.sync();
			s1 = _this._scale_x;
		}
		circle.local_radius = radius1 / s1;
		circle.pooled = false;
		s = circle;
		break;
	case 2:
		if(options.vertices != null) {
			var x = options.offset_x;
			var y = options.offset_y;
			var rotation = options.rotation;
			var vertices = options.vertices;
			var scale_x = options.scale_x;
			var scale_y = options.scale_y;
			if(scale_y == null) {
				scale_y = 1;
			}
			if(scale_x == null) {
				scale_x = 1;
			}
			if(rotation == null) {
				rotation = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var polygon = echo_shape_Polygon._pool.get();
			var x1 = x;
			var y1 = y;
			var rotation1 = rotation;
			var scale_x1 = scale_x;
			var scale_y1 = scale_y;
			if(scale_y1 == null) {
				scale_y1 = 1;
			}
			if(scale_x1 == null) {
				scale_x1 = 1;
			}
			if(rotation1 == null) {
				rotation1 = 0;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = x1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = y1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = rotation1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = scale_x1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = scale_y1;
			var count = null;
			polygon.local_vertices = vertices == null ? [] : vertices;
			polygon.count = polygon.local_vertices.length;
			if(count > polygon.local_vertices.length) {
				var _g = polygon.local_vertices.length;
				while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			s = polygon;
		} else {
			var x = options.offset_x;
			var y = options.offset_y;
			var sides = options.sides;
			var radius = options.radius;
			var rotation = options.rotation;
			var scale_x = options.scale_x;
			var scale_y = options.scale_y;
			if(scale_y == null) {
				scale_y = 1;
			}
			if(scale_x == null) {
				scale_x = 1;
			}
			if(rotation == null) {
				rotation = 0;
			}
			if(radius == null) {
				radius = 1;
			}
			if(sides == null) {
				sides = 3;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			if(sides < 3) {
				throw haxe_Exception.thrown("Polygons require 3 sides as a minimum");
			}
			var polygon = echo_shape_Polygon._pool.get();
			var rot = Math.PI * 2 / sides;
			var angle;
			var verts = [];
			var _g = 0;
			var _g1 = sides;
			while(_g < _g1) {
				angle = _g++ * rot + (Math.PI - rot) * 0.5;
				verts.push(new hxmath_math_Vector2Default(Math.cos(angle) * radius,Math.sin(angle) * radius));
			}
			var x1 = x;
			var y1 = y;
			var rotation1 = rotation;
			var scale_x1 = scale_x;
			var scale_y1 = scale_y;
			if(scale_y1 == null) {
				scale_y1 = 1;
			}
			if(scale_x1 == null) {
				scale_x1 = 1;
			}
			if(rotation1 == null) {
				rotation1 = 0;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = x1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = y1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = rotation1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = scale_x1;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = scale_y1;
			var count = null;
			polygon.local_vertices = verts == null ? [] : verts;
			polygon.count = polygon.local_vertices.length;
			if(count > polygon.local_vertices.length) {
				var _g = polygon.local_vertices.length;
				while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			s = polygon;
		}
		break;
	}
	s.solid = options.solid;
	return s;
};
echo_Shape.get_defaults = function() {
	return { type : 0, radius : 1, width : 1, height : 0, sides : 3, rotation : 0, scale_x : 1, scale_y : 1, offset_x : 0, offset_y : 0, solid : true};
};
echo_Shape.prototype = {
	put: function() {
		this.transform.set_parent(null);
		this.parent = null;
		this.collided = false;
	}
	,set_parent: function(body) {
		if(this.parent == body) {
			return;
		}
		this.parent = body;
		this.transform.set_parent(body == null ? null : body.transform);
	}
	,bounds: function(aabb) {
		if(aabb == null) {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			aabb1.min_x = x1;
			aabb1.min_y = y1;
			aabb1.max_x = x1;
			aabb1.max_y = y1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			aabb.min_x = x;
			aabb.min_y = y;
			aabb.max_x = x;
			aabb.max_y = y;
			return aabb;
		}
	}
	,intersect: function(l) {
		return null;
	}
	,collides: function(s) {
		return null;
	}
	,collide_rect: function(r) {
		return null;
	}
	,collide_circle: function(c) {
		return null;
	}
	,collide_polygon: function(p) {
		return null;
	}
};
var echo_World = function(options) {
	this.members = options.members == null ? [] : options.members;
	this.init = false;
	var value;
	if(options.width < 1) {
		throw haxe_Exception.thrown("World must have a width of at least 1");
	} else {
		value = options.width;
	}
	this.width = value;
	if(this.init) {
		this.reset_quadtrees();
	}
	var value;
	if(options.height < 1) {
		throw haxe_Exception.thrown("World must have a width of at least 1");
	} else {
		value = options.height;
	}
	this.height = value;
	if(this.init) {
		this.reset_quadtrees();
	}
	this.x = options.x == null ? 0 : options.x;
	if(this.init) {
		this.reset_quadtrees();
	}
	this.y = options.y == null ? 0 : options.y;
	if(this.init) {
		this.reset_quadtrees();
	}
	this.gravity = new hxmath_math_Vector2Default(options.gravity_x == null ? 0 : options.gravity_x,options.gravity_y == null ? 0 : options.gravity_y);
	this.reset_quadtrees();
	this.listeners = new echo_Listeners(options.listeners);
	this.iterations = options.iterations == null ? 5 : options.iterations;
	if(options.history != null) {
		this.history = new echo_util_History_$Array_$echo_$data_$BodyState(options.history);
	}
};
echo_World.__name__ = true;
echo_World.prototype = {
	add: function(body) {
		if(body.world == this) {
			return body;
		}
		if(body.world != null) {
			if(body.world != null) {
				body.world.remove(body);
			}
			if(body.quadtree_data != null && body.quadtree_data.bounds != null) {
				body.quadtree_data.bounds.put();
			}
		}
		body.world = this;
		body.dirty = true;
		this.members.push(body);
		body.quadtree_data = new echo_data_QuadTreeData(body.id,body.bounds(),false);
		if(body.mass <= 0) {
			this.static_quadtree.insert(body.quadtree_data);
		} else {
			this.quadtree.insert(body.quadtree_data);
		}
		return body;
	}
	,remove: function(body) {
		this.quadtree.remove(body.quadtree_data);
		this.static_quadtree.remove(body.quadtree_data);
		HxOverrides.remove(this.members,body);
		body.world = null;
		return body;
	}
	,clear: function() {
		while(this.members.length > 0) {
			var m = this.members.pop();
			if(m != null) {
				if(m.world != null) {
					m.world.remove(m);
				}
				if(m.quadtree_data != null && m.quadtree_data.bounds != null) {
					m.quadtree_data.bounds.put();
				}
			}
		}
		this.reset_quadtrees();
		this.listeners.clear();
	}
	,reset_quadtrees: function() {
		this.init = true;
		if(this.quadtree != null) {
			var _this = this.quadtree;
			if(!_this.pooled) {
				_this.pooled = true;
				var _g = 0;
				var _g1 = _this.children.length;
				while(_g < _g1) {
					var i = _g++;
					if(_this.children[i] != null) {
						_this.children[i].clear_children();
						var _this1 = _this.children[i];
						if(!_this1.pooled) {
							_this1.pooled = true;
							_this1.clear_children();
							_this1.contents.length = 0;
							_this1.contents_count = 0;
							_this1.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(_this1);
						}
						_this.children[i] = null;
					}
				}
				_this.contents.length = 0;
				_this.contents_count = 0;
				_this.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this);
			}
		}
		var qt = echo_util_QuadTree._pool.get();
		var x = 0;
		var y = 0;
		qt.min_x = x - 0.5;
		qt.min_y = y - 0.5;
		qt.max_x = x + 0.5;
		qt.max_y = y + 0.5;
		var _g = 0;
		var _g1 = qt.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(qt.children[i] != null) {
				qt.children[i].clear_children();
				var _this = qt.children[i];
				if(!_this.pooled) {
					_this.pooled = true;
					_this.clear_children();
					_this.contents.length = 0;
					_this.contents_count = 0;
					_this.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this);
				}
				qt.children[i] = null;
			}
		}
		qt.contents.length = 0;
		qt.contents_count = 0;
		qt.pooled = false;
		this.quadtree = qt;
		if(this.static_quadtree != null) {
			var _this = this.static_quadtree;
			if(!_this.pooled) {
				_this.pooled = true;
				var _g = 0;
				var _g1 = _this.children.length;
				while(_g < _g1) {
					var i = _g++;
					if(_this.children[i] != null) {
						_this.children[i].clear_children();
						var _this1 = _this.children[i];
						if(!_this1.pooled) {
							_this1.pooled = true;
							_this1.clear_children();
							_this1.contents.length = 0;
							_this1.contents_count = 0;
							_this1.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(_this1);
						}
						_this.children[i] = null;
					}
				}
				_this.contents.length = 0;
				_this.contents_count = 0;
				_this.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this);
			}
		}
		var qt = echo_util_QuadTree._pool.get();
		var x = 0;
		var y = 0;
		qt.min_x = x - 0.5;
		qt.min_y = y - 0.5;
		qt.max_x = x + 0.5;
		qt.max_y = y + 0.5;
		var _g = 0;
		var _g1 = qt.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(qt.children[i] != null) {
				qt.children[i].clear_children();
				var _this = qt.children[i];
				if(!_this.pooled) {
					_this.pooled = true;
					_this.clear_children();
					_this.contents.length = 0;
					_this.contents_count = 0;
					_this.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this);
				}
				qt.children[i] = null;
			}
		}
		qt.contents.length = 0;
		qt.contents_count = 0;
		qt.pooled = false;
		this.static_quadtree = qt;
		var r;
		var x = this.x + this.width * 0.5;
		var y = this.y + this.height * 0.5;
		var width = this.width;
		var height = this.height;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var rect = echo_shape_Rect._pool.get();
		var x1 = x;
		var y1 = y;
		var width1 = width;
		var height1 = height;
		var rotation = 0;
		var scale_x = 1;
		var scale_y = 1;
		if(height1 == null) {
			height1 = 0;
		}
		if(width1 == null) {
			width1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = x1;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = y1;
		rect.ex = width1 * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = v;
			var v = rect.transform.local_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = v;
			var v = rect.transform.local_rotation;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = v;
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
		}
		rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_x = v;
			var v = rect.transform.local_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_y = v;
			var v = rect.transform.local_rotation;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_scale_y = v;
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
		}
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = rotation;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = scale_x;
		var _this = rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = scale_y;
		var r1;
		if(rect.transformed_rect == null) {
			var _this = rect.transform;
			var r2;
			if(_this.parent == null) {
				r2 = _this.local_rotation;
			} else {
				_this.sync();
				r2 = _this._rotation;
			}
			r1 = r2 != 0;
		} else {
			r1 = false;
		}
		if(r1) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = polygon.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = polygon.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = polygon.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			var v = rect.transform.local_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = rect.transform.local_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = rect.transform.local_rotation;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			rect.transformed_rect = polygon;
			rect.transformed_rect.set_parent(rect.parent);
		} else if(rect.transformed_rect != null) {
			var v = rect.transform.local_x;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = rect.transform.local_y;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = rect.transform.local_rotation;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = rect.transform.local_scale_x;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = rect.transform.local_scale_y;
			var _this = rect.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
		}
		rect.pooled = false;
		r = rect;
		var r1 = r.to_aabb(true);
		var _this = this.quadtree;
		_this.min_x = r1.min_x;
		_this.max_x = r1.max_x;
		_this.min_y = r1.min_y;
		_this.max_y = r1.max_y;
		var _this = this.static_quadtree;
		_this.min_x = r1.min_x;
		_this.max_x = r1.max_x;
		_this.min_y = r1.min_y;
		_this.max_y = r1.max_y;
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.mass > 0) {
				b.dirty = true;
			} else {
				b.bounds(b.quadtree_data.bounds);
				this.static_quadtree.update(b.quadtree_data);
			}
		}
	}
};
var echo_data_BodyState = function(id,x,y,rotation,velocity,acceleration,rotational_velocity) {
	this.id = id;
	this.x = x;
	this.y = y;
	this.rotation = rotation;
	this.velocity = new hxmath_math_Vector2Default(velocity.x,velocity.y);
	this.acceleration = new hxmath_math_Vector2Default(velocity.x,velocity.y);
	this.rotational_velocity = rotational_velocity;
};
echo_data_BodyState.__name__ = true;
var echo_data_Collision = function() {
	this.data = [];
};
echo_data_Collision.__name__ = true;
echo_data_Collision.prototype = {
	put: function() {
		if(!this.pooled) {
			var _g = 0;
			var _g1 = this.data;
			while(_g < _g1.length) _g1[_g++].put();
			this.pooled = true;
			echo_data_Collision._pool.put_unsafe(this);
		}
	}
};
var echo_data_CollisionData = function() {
	this.normal = new hxmath_math_Vector2Default(0,0);
};
echo_data_CollisionData.__name__ = true;
echo_data_CollisionData.prototype = {
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_data_CollisionData._pool.put_unsafe(this);
		}
	}
};
var echo_data_Intersection = function() {
	this.data = [];
};
echo_data_Intersection.__name__ = true;
echo_data_Intersection.prototype = {
	put: function() {
		if(!this.pooled) {
			var _g = 0;
			var _g1 = this.data;
			while(_g < _g1.length) _g1[_g++].put();
			this.pooled = true;
			echo_data_Intersection._pool.put_unsafe(this);
		}
	}
};
var echo_data_IntersectionData = function() {
	this.hit = new hxmath_math_Vector2Default(0,0);
	this.normal = new hxmath_math_Vector2Default(0,0);
};
echo_data_IntersectionData.__name__ = true;
echo_data_IntersectionData.prototype = {
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_data_IntersectionData._pool.put_unsafe(this);
		}
	}
};
var echo_data_QuadTreeData = function(id,bounds,flag) {
	this.flag = false;
	this.id = id;
	this.bounds = bounds;
	if(flag != null) {
		this.flag = flag;
	}
};
echo_data_QuadTreeData.__name__ = true;
var echo_shape_Circle = function() {
	echo_Shape.call(this);
	this.type = 1;
	var _this = this.transform;
	var tmp;
	if(_this.parent == null) {
		tmp = _this.local_scale_x;
	} else {
		_this.sync();
		tmp = _this._scale_x;
	}
	this.local_radius = 0 / tmp;
};
echo_shape_Circle.__name__ = true;
echo_shape_Circle.get = function(x,y,radius,rotation,scale_x,scale_y) {
	if(scale_y == null) {
		scale_y = 1;
	}
	if(scale_x == null) {
		scale_x = 1;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var circle = echo_shape_Circle._pool.get();
	var x1 = x;
	var y1 = y;
	var radius1 = radius;
	var rotation1 = rotation;
	var scale_x1 = scale_x;
	var scale_y1 = scale_y;
	if(scale_y == null) {
		scale_y1 = 1;
	}
	if(scale_x == null) {
		scale_x1 = 1;
	}
	if(rotation == null) {
		rotation1 = 0;
	}
	if(radius == null) {
		radius1 = 1;
	}
	if(y == null) {
		y1 = 0;
	}
	if(x == null) {
		x1 = 0;
	}
	var _this = circle.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_x = x1;
	var _this = circle.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_y = y1;
	var _this = circle.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_rotation = rotation1;
	var _this = circle.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_x = scale_x1;
	var _this = circle.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_y = scale_y1;
	var _this = circle.transform;
	var tmp;
	if(_this.parent == null) {
		tmp = _this.local_scale_x;
	} else {
		_this.sync();
		tmp = _this._scale_x;
	}
	circle.local_radius = radius1 / tmp;
	circle.pooled = false;
	return circle;
};
echo_shape_Circle.__super__ = echo_Shape;
echo_shape_Circle.prototype = $extend(echo_Shape.prototype,{
	put: function() {
		echo_Shape.prototype.put.call(this);
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Circle._pool.put_unsafe(this);
		}
	}
	,bounds: function(aabb) {
		var d = this.local_radius;
		var _this = this.transform;
		var d1;
		if(_this.parent == null) {
			d1 = _this.local_scale_x;
		} else {
			_this.sync();
			d1 = _this._scale_x;
		}
		var d2 = d * d1 * 2;
		if(aabb == null) {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			var width = d2;
			var height = d2;
			if(d2 == null) {
				height = 1;
			}
			if(d2 == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			if(height1 == null) {
				height1 = 1;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width1 *= 0.5;
			height1 *= 0.5;
			aabb1.min_x = x1 - width1;
			aabb1.min_y = y1 - height1;
			aabb1.max_x = x1 + width1;
			aabb1.max_y = y1 + height1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			var width = d2;
			var height = d2;
			if(d2 == null) {
				height = 1;
			}
			if(d2 == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x - width;
			aabb.min_y = y - height;
			aabb.max_x = x + width;
			aabb.max_y = y + height;
			return aabb;
		}
	}
	,intersect: function(l) {
		return echo_util_SAT.line_intersects_circle(l,this);
	}
	,collides: function(s) {
		return s.collide_circle(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_circle(r,this,true);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.circle_and_circle(c,this);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.circle_and_polygon(this,p,true);
	}
});
var echo_shape_Polygon = function(vertices) {
	this.sync_pos = new hxmath_math_Vector2Default(0,0);
	echo_Shape.call(this);
	this.type = 2;
	this._vertices = [];
	this._normals = [];
	var aabb = echo_util_AABB._pool.get();
	var x = 0;
	var y = 0;
	aabb.min_x = x - 0.5;
	aabb.min_y = y - 0.5;
	aabb.max_x = x + 0.5;
	aabb.max_y = y + 0.5;
	aabb.pooled = false;
	this._bounds = aabb;
	this.transform.on_dirty = $bind(this,this.on_dirty);
	var count = null;
	this.local_vertices = vertices == null ? [] : vertices;
	this.count = this.local_vertices.length;
	if(count > this.local_vertices.length) {
		var _g = this.local_vertices.length;
		while(_g < count) this.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
	}
	this.dirty_vertices = true;
	this.dirty_bounds = true;
};
echo_shape_Polygon.__name__ = true;
echo_shape_Polygon.get = function(x,y,sides,radius,rotation,scale_x,scale_y) {
	if(scale_y == null) {
		scale_y = 1;
	}
	if(scale_x == null) {
		scale_x = 1;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	if(sides == null) {
		sides = 3;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(sides < 3) {
		throw haxe_Exception.thrown("Polygons require 3 sides as a minimum");
	}
	var polygon = echo_shape_Polygon._pool.get();
	var rot = Math.PI * 2 / sides;
	var angle;
	var verts = [];
	var _g = 0;
	while(_g < sides) {
		angle = _g++ * rot + (Math.PI - rot) * 0.5;
		verts.push(new hxmath_math_Vector2Default(Math.cos(angle) * radius,Math.sin(angle) * radius));
	}
	var x1 = x;
	var y1 = y;
	var rotation1 = rotation;
	var scale_x1 = scale_x;
	var scale_y1 = scale_y;
	if(scale_y == null) {
		scale_y1 = 1;
	}
	if(scale_x == null) {
		scale_x1 = 1;
	}
	if(rotation == null) {
		rotation1 = 0;
	}
	if(y == null) {
		y1 = 0;
	}
	if(x == null) {
		x1 = 0;
	}
	var _this = polygon.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_x = x1;
	var _this = polygon.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_y = y1;
	var _this = polygon.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_rotation = rotation1;
	var _this = polygon.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_x = scale_x1;
	var _this = polygon.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_y = scale_y1;
	var count = null;
	polygon.local_vertices = verts == null ? [] : verts;
	polygon.count = polygon.local_vertices.length;
	if(count > polygon.local_vertices.length) {
		var _g = polygon.local_vertices.length;
		while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
	}
	polygon.dirty_vertices = true;
	polygon.dirty_bounds = true;
	polygon.pooled = false;
	return polygon;
};
echo_shape_Polygon.__super__ = echo_Shape;
echo_shape_Polygon.prototype = $extend(echo_Shape.prototype,{
	put: function() {
		echo_Shape.prototype.put.call(this);
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Polygon._pool.put_unsafe(this);
		}
	}
	,bounds: function(aabb) {
		if(this.dirty_bounds) {
			this.dirty_bounds = false;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = this.local_vertices[i].x;
					var y = this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					target.x = self.x;
					target.y = self.y;
					var a = this._vertices[i];
					var self1 = this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(this._normals[i] == null) {
						this._normals[i] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					} else {
						var y = this.sync_pos.x;
						var self2 = this._normals[i];
						self2.x = -this.sync_pos.y;
						self2.y = y;
					}
					var self3 = this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var left = this._vertices[0].x;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = this.local_vertices[i].x;
					var y = this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					target.x = self.x;
					target.y = self.y;
					var a = this._vertices[i];
					var self1 = this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(this._normals[i] == null) {
						this._normals[i] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					} else {
						var y = this.sync_pos.x;
						var self2 = this._normals[i];
						self2.x = -this.sync_pos.y;
						self2.y = y;
					}
					var self3 = this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var top = this._vertices[0].y;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = this.local_vertices[i].x;
					var y = this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					target.x = self.x;
					target.y = self.y;
					var a = this._vertices[i];
					var self1 = this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(this._normals[i] == null) {
						this._normals[i] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					} else {
						var y = this.sync_pos.x;
						var self2 = this._normals[i];
						self2.x = -this.sync_pos.y;
						self2.y = y;
					}
					var self3 = this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var right = this._vertices[0].x;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = this.local_vertices[i].x;
					var y = this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					target.x = self.x;
					target.y = self.y;
					var a = this._vertices[i];
					var self1 = this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(this._normals[i] == null) {
						this._normals[i] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					} else {
						var y = this.sync_pos.x;
						var self2 = this._normals[i];
						self2.x = -this.sync_pos.y;
						self2.y = y;
					}
					var self3 = this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var bottom = this._vertices[0].y;
			var _g = 1;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g2 = 0;
					var _g3 = this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(this.local_vertices[i1] == null) {
							continue;
						}
						if(this._vertices[i1] == null) {
							this._vertices[i1] = new hxmath_math_Vector2Default(0,0);
						}
						var x = this.local_vertices[i1].x;
						var y = this.local_vertices[i1].y;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var a = this.transform.get_local_to_world_matrix();
						var v_x = x;
						var v_y = y;
						var v_z = 1;
						var self = this._vertices[i1];
						self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
						self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
					}
					var _g4 = 0;
					var _g5 = this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = this.sync_pos;
						var self1 = this._vertices[(i2 + 1) % this.count];
						target.x = self1.x;
						target.y = self1.y;
						var a1 = this._vertices[i2];
						var self2 = this.sync_pos;
						self2.x -= a1.x;
						self2.y -= a1.y;
						if(this._normals[i2] == null) {
							this._normals[i2] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						} else {
							var y1 = this.sync_pos.x;
							var self3 = this._normals[i2];
							self3.x = -this.sync_pos.y;
							self3.y = y1;
						}
						var self4 = this._normals[i2];
						var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
						if(length > 0.0) {
							self4.x /= length;
							self4.y /= length;
						}
					}
				}
				if(this._vertices[i].x < left) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g6 = 0;
						var _g7 = this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(this.local_vertices[i3] == null) {
								continue;
							}
							if(this._vertices[i3] == null) {
								this._vertices[i3] = new hxmath_math_Vector2Default(0,0);
							}
							var x1 = this.local_vertices[i3].x;
							var y2 = this.local_vertices[i3].y;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var a2 = this.transform.get_local_to_world_matrix();
							var v_x1 = x1;
							var v_y1 = y2;
							var v_z1 = 1;
							var self5 = this._vertices[i3];
							self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
							self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
						}
						var _g8 = 0;
						var _g9 = this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = this.sync_pos;
							var self6 = this._vertices[(i4 + 1) % this.count];
							target1.x = self6.x;
							target1.y = self6.y;
							var a3 = this._vertices[i4];
							var self7 = this.sync_pos;
							self7.x -= a3.x;
							self7.y -= a3.y;
							if(this._normals[i4] == null) {
								this._normals[i4] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							} else {
								var y3 = this.sync_pos.x;
								var self8 = this._normals[i4];
								self8.x = -this.sync_pos.y;
								self8.y = y3;
							}
							var self9 = this._normals[i4];
							var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
							if(length1 > 0.0) {
								self9.x /= length1;
								self9.y /= length1;
							}
						}
					}
					left = this._vertices[i].x;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g10 = 0;
					var _g11 = this.count;
					while(_g10 < _g11) {
						var i5 = _g10++;
						if(this.local_vertices[i5] == null) {
							continue;
						}
						if(this._vertices[i5] == null) {
							this._vertices[i5] = new hxmath_math_Vector2Default(0,0);
						}
						var x2 = this.local_vertices[i5].x;
						var y4 = this.local_vertices[i5].y;
						if(y4 == null) {
							y4 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var a4 = this.transform.get_local_to_world_matrix();
						var v_x2 = x2;
						var v_y2 = y4;
						var v_z2 = 1;
						var self10 = this._vertices[i5];
						self10.x = a4.m00 * v_x2 + a4.m10 * v_y2 + a4.m20 * v_z2;
						self10.y = a4.m01 * v_x2 + a4.m11 * v_y2 + a4.m21 * v_z2;
					}
					var _g12 = 0;
					var _g13 = this.count;
					while(_g12 < _g13) {
						var i6 = _g12++;
						var target2 = this.sync_pos;
						var self11 = this._vertices[(i6 + 1) % this.count];
						target2.x = self11.x;
						target2.y = self11.y;
						var a5 = this._vertices[i6];
						var self12 = this.sync_pos;
						self12.x -= a5.x;
						self12.y -= a5.y;
						if(this._normals[i6] == null) {
							this._normals[i6] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						} else {
							var y5 = this.sync_pos.x;
							var self13 = this._normals[i6];
							self13.x = -this.sync_pos.y;
							self13.y = y5;
						}
						var self14 = this._normals[i6];
						var length2 = Math.sqrt(self14.x * self14.x + self14.y * self14.y);
						if(length2 > 0.0) {
							self14.x /= length2;
							self14.y /= length2;
						}
					}
				}
				if(this._vertices[i].y < top) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g14 = 0;
						var _g15 = this.count;
						while(_g14 < _g15) {
							var i7 = _g14++;
							if(this.local_vertices[i7] == null) {
								continue;
							}
							if(this._vertices[i7] == null) {
								this._vertices[i7] = new hxmath_math_Vector2Default(0,0);
							}
							var x3 = this.local_vertices[i7].x;
							var y6 = this.local_vertices[i7].y;
							if(y6 == null) {
								y6 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var a6 = this.transform.get_local_to_world_matrix();
							var v_x3 = x3;
							var v_y3 = y6;
							var v_z3 = 1;
							var self15 = this._vertices[i7];
							self15.x = a6.m00 * v_x3 + a6.m10 * v_y3 + a6.m20 * v_z3;
							self15.y = a6.m01 * v_x3 + a6.m11 * v_y3 + a6.m21 * v_z3;
						}
						var _g16 = 0;
						var _g17 = this.count;
						while(_g16 < _g17) {
							var i8 = _g16++;
							var target3 = this.sync_pos;
							var self16 = this._vertices[(i8 + 1) % this.count];
							target3.x = self16.x;
							target3.y = self16.y;
							var a7 = this._vertices[i8];
							var self17 = this.sync_pos;
							self17.x -= a7.x;
							self17.y -= a7.y;
							if(this._normals[i8] == null) {
								this._normals[i8] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							} else {
								var y7 = this.sync_pos.x;
								var self18 = this._normals[i8];
								self18.x = -this.sync_pos.y;
								self18.y = y7;
							}
							var self19 = this._normals[i8];
							var length3 = Math.sqrt(self19.x * self19.x + self19.y * self19.y);
							if(length3 > 0.0) {
								self19.x /= length3;
								self19.y /= length3;
							}
						}
					}
					top = this._vertices[i].y;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g18 = 0;
					var _g19 = this.count;
					while(_g18 < _g19) {
						var i9 = _g18++;
						if(this.local_vertices[i9] == null) {
							continue;
						}
						if(this._vertices[i9] == null) {
							this._vertices[i9] = new hxmath_math_Vector2Default(0,0);
						}
						var x4 = this.local_vertices[i9].x;
						var y8 = this.local_vertices[i9].y;
						if(y8 == null) {
							y8 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var a8 = this.transform.get_local_to_world_matrix();
						var v_x4 = x4;
						var v_y4 = y8;
						var v_z4 = 1;
						var self20 = this._vertices[i9];
						self20.x = a8.m00 * v_x4 + a8.m10 * v_y4 + a8.m20 * v_z4;
						self20.y = a8.m01 * v_x4 + a8.m11 * v_y4 + a8.m21 * v_z4;
					}
					var _g20 = 0;
					var _g21 = this.count;
					while(_g20 < _g21) {
						var i10 = _g20++;
						var target4 = this.sync_pos;
						var self21 = this._vertices[(i10 + 1) % this.count];
						target4.x = self21.x;
						target4.y = self21.y;
						var a9 = this._vertices[i10];
						var self22 = this.sync_pos;
						self22.x -= a9.x;
						self22.y -= a9.y;
						if(this._normals[i10] == null) {
							this._normals[i10] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						} else {
							var y9 = this.sync_pos.x;
							var self23 = this._normals[i10];
							self23.x = -this.sync_pos.y;
							self23.y = y9;
						}
						var self24 = this._normals[i10];
						var length4 = Math.sqrt(self24.x * self24.x + self24.y * self24.y);
						if(length4 > 0.0) {
							self24.x /= length4;
							self24.y /= length4;
						}
					}
				}
				if(this._vertices[i].x > right) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g22 = 0;
						var _g23 = this.count;
						while(_g22 < _g23) {
							var i11 = _g22++;
							if(this.local_vertices[i11] == null) {
								continue;
							}
							if(this._vertices[i11] == null) {
								this._vertices[i11] = new hxmath_math_Vector2Default(0,0);
							}
							var x5 = this.local_vertices[i11].x;
							var y10 = this.local_vertices[i11].y;
							if(y10 == null) {
								y10 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var a10 = this.transform.get_local_to_world_matrix();
							var v_x5 = x5;
							var v_y5 = y10;
							var v_z5 = 1;
							var self25 = this._vertices[i11];
							self25.x = a10.m00 * v_x5 + a10.m10 * v_y5 + a10.m20 * v_z5;
							self25.y = a10.m01 * v_x5 + a10.m11 * v_y5 + a10.m21 * v_z5;
						}
						var _g24 = 0;
						var _g25 = this.count;
						while(_g24 < _g25) {
							var i12 = _g24++;
							var target5 = this.sync_pos;
							var self26 = this._vertices[(i12 + 1) % this.count];
							target5.x = self26.x;
							target5.y = self26.y;
							var a11 = this._vertices[i12];
							var self27 = this.sync_pos;
							self27.x -= a11.x;
							self27.y -= a11.y;
							if(this._normals[i12] == null) {
								this._normals[i12] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							} else {
								var y11 = this.sync_pos.x;
								var self28 = this._normals[i12];
								self28.x = -this.sync_pos.y;
								self28.y = y11;
							}
							var self29 = this._normals[i12];
							var length5 = Math.sqrt(self29.x * self29.x + self29.y * self29.y);
							if(length5 > 0.0) {
								self29.x /= length5;
								self29.y /= length5;
							}
						}
					}
					right = this._vertices[i].x;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g26 = 0;
					var _g27 = this.count;
					while(_g26 < _g27) {
						var i13 = _g26++;
						if(this.local_vertices[i13] == null) {
							continue;
						}
						if(this._vertices[i13] == null) {
							this._vertices[i13] = new hxmath_math_Vector2Default(0,0);
						}
						var x6 = this.local_vertices[i13].x;
						var y12 = this.local_vertices[i13].y;
						if(y12 == null) {
							y12 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var a12 = this.transform.get_local_to_world_matrix();
						var v_x6 = x6;
						var v_y6 = y12;
						var v_z6 = 1;
						var self30 = this._vertices[i13];
						self30.x = a12.m00 * v_x6 + a12.m10 * v_y6 + a12.m20 * v_z6;
						self30.y = a12.m01 * v_x6 + a12.m11 * v_y6 + a12.m21 * v_z6;
					}
					var _g28 = 0;
					var _g29 = this.count;
					while(_g28 < _g29) {
						var i14 = _g28++;
						var target6 = this.sync_pos;
						var self31 = this._vertices[(i14 + 1) % this.count];
						target6.x = self31.x;
						target6.y = self31.y;
						var a13 = this._vertices[i14];
						var self32 = this.sync_pos;
						self32.x -= a13.x;
						self32.y -= a13.y;
						if(this._normals[i14] == null) {
							this._normals[i14] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						} else {
							var y13 = this.sync_pos.x;
							var self33 = this._normals[i14];
							self33.x = -this.sync_pos.y;
							self33.y = y13;
						}
						var self34 = this._normals[i14];
						var length6 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
						if(length6 > 0.0) {
							self34.x /= length6;
							self34.y /= length6;
						}
					}
				}
				if(this._vertices[i].y > bottom) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g30 = 0;
						var _g31 = this.count;
						while(_g30 < _g31) {
							var i15 = _g30++;
							if(this.local_vertices[i15] == null) {
								continue;
							}
							if(this._vertices[i15] == null) {
								this._vertices[i15] = new hxmath_math_Vector2Default(0,0);
							}
							var x7 = this.local_vertices[i15].x;
							var y14 = this.local_vertices[i15].y;
							if(y14 == null) {
								y14 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var a14 = this.transform.get_local_to_world_matrix();
							var v_x7 = x7;
							var v_y7 = y14;
							var v_z7 = 1;
							var self35 = this._vertices[i15];
							self35.x = a14.m00 * v_x7 + a14.m10 * v_y7 + a14.m20 * v_z7;
							self35.y = a14.m01 * v_x7 + a14.m11 * v_y7 + a14.m21 * v_z7;
						}
						var _g32 = 0;
						var _g33 = this.count;
						while(_g32 < _g33) {
							var i16 = _g32++;
							var target7 = this.sync_pos;
							var self36 = this._vertices[(i16 + 1) % this.count];
							target7.x = self36.x;
							target7.y = self36.y;
							var a15 = this._vertices[i16];
							var self37 = this.sync_pos;
							self37.x -= a15.x;
							self37.y -= a15.y;
							if(this._normals[i16] == null) {
								this._normals[i16] = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							} else {
								var y15 = this.sync_pos.x;
								var self38 = this._normals[i16];
								self38.x = -this.sync_pos.y;
								self38.y = y15;
							}
							var self39 = this._normals[i16];
							var length7 = Math.sqrt(self39.x * self39.x + self39.y * self39.y);
							if(length7 > 0.0) {
								self39.x /= length7;
								self39.y /= length7;
							}
						}
					}
					bottom = this._vertices[i].y;
				}
			}
			var _this = this._bounds;
			_this.min_x = left;
			_this.max_x = right;
			_this.min_y = top;
			_this.max_y = bottom;
		}
		if(aabb == null) {
			var _this = this._bounds;
			var min_x = _this.min_x;
			var min_y = _this.min_y;
			var max_x = _this.max_x;
			var max_y = _this.max_y;
			var aabb1 = echo_util_AABB._pool.get();
			aabb1.min_x = min_x;
			aabb1.max_x = max_x;
			aabb1.min_y = min_y;
			aabb1.max_y = max_y;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var aabb1 = this._bounds;
			aabb.min_x = aabb1.min_x;
			aabb.max_x = aabb1.max_x;
			aabb.min_y = aabb1.min_y;
			aabb.max_y = aabb1.max_y;
			return aabb;
		}
	}
	,intersect: function(l) {
		return echo_util_SAT.line_intersects_polygon(l,this);
	}
	,collides: function(s) {
		return s.collide_polygon(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_polygon(r,this,true);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.circle_and_polygon(c,this);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.polygon_and_polygon(p,this,true);
	}
	,on_dirty: function(t) {
		this.dirty_vertices = true;
		this.dirty_bounds = true;
	}
});
var echo_shape_Rect = function() {
	echo_Shape.call(this);
	this.ex = 0;
	if(this.transformed_rect != null) {
		var _this = this.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = _this.local_vertices[0];
		self.x = -this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[1];
		self.x = this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[2];
		self.x = this.ex;
		self.y = this.ey;
		var self = _this.local_vertices[3];
		self.x = -this.ex;
		self.y = this.ey;
		var v = this.transform.local_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_x = v;
		var v = this.transform.local_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_y = v;
		var v = this.transform.local_rotation;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_rotation = v;
		var v = this.transform.local_scale_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_x = v;
		var v = this.transform.local_scale_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_y = v;
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
	}
	this.ey = 0;
	if(this.transformed_rect != null) {
		var _this = this.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = _this.local_vertices[0];
		self.x = -this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[1];
		self.x = this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[2];
		self.x = this.ex;
		self.y = this.ey;
		var self = _this.local_vertices[3];
		self.x = -this.ex;
		self.y = this.ey;
		var v = this.transform.local_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_x = v;
		var v = this.transform.local_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_y = v;
		var v = this.transform.local_rotation;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_rotation = v;
		var v = this.transform.local_scale_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_x = v;
		var v = this.transform.local_scale_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_y = v;
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
	}
	this.type = 0;
	this.transform.on_dirty = $bind(this,this.on_dirty);
};
echo_shape_Rect.__name__ = true;
echo_shape_Rect.get = function(x,y,width,height,rotation,scale_x,scale_y) {
	if(scale_y == null) {
		scale_y = 1;
	}
	if(scale_x == null) {
		scale_x = 1;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var rect = echo_shape_Rect._pool.get();
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height1 = height;
	var rotation1 = rotation;
	var scale_x1 = scale_x;
	var scale_y1 = scale_y;
	if(scale_y == null) {
		scale_y1 = 1;
	}
	if(scale_x == null) {
		scale_x1 = 1;
	}
	if(rotation == null) {
		rotation1 = 0;
	}
	if(height == null) {
		height1 = 0;
	}
	if(width == null) {
		width1 = 1;
	}
	if(y == null) {
		y1 = 0;
	}
	if(x == null) {
		x1 = 0;
	}
	var _this = rect.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_x = x1;
	var _this = rect.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_y = y1;
	rect.ex = width1 * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		var v = rect.transform.local_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_x = v;
		var v = rect.transform.local_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_y = v;
		var v = rect.transform.local_rotation;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_rotation = v;
		var v = rect.transform.local_scale_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_x = v;
		var v = rect.transform.local_scale_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_y = v;
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
	}
	rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				_this.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		var v = rect.transform.local_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_x = v;
		var v = rect.transform.local_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_y = v;
		var v = rect.transform.local_rotation;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_rotation = v;
		var v = rect.transform.local_scale_x;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_x = v;
		var v = rect.transform.local_scale_y;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_scale_y = v;
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
	}
	var _this = rect.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_rotation = rotation1;
	var _this = rect.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_x = scale_x1;
	var _this = rect.transform;
	if(!_this.dirty) {
		_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = _this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(_this.on_dirty != null) {
			_this.on_dirty(_this);
		}
	}
	_this.local_scale_y = scale_y1;
	var tmp;
	if(rect.transformed_rect == null) {
		var _this = rect.transform;
		var tmp1;
		if(_this.parent == null) {
			tmp1 = _this.local_rotation;
		} else {
			_this.sync();
			tmp1 = _this._rotation;
		}
		tmp = tmp1 != 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		var polygon = echo_shape_Polygon._pool.get();
		polygon.count = 4;
		var _g = 0;
		var _g1 = polygon.count;
		while(_g < _g1) {
			var i = _g++;
			if(polygon.local_vertices[i] == null) {
				polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = polygon.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = polygon.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = polygon.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = polygon.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		var v = rect.transform.local_x;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = v;
		var v = rect.transform.local_y;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = v;
		var v = rect.transform.local_rotation;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = v;
		var v = rect.transform.local_scale_x;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = v;
		var v = rect.transform.local_scale_y;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = v;
		polygon.dirty_vertices = true;
		polygon.dirty_bounds = true;
		polygon.pooled = false;
		rect.transformed_rect = polygon;
		rect.transformed_rect.set_parent(rect.parent);
	} else if(rect.transformed_rect != null) {
		var v = rect.transform.local_x;
		var _this = rect.transformed_rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = v;
		var v = rect.transform.local_y;
		var _this = rect.transformed_rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = v;
		var v = rect.transform.local_rotation;
		var _this = rect.transformed_rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = v;
		var v = rect.transform.local_scale_x;
		var _this = rect.transformed_rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = v;
		var v = rect.transform.local_scale_y;
		var _this = rect.transformed_rect.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = v;
	}
	rect.pooled = false;
	return rect;
};
echo_shape_Rect.__super__ = echo_Shape;
echo_shape_Rect.prototype = $extend(echo_Shape.prototype,{
	put: function() {
		echo_Shape.prototype.put.call(this);
		if(this.transformed_rect != null) {
			this.transformed_rect.put();
			this.transformed_rect = null;
		}
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Rect._pool.put_unsafe(this);
		}
	}
	,to_aabb: function(put_self) {
		if(put_self == null) {
			put_self = false;
		}
		if(put_self) {
			var aabb;
			var aabb1;
			if(this.transformed_rect != null) {
				var _this = this.transform;
				var aabb2;
				if(_this.parent == null) {
					aabb2 = _this.local_rotation;
				} else {
					_this.sync();
					aabb2 = _this._rotation;
				}
				aabb1 = aabb2 != 0;
			} else {
				aabb1 = false;
			}
			if(aabb1) {
				aabb = this.transformed_rect.bounds(null);
			} else {
				var _this = this.transform;
				var x;
				if(_this.parent == null) {
					x = _this.local_x;
				} else {
					_this.sync();
					x = _this._x;
				}
				var _this = this.transform;
				var y;
				if(_this.parent == null) {
					y = _this.local_y;
				} else {
					_this.sync();
					y = _this._y;
				}
				var width = this.ex * 2;
				var _this = this.transform;
				var width1;
				if(_this.parent == null) {
					width1 = _this.local_scale_x;
				} else {
					_this.sync();
					width1 = _this._scale_x;
				}
				var width2 = width * width1;
				var height = this.ey * 2;
				var _this = this.transform;
				var height1;
				if(_this.parent == null) {
					height1 = _this.local_scale_y;
				} else {
					_this.sync();
					height1 = _this._scale_y;
				}
				var height2 = height * height1;
				if(height2 == null) {
					height2 = 1;
				}
				if(width2 == null) {
					width2 = 1;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var aabb1 = echo_util_AABB._pool.get();
				var x1 = x;
				var y1 = y;
				var width = width2;
				var height = height2;
				if(height == null) {
					height = 1;
				}
				if(width == null) {
					width = 1;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				width *= 0.5;
				height *= 0.5;
				aabb1.min_x = x1 - width;
				aabb1.min_y = y1 - height;
				aabb1.max_x = x1 + width;
				aabb1.max_y = y1 + height;
				aabb1.pooled = false;
				aabb = aabb1;
			}
			this.put();
			return aabb;
		}
		var tmp;
		if(this.transformed_rect != null) {
			var _this = this.transform;
			var tmp1;
			if(_this.parent == null) {
				tmp1 = _this.local_rotation;
			} else {
				_this.sync();
				tmp1 = _this._rotation;
			}
			tmp = tmp1 != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.transformed_rect.bounds(null);
		} else {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			var width = this.ex * 2;
			var _this = this.transform;
			var width1;
			if(_this.parent == null) {
				width1 = _this.local_scale_x;
			} else {
				_this.sync();
				width1 = _this._scale_x;
			}
			var width2 = width * width1;
			var height = this.ey * 2;
			var _this = this.transform;
			var height1;
			if(_this.parent == null) {
				height1 = _this.local_scale_y;
			} else {
				_this.sync();
				height1 = _this._scale_y;
			}
			var height2 = height * height1;
			if(height2 == null) {
				height2 = 1;
			}
			if(width2 == null) {
				width2 = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width = width2;
			var height = height2;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x1 - width;
			aabb.min_y = y1 - height;
			aabb.max_x = x1 + width;
			aabb.max_y = y1 + height;
			aabb.pooled = false;
			return aabb;
		}
	}
	,bounds: function(aabb) {
		var tmp;
		if(this.transformed_rect != null) {
			var _this = this.transform;
			var tmp1;
			if(_this.parent == null) {
				tmp1 = _this.local_rotation;
			} else {
				_this.sync();
				tmp1 = _this._rotation;
			}
			tmp = tmp1 != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.transformed_rect.bounds(aabb);
		}
		if(aabb == null) {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			var width = this.ex * 2;
			var _this = this.transform;
			var width1;
			if(_this.parent == null) {
				width1 = _this.local_scale_x;
			} else {
				_this.sync();
				width1 = _this._scale_x;
			}
			var width2 = width * width1;
			var height = this.ey * 2;
			var _this = this.transform;
			var height1;
			if(_this.parent == null) {
				height1 = _this.local_scale_y;
			} else {
				_this.sync();
				height1 = _this._scale_y;
			}
			var height2 = height * height1;
			if(height2 == null) {
				height2 = 1;
			}
			if(width2 == null) {
				width2 = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width = width2;
			var height = height2;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb1.min_x = x1 - width;
			aabb1.min_y = y1 - height;
			aabb1.max_x = x1 + width;
			aabb1.max_y = y1 + height;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var _this = this.transform;
			var x;
			if(_this.parent == null) {
				x = _this.local_x;
			} else {
				_this.sync();
				x = _this._x;
			}
			var _this = this.transform;
			var y;
			if(_this.parent == null) {
				y = _this.local_y;
			} else {
				_this.sync();
				y = _this._y;
			}
			var width = this.ex * 2;
			var _this = this.transform;
			var width1;
			if(_this.parent == null) {
				width1 = _this.local_scale_x;
			} else {
				_this.sync();
				width1 = _this._scale_x;
			}
			var width2 = width * width1;
			var height = this.ey * 2;
			var _this = this.transform;
			var height1;
			if(_this.parent == null) {
				height1 = _this.local_scale_y;
			} else {
				_this.sync();
				height1 = _this._scale_y;
			}
			var height2 = height * height1;
			if(height2 == null) {
				height2 = 1;
			}
			if(width2 == null) {
				width2 = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width2 *= 0.5;
			height2 *= 0.5;
			aabb.min_x = x - width2;
			aabb.min_y = y - height2;
			aabb.max_x = x + width2;
			aabb.max_y = y + height2;
			return aabb;
		}
	}
	,intersect: function(l) {
		return echo_util_SAT.line_intersects_rect(l,this);
	}
	,collides: function(s) {
		return s.collide_rect(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_rect(r,this);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.rect_and_circle(this,c);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.rect_and_polygon(this,p);
	}
	,set_parent: function(body) {
		echo_Shape.prototype.set_parent.call(this,body);
		var tmp;
		if(this.transformed_rect == null) {
			var _this = this.transform;
			var tmp1;
			if(_this.parent == null) {
				tmp1 = _this.local_rotation;
			} else {
				_this.sync();
				tmp1 = _this._rotation;
			}
			tmp = tmp1 != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = polygon.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			var v = this.transform.local_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = this.transform.local_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = this.transform.local_rotation;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = this.transform.local_scale_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = this.transform.local_scale_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			this.transformed_rect = polygon;
			this.transformed_rect.set_parent(this.parent);
		} else if(this.transformed_rect != null) {
			var v = this.transform.local_x;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = this.transform.local_y;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = this.transform.local_rotation;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = this.transform.local_scale_x;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = this.transform.local_scale_y;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
		}
		if(this.transformed_rect != null) {
			this.transformed_rect.set_parent(body);
		}
	}
	,on_dirty: function(t) {
		var tmp;
		if(this.transformed_rect == null) {
			var _this = this.transform;
			var tmp1;
			if(_this.parent == null) {
				tmp1 = _this.local_rotation;
			} else {
				_this.sync();
				tmp1 = _this._rotation;
			}
			tmp = tmp1 != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = polygon.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			var v = this.transform.local_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = this.transform.local_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = this.transform.local_rotation;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = this.transform.local_scale_x;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = this.transform.local_scale_y;
			var _this = polygon.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.pooled = false;
			this.transformed_rect = polygon;
			this.transformed_rect.set_parent(this.parent);
		} else if(this.transformed_rect != null) {
			var v = this.transform.local_x;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = v;
			var v = this.transform.local_y;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = v;
			var v = this.transform.local_rotation;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_rotation = v;
			var v = this.transform.local_scale_x;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_x = v;
			var v = this.transform.local_scale_y;
			var _this = this.transformed_rect.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_scale_y = v;
		}
	}
});
var echo_util_AABB = function() {
	this.min_x = 0;
	this.max_x = 1;
	this.min_y = 0;
	this.max_y = 1;
};
echo_util_AABB.__name__ = true;
echo_util_AABB.prototype = {
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_util_AABB._pool.put_unsafe(this);
		}
	}
};
var echo_util_BitMask = {};
echo_util_BitMask.to_int = function(this1) {
	return 1 << this1;
};
echo_util_BitMask._new = function() {
	return 0;
};
var echo_util_History_$Array_$echo_$data_$BodyState = function(len) {
	this.re = new echo_util_Ring_$Array_$echo_$data_$BodyState(len);
	this.un = new echo_util_Ring_$Array_$echo_$data_$BodyState(len);
};
echo_util_History_$Array_$echo_$data_$BodyState.__name__ = true;
echo_util_History_$Array_$echo_$data_$BodyState.prototype = {
	redo: function() {
		var r = this.re.pop();
		if(r != null) {
			this.un.push(r);
		}
		return r;
	}
	,undo: function() {
		var u = this.un.pop();
		if(u != null) {
			this.re.push(u);
		}
		return u;
	}
	,add: function(v) {
		this.un.push(v);
		this.re.reset();
	}
};
var echo_util_JSON = function() { };
echo_util_JSON.__name__ = true;
echo_util_JSON.copy_fields = function(from,into) {
	if(from == null) {
		return into;
	}
	if(into == null) {
		into = Reflect.copy(from);
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			into[f] = Reflect.field(from,f);
		}
	}
	return into;
};
var echo_util_QuadTree = function(aabb,depth) {
	if(depth == null) {
		depth = 0;
	}
	this.nodes_list = [];
	this.max_contents = 10;
	this.max_depth = 5;
	echo_util_AABB.call(this);
	if(aabb != null) {
		this.min_x = aabb.min_x;
		this.max_x = aabb.max_x;
		this.min_y = aabb.min_y;
		this.max_y = aabb.max_y;
	}
	this.depth = depth;
	this.children = new Array(4);
	this.contents = [];
	this.contents_count = 0;
};
echo_util_QuadTree.__name__ = true;
echo_util_QuadTree.__super__ = echo_util_AABB;
echo_util_QuadTree.prototype = $extend(echo_util_AABB.prototype,{
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.children[i] != null) {
					this.children[i].clear_children();
					var _this = this.children[i];
					if(!_this.pooled) {
						_this.pooled = true;
						_this.clear_children();
						_this.contents.length = 0;
						_this.contents_count = 0;
						_this.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this);
					}
					this.children[i] = null;
				}
			}
			this.contents.length = 0;
			this.contents_count = 0;
			this.nodes_list.length = 0;
			echo_util_QuadTree._pool.put_unsafe(this);
		}
	}
	,insert: function(data) {
		if(data.bounds == null) {
			return;
		}
		var _this = data.bounds;
		if(!(_this.min_x < this.max_x && _this.max_x >= this.min_x && _this.min_y < this.max_y && _this.max_y >= this.min_y)) {
			return;
		}
		if(this.children[0] == null && this.contents_count + 1 > this.max_contents) {
			this.split();
		}
		if(this.children[0] == null) {
			var index = this.get_first_null(this.contents);
			if(index == -1) {
				this.contents.push(data);
			} else {
				this.contents[index] = data;
			}
			this.contents_count++;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) _g1[_g++].insert(data);
		}
	}
	,remove: function(data,allow_shake) {
		if(allow_shake == null) {
			allow_shake = true;
		}
		if(this.children[0] == null) {
			var i = 0;
			while(i < this.contents.length) {
				if(this.contents[i] != null && this.contents[i].id == data.id) {
					this.contents[i] = null;
					this.contents_count--;
					return true;
				}
				++i;
			}
			return false;
		}
		var removed = false;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child != null && child.remove(data)) {
				removed = true;
			}
		}
		if(allow_shake && removed) {
			this.shake();
		}
		return removed;
	}
	,update: function(data,allow_shake) {
		if(allow_shake == null) {
			allow_shake = true;
		}
		this.remove(data,allow_shake);
		this.insert(data);
	}
	,query: function(aabb,result) {
		if(!(this.min_x < aabb.max_x && this.max_x >= aabb.min_x && this.min_y < aabb.max_y && this.max_y >= aabb.min_y)) {
			return;
		}
		if(this.children[0] == null) {
			var _g = 0;
			var _g1 = this.contents;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				var tmp;
				if(data != null) {
					var _this = data.bounds;
					tmp = _this.min_x < aabb.max_x && _this.max_x >= aabb.min_x && _this.min_y < aabb.max_y && _this.max_y >= aabb.min_y;
				} else {
					tmp = false;
				}
				if(tmp) {
					result.push(data);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) _g1[_g++].query(aabb,result);
		}
	}
	,shake: function() {
		if(this.children[0] == null) {
			return false;
		}
		var len = this.get_count();
		if(len == 0) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.children[i] != null) {
					var _this = this.children[i];
					var _g2 = 0;
					var _g3 = _this.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.children[i1] != null) {
							_this.children[i1].clear_children();
							var _this1 = _this.children[i1];
							if(!_this1.pooled) {
								_this1.pooled = true;
								_this1.clear_children();
								_this1.contents.length = 0;
								_this1.contents_count = 0;
								_this1.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(_this1);
							}
							_this.children[i1] = null;
						}
					}
					var _this2 = this.children[i];
					if(!_this2.pooled) {
						_this2.pooled = true;
						var _g4 = 0;
						var _g5 = _this2.children.length;
						while(_g4 < _g5) {
							var i2 = _g4++;
							if(_this2.children[i2] != null) {
								_this2.children[i2].clear_children();
								var _this3 = _this2.children[i2];
								if(!_this3.pooled) {
									_this3.pooled = true;
									_this3.clear_children();
									_this3.contents.length = 0;
									_this3.contents_count = 0;
									_this3.nodes_list.length = 0;
									echo_util_QuadTree._pool.put_unsafe(_this3);
								}
								_this2.children[i2] = null;
							}
						}
						_this2.contents.length = 0;
						_this2.contents_count = 0;
						_this2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this2);
					}
					this.children[i] = null;
				}
			}
		} else if(len < this.max_contents) {
			this.nodes_list.length = 0;
			this.nodes_list.push(this);
			while(this.nodes_list.length > 0) {
				var node = this.nodes_list.shift();
				if(node != this && node.children[0] == null) {
					var _g = 0;
					var _g1 = node.contents;
					while(_g < _g1.length) {
						var data = _g1[_g];
						++_g;
						if(this.contents.indexOf(data) == -1) {
							var index = this.get_first_null(this.contents);
							if(index == -1) {
								this.contents.push(data);
							} else {
								this.contents[index] = data;
							}
							this.contents_count++;
						}
					}
				} else {
					var _g2 = 0;
					var _g3 = node.children;
					while(_g2 < _g3.length) this.nodes_list.push(_g3[_g2++]);
				}
			}
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.children[i] != null) {
					var _this = this.children[i];
					var _g2 = 0;
					var _g3 = _this.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.children[i1] != null) {
							_this.children[i1].clear_children();
							var _this1 = _this.children[i1];
							if(!_this1.pooled) {
								_this1.pooled = true;
								_this1.clear_children();
								_this1.contents.length = 0;
								_this1.contents_count = 0;
								_this1.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(_this1);
							}
							_this.children[i1] = null;
						}
					}
					var _this2 = this.children[i];
					if(!_this2.pooled) {
						_this2.pooled = true;
						var _g4 = 0;
						var _g5 = _this2.children.length;
						while(_g4 < _g5) {
							var i2 = _g4++;
							if(_this2.children[i2] != null) {
								_this2.children[i2].clear_children();
								var _this3 = _this2.children[i2];
								if(!_this3.pooled) {
									_this3.pooled = true;
									_this3.clear_children();
									_this3.contents.length = 0;
									_this3.contents_count = 0;
									_this3.nodes_list.length = 0;
									echo_util_QuadTree._pool.put_unsafe(_this3);
								}
								_this2.children[i2] = null;
							}
						}
						_this2.contents.length = 0;
						_this2.contents_count = 0;
						_this2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this2);
					}
					this.children[i] = null;
				}
			}
			return true;
		}
		return false;
	}
	,split: function() {
		if(this.depth + 1 >= this.max_depth) {
			return;
		}
		var xw = (this.max_x - this.min_x) * 0.5;
		var xh = (this.max_y - this.min_y) * 0.5;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var qt = echo_util_QuadTree._pool.get();
			var x = 0;
			var y = 0;
			qt.min_x = x - 0.5;
			qt.min_y = y - 0.5;
			qt.max_x = x + 0.5;
			qt.max_y = y + 0.5;
			var _g1 = 0;
			var _g2 = qt.children.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				if(qt.children[i1] != null) {
					qt.children[i1].clear_children();
					var _this = qt.children[i1];
					if(!_this.pooled) {
						_this.pooled = true;
						_this.clear_children();
						_this.contents.length = 0;
						_this.contents_count = 0;
						_this.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this);
					}
					qt.children[i1] = null;
				}
			}
			qt.contents.length = 0;
			qt.contents_count = 0;
			qt.pooled = false;
			switch(i) {
			case 0:
				var max_x = this.min_x + xw;
				var max_y = this.min_y + xh;
				qt.min_x = this.min_x;
				qt.max_x = max_x;
				qt.min_y = this.min_y;
				qt.max_y = max_y;
				break;
			case 1:
				var max_y1 = this.min_y + xh;
				qt.min_x = this.min_x + xw;
				qt.max_x = this.max_x;
				qt.min_y = this.min_y;
				qt.max_y = max_y1;
				break;
			case 2:
				var max_x1 = this.min_x + xw;
				qt.min_x = this.min_x;
				qt.max_x = max_x1;
				qt.min_y = this.min_y + xh;
				qt.max_y = this.max_y;
				break;
			case 3:
				qt.min_x = this.min_x + xw;
				qt.max_x = this.max_x;
				qt.min_y = this.min_y + xh;
				qt.max_y = this.max_y;
				break;
			}
			qt.depth = this.depth + 1;
			var value = this.max_depth;
			var _g3 = 0;
			var _g4 = qt.children.length;
			while(_g3 < _g4) {
				var i2 = _g3++;
				if(qt.children[i2] != null) {
					var _this1 = qt.children[i2];
					var _g5 = 0;
					var _g6 = _this1.children.length;
					while(_g5 < _g6) {
						var i3 = _g5++;
						if(_this1.children[i3] != null) {
							_this1.children[i3].set_max_depth(value);
						}
					}
					_this1.max_depth = value;
				}
			}
			qt.max_depth = value;
			var value1 = this.max_contents;
			var _g7 = 0;
			var _g8 = qt.children.length;
			while(_g7 < _g8) {
				var i4 = _g7++;
				if(qt.children[i4] != null) {
					var _this2 = qt.children[i4];
					var _g9 = 0;
					var _g10 = _this2.children.length;
					while(_g9 < _g10) {
						var i5 = _g9++;
						if(_this2.children[i5] != null) {
							var _this3 = _this2.children[i5];
							var _g11 = 0;
							var _g12 = _this3.children.length;
							while(_g11 < _g12) {
								var i6 = _g11++;
								if(_this3.children[i6] != null) {
									_this3.children[i6].set_max_depth(value1);
								}
							}
							_this3.max_depth = value1;
						}
					}
					_this2.max_depth = value1;
				}
			}
			qt.max_contents = value1;
			qt.shake();
			var _g13 = 0;
			var _g14 = this.contents.length;
			while(_g13 < _g14) {
				var j = _g13++;
				if(this.contents[j] != null) {
					qt.insert(this.contents[j]);
				}
			}
			this.children[i] = qt;
		}
		this.contents.length = 0;
		this.contents_count = 0;
	}
	,clear_children: function() {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] != null) {
				this.children[i].clear_children();
				var _this = this.children[i];
				if(!_this.pooled) {
					_this.pooled = true;
					_this.clear_children();
					_this.contents.length = 0;
					_this.contents_count = 0;
					_this.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this);
				}
				this.children[i] = null;
			}
		}
	}
	,reset_data_flags: function() {
		var _g = 0;
		var _g1 = this.contents.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.contents[i] != null) {
				this.contents[i].flag = false;
			}
		}
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] != null) {
				this.children[i].reset_data_flags();
			}
		}
	}
	,get_count: function() {
		this.reset_data_flags();
		var num = 0;
		var _g = 0;
		var _g1 = this.contents.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.contents[i] != null) {
				this.contents[i].flag = true;
				++num;
			}
		}
		this.nodes_list.length = 0;
		this.nodes_list.push(this);
		while(this.nodes_list.length > 0) {
			var node = this.nodes_list.shift();
			if(node.children[0] == null) {
				var _g = 0;
				var _g1 = node.contents.length;
				while(_g < _g1) {
					var i = _g++;
					if(node.contents[i] != null && !node.contents[i].flag) {
						++num;
						node.contents[i].flag = true;
					}
				}
			} else {
				var _g2 = 0;
				var _g3 = node.children.length;
				while(_g2 < _g3) this.nodes_list.push(node.children[_g2++]);
			}
		}
		return num;
	}
	,get_first_null: function(arr) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			if(arr[i] == null) {
				return i;
			}
		}
		return -1;
	}
	,set_max_depth: function(value) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] != null) {
				this.children[i].set_max_depth(value);
			}
		}
		return this.max_depth = value;
	}
	,__properties__: {get_count:"get_count",set_max_depth:"set_max_depth"}
});
var echo_util_Ring_$Array_$echo_$data_$BodyState = function(len) {
	this.a = new Array(len);
	this.reset();
};
echo_util_Ring_$Array_$echo_$data_$BodyState.__name__ = true;
echo_util_Ring_$Array_$echo_$data_$BodyState.prototype = {
	pop: function() {
		if(this.i + this.left - this.start <= 0) {
			return null;
		}
		if(this.i == 0) {
			this.i = this.a.length;
			this.left = 0;
		}
		return this.a[--this.i];
	}
	,push: function(v) {
		if(this.i == this.a.length) {
			if(this.left > 0 && this.start == this.i) {
				this.start = 0;
			}
			this.i = 0;
			this.left = this.a.length;
		}
		if(this.i + this.left - this.start == this.a.length) {
			this.start++;
		}
		this.a[this.i++] = v;
	}
	,reset: function() {
		this.i = 0;
		this.start = 0;
		this.left = 0;
	}
};
var echo_util_SAT = function() { };
echo_util_SAT.__name__ = true;
echo_util_SAT.line_intersects_rect = function(l,r) {
	var tmp;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var tmp1;
		if(_this.parent == null) {
			tmp1 = _this.local_rotation;
		} else {
			_this.sync();
			tmp1 = _this._rotation;
		}
		tmp = tmp1 != 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		return r.transformed_rect.intersect(l);
	}
	var closest = null;
	var left;
	var left1;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var left2;
		if(_this.parent == null) {
			left2 = _this.local_rotation;
		} else {
			_this.sync();
			left2 = _this._rotation;
		}
		left1 = left2 == 0;
	} else {
		left1 = true;
	}
	if(left1) {
		var _this = r.transform;
		var left1;
		if(_this.parent == null) {
			left1 = _this.local_x;
		} else {
			_this.sync();
			left1 = _this._x;
		}
		var r1 = r.ex;
		var _this = r.transform;
		var left2;
		if(_this.parent == null) {
			left2 = _this.local_scale_x;
		} else {
			_this.sync();
			left2 = _this._scale_x;
		}
		left = left1 - r1 * left2;
	} else {
		var _this = r.transformed_rect;
		var left1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			left1 = _this._vertices[0] == null;
		} else {
			left1 = true;
		}
		if(left1) {
			var _this1 = _this.transform;
			if(_this1.parent == null) {
				left = _this1.local_x;
			} else {
				_this1.sync();
				left = _this1._x;
			}
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var left1 = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							_this._vertices[i1] = new hxmath_math_Vector2Default(0,0);
						}
						var x = _this.local_vertices[i1].x;
						var y = _this.local_vertices[i1].y;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var a = _this.transform.get_local_to_world_matrix();
						var v_x = x;
						var v_y = y;
						var v_z = 1;
						var self = _this._vertices[i1];
						self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
						self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self1 = _this._vertices[(i2 + 1) % _this.count];
						target.x = self1.x;
						target.y = self1.y;
						var a1 = _this._vertices[i2];
						var self2 = _this.sync_pos;
						self2.x -= a1.x;
						self2.y -= a1.y;
						if(_this._normals[i2] == null) {
							_this._normals[i2] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						} else {
							var y1 = _this.sync_pos.x;
							var self3 = _this._normals[i2];
							self3.x = -_this.sync_pos.y;
							self3.y = y1;
						}
						var self4 = _this._normals[i2];
						var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
						if(length > 0.0) {
							self4.x /= length;
							self4.y /= length;
						}
					}
				}
				if(_this._vertices[i].x < left1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								_this._vertices[i3] = new hxmath_math_Vector2Default(0,0);
							}
							var x1 = _this.local_vertices[i3].x;
							var y2 = _this.local_vertices[i3].y;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var a2 = _this.transform.get_local_to_world_matrix();
							var v_x1 = x1;
							var v_y1 = y2;
							var v_z1 = 1;
							var self5 = _this._vertices[i3];
							self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
							self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self6 = _this._vertices[(i4 + 1) % _this.count];
							target1.x = self6.x;
							target1.y = self6.y;
							var a3 = _this._vertices[i4];
							var self7 = _this.sync_pos;
							self7.x -= a3.x;
							self7.y -= a3.y;
							if(_this._normals[i4] == null) {
								_this._normals[i4] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							} else {
								var y3 = _this.sync_pos.x;
								var self8 = _this._normals[i4];
								self8.x = -_this.sync_pos.y;
								self8.y = y3;
							}
							var self9 = _this._normals[i4];
							var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
							if(length1 > 0.0) {
								self9.x /= length1;
								self9.y /= length1;
							}
						}
					}
					left1 = _this._vertices[i].x;
				}
			}
			left = left1;
		}
	}
	var right;
	var right1;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var right2;
		if(_this.parent == null) {
			right2 = _this.local_rotation;
		} else {
			_this.sync();
			right2 = _this._rotation;
		}
		right1 = right2 == 0;
	} else {
		right1 = true;
	}
	if(right1) {
		var _this = r.transform;
		var right1;
		if(_this.parent == null) {
			right1 = _this.local_x;
		} else {
			_this.sync();
			right1 = _this._x;
		}
		var r1 = r.ex;
		var _this = r.transform;
		var right2;
		if(_this.parent == null) {
			right2 = _this.local_scale_x;
		} else {
			_this.sync();
			right2 = _this._scale_x;
		}
		right = right1 + r1 * right2;
	} else {
		var _this = r.transformed_rect;
		var right1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			right1 = _this._vertices[0] == null;
		} else {
			right1 = true;
		}
		if(right1) {
			var _this1 = _this.transform;
			if(_this1.parent == null) {
				right = _this1.local_x;
			} else {
				_this1.sync();
				right = _this1._x;
			}
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var right1 = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							_this._vertices[i1] = new hxmath_math_Vector2Default(0,0);
						}
						var x = _this.local_vertices[i1].x;
						var y = _this.local_vertices[i1].y;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var a = _this.transform.get_local_to_world_matrix();
						var v_x = x;
						var v_y = y;
						var v_z = 1;
						var self = _this._vertices[i1];
						self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
						self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self1 = _this._vertices[(i2 + 1) % _this.count];
						target.x = self1.x;
						target.y = self1.y;
						var a1 = _this._vertices[i2];
						var self2 = _this.sync_pos;
						self2.x -= a1.x;
						self2.y -= a1.y;
						if(_this._normals[i2] == null) {
							_this._normals[i2] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						} else {
							var y1 = _this.sync_pos.x;
							var self3 = _this._normals[i2];
							self3.x = -_this.sync_pos.y;
							self3.y = y1;
						}
						var self4 = _this._normals[i2];
						var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
						if(length > 0.0) {
							self4.x /= length;
							self4.y /= length;
						}
					}
				}
				if(_this._vertices[i].x > right1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								_this._vertices[i3] = new hxmath_math_Vector2Default(0,0);
							}
							var x1 = _this.local_vertices[i3].x;
							var y2 = _this.local_vertices[i3].y;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var a2 = _this.transform.get_local_to_world_matrix();
							var v_x1 = x1;
							var v_y1 = y2;
							var v_z1 = 1;
							var self5 = _this._vertices[i3];
							self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
							self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self6 = _this._vertices[(i4 + 1) % _this.count];
							target1.x = self6.x;
							target1.y = self6.y;
							var a3 = _this._vertices[i4];
							var self7 = _this.sync_pos;
							self7.x -= a3.x;
							self7.y -= a3.y;
							if(_this._normals[i4] == null) {
								_this._normals[i4] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							} else {
								var y3 = _this.sync_pos.x;
								var self8 = _this._normals[i4];
								self8.x = -_this.sync_pos.y;
								self8.y = y3;
							}
							var self9 = _this._normals[i4];
							var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
							if(length1 > 0.0) {
								self9.x /= length1;
								self9.y /= length1;
							}
						}
					}
					right1 = _this._vertices[i].x;
				}
			}
			right = right1;
		}
	}
	var top;
	var top1;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var top2;
		if(_this.parent == null) {
			top2 = _this.local_rotation;
		} else {
			_this.sync();
			top2 = _this._rotation;
		}
		top1 = top2 == 0;
	} else {
		top1 = true;
	}
	if(top1) {
		var _this = r.transform;
		var top1;
		if(_this.parent == null) {
			top1 = _this.local_y;
		} else {
			_this.sync();
			top1 = _this._y;
		}
		var r1 = r.ey;
		var _this = r.transform;
		var top2;
		if(_this.parent == null) {
			top2 = _this.local_scale_y;
		} else {
			_this.sync();
			top2 = _this._scale_y;
		}
		top = top1 - r1 * top2;
	} else {
		var _this = r.transformed_rect;
		var top1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			top1 = _this._vertices[0] == null;
		} else {
			top1 = true;
		}
		if(top1) {
			var _this1 = _this.transform;
			if(_this1.parent == null) {
				top = _this1.local_y;
			} else {
				_this1.sync();
				top = _this1._y;
			}
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var top1 = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							_this._vertices[i1] = new hxmath_math_Vector2Default(0,0);
						}
						var x = _this.local_vertices[i1].x;
						var y = _this.local_vertices[i1].y;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var a = _this.transform.get_local_to_world_matrix();
						var v_x = x;
						var v_y = y;
						var v_z = 1;
						var self = _this._vertices[i1];
						self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
						self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self1 = _this._vertices[(i2 + 1) % _this.count];
						target.x = self1.x;
						target.y = self1.y;
						var a1 = _this._vertices[i2];
						var self2 = _this.sync_pos;
						self2.x -= a1.x;
						self2.y -= a1.y;
						if(_this._normals[i2] == null) {
							_this._normals[i2] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						} else {
							var y1 = _this.sync_pos.x;
							var self3 = _this._normals[i2];
							self3.x = -_this.sync_pos.y;
							self3.y = y1;
						}
						var self4 = _this._normals[i2];
						var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
						if(length > 0.0) {
							self4.x /= length;
							self4.y /= length;
						}
					}
				}
				if(_this._vertices[i].y < top1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								_this._vertices[i3] = new hxmath_math_Vector2Default(0,0);
							}
							var x1 = _this.local_vertices[i3].x;
							var y2 = _this.local_vertices[i3].y;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var a2 = _this.transform.get_local_to_world_matrix();
							var v_x1 = x1;
							var v_y1 = y2;
							var v_z1 = 1;
							var self5 = _this._vertices[i3];
							self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
							self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self6 = _this._vertices[(i4 + 1) % _this.count];
							target1.x = self6.x;
							target1.y = self6.y;
							var a3 = _this._vertices[i4];
							var self7 = _this.sync_pos;
							self7.x -= a3.x;
							self7.y -= a3.y;
							if(_this._normals[i4] == null) {
								_this._normals[i4] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							} else {
								var y3 = _this.sync_pos.x;
								var self8 = _this._normals[i4];
								self8.x = -_this.sync_pos.y;
								self8.y = y3;
							}
							var self9 = _this._normals[i4];
							var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
							if(length1 > 0.0) {
								self9.x /= length1;
								self9.y /= length1;
							}
						}
					}
					top1 = _this._vertices[i].y;
				}
			}
			top = top1;
		}
	}
	var bottom;
	var bottom1;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var bottom2;
		if(_this.parent == null) {
			bottom2 = _this.local_rotation;
		} else {
			_this.sync();
			bottom2 = _this._rotation;
		}
		bottom1 = bottom2 == 0;
	} else {
		bottom1 = true;
	}
	if(bottom1) {
		var _this = r.transform;
		var bottom1;
		if(_this.parent == null) {
			bottom1 = _this.local_y;
		} else {
			_this.sync();
			bottom1 = _this._y;
		}
		var r1 = r.ey;
		var _this = r.transform;
		var bottom2;
		if(_this.parent == null) {
			bottom2 = _this.local_scale_y;
		} else {
			_this.sync();
			bottom2 = _this._scale_y;
		}
		bottom = bottom1 + r1 * bottom2;
	} else {
		var _this = r.transformed_rect;
		var bottom1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			bottom1 = _this._vertices[0] == null;
		} else {
			bottom1 = true;
		}
		if(bottom1) {
			var _this1 = _this.transform;
			if(_this1.parent == null) {
				bottom = _this1.local_y;
			} else {
				_this1.sync();
				bottom = _this1._y;
			}
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						_this._vertices[i] = new hxmath_math_Vector2Default(0,0);
					}
					var x = _this.local_vertices[i].x;
					var y = _this.local_vertices[i].y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var a = _this.transform.get_local_to_world_matrix();
					var v_x = x;
					var v_y = y;
					var v_z = 1;
					var self = _this._vertices[i];
					self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
					self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					target.x = self.x;
					target.y = self.y;
					var a = _this._vertices[i];
					var self1 = _this.sync_pos;
					self1.x -= a.x;
					self1.y -= a.y;
					if(_this._normals[i] == null) {
						_this._normals[i] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					} else {
						var y = _this.sync_pos.x;
						var self2 = _this._normals[i];
						self2.x = -_this.sync_pos.y;
						self2.y = y;
					}
					var self3 = _this._normals[i];
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						self3.x /= length;
						self3.y /= length;
					}
				}
			}
			var bottom1 = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							_this._vertices[i1] = new hxmath_math_Vector2Default(0,0);
						}
						var x = _this.local_vertices[i1].x;
						var y = _this.local_vertices[i1].y;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var a = _this.transform.get_local_to_world_matrix();
						var v_x = x;
						var v_y = y;
						var v_z = 1;
						var self = _this._vertices[i1];
						self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
						self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self1 = _this._vertices[(i2 + 1) % _this.count];
						target.x = self1.x;
						target.y = self1.y;
						var a1 = _this._vertices[i2];
						var self2 = _this.sync_pos;
						self2.x -= a1.x;
						self2.y -= a1.y;
						if(_this._normals[i2] == null) {
							_this._normals[i2] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						} else {
							var y1 = _this.sync_pos.x;
							var self3 = _this._normals[i2];
							self3.x = -_this.sync_pos.y;
							self3.y = y1;
						}
						var self4 = _this._normals[i2];
						var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
						if(length > 0.0) {
							self4.x /= length;
							self4.y /= length;
						}
					}
				}
				if(_this._vertices[i].y > bottom1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								_this._vertices[i3] = new hxmath_math_Vector2Default(0,0);
							}
							var x1 = _this.local_vertices[i3].x;
							var y2 = _this.local_vertices[i3].y;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var a2 = _this.transform.get_local_to_world_matrix();
							var v_x1 = x1;
							var v_y1 = y2;
							var v_z1 = 1;
							var self5 = _this._vertices[i3];
							self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
							self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self6 = _this._vertices[(i4 + 1) % _this.count];
							target1.x = self6.x;
							target1.y = self6.y;
							var a3 = _this._vertices[i4];
							var self7 = _this.sync_pos;
							self7.x -= a3.x;
							self7.y -= a3.y;
							if(_this._normals[i4] == null) {
								_this._normals[i4] = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							} else {
								var y3 = _this.sync_pos.x;
								var self8 = _this._normals[i4];
								self8.x = -_this.sync_pos.y;
								self8.y = y3;
							}
							var self9 = _this._normals[i4];
							var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
							if(length1 > 0.0) {
								self9.x /= length1;
								self9.y /= length1;
							}
						}
					}
					bottom1 = _this._vertices[i].y;
				}
			}
			bottom = bottom1;
		}
	}
	var x = left;
	var y = top;
	var dx = right;
	var dy = top;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	var d = (line.get_dy() - line.get_y()) * (l.get_dx() - l.get_x()) - (line.get_dx() - line.get_x()) * (l.get_dy() - l.get_y());
	var result;
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line.get_dx() - line.get_x()) * (l.get_y() - line.get_y()) - (line.get_dy() - line.get_y()) * (l.get_x() - line.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var a = l.start;
			var a1 = l.end;
			var b = l.start;
			var x = a1.x;
			var y = a1.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var x = self_x;
			var y = self_y;
			var b_x = x;
			var b_y = y;
			b_x = x * ua;
			b_y = y * ua;
			var x = a.x;
			var y = a.y;
			var hit_x = x;
			var hit_y = y;
			hit_x = x + b_x;
			hit_y = y + b_y;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - hit_x;
			self_y = y - hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var inverse = d >= 0;
			var b = line.end;
			var self = line.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (inverse ? -1 : 1);
			var x = (line.get_dy() - line.get_y()) / l2l;
			var y = -(line.get_dx() - line.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var inverse_normal = inverse;
			if(inverse == null) {
				inverse_normal = false;
			}
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.line2 = null;
			var inverse_normal1 = inverse_normal;
			if(inverse_normal1 == null) {
				inverse_normal1 = false;
			}
			i.distance = distance;
			i.overlap = overlap;
			i.inverse_normal = inverse_normal1;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			i.line = l;
			i.line2 = line;
			result = i;
		}
	}
	if(result != null) {
		closest = result;
	}
	var x = right;
	var y = top;
	var dx = right;
	var dy = bottom;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	var d = (line.get_dy() - line.get_y()) * (l.get_dx() - l.get_x()) - (line.get_dx() - line.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line.get_dx() - line.get_x()) * (l.get_y() - line.get_y()) - (line.get_dy() - line.get_y()) * (l.get_x() - line.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var a = l.start;
			var a1 = l.end;
			var b = l.start;
			var x = a1.x;
			var y = a1.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var x = self_x;
			var y = self_y;
			var b_x = x;
			var b_y = y;
			b_x = x * ua;
			b_y = y * ua;
			var x = a.x;
			var y = a.y;
			var hit_x = x;
			var hit_y = y;
			hit_x = x + b_x;
			hit_y = y + b_y;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - hit_x;
			self_y = y - hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var inverse = d >= 0;
			var b = line.end;
			var self = line.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (inverse ? -1 : 1);
			var x = (line.get_dy() - line.get_y()) / l2l;
			var y = -(line.get_dx() - line.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var inverse_normal = inverse;
			if(inverse == null) {
				inverse_normal = false;
			}
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.line2 = null;
			var inverse_normal1 = inverse_normal;
			if(inverse_normal1 == null) {
				inverse_normal1 = false;
			}
			i.distance = distance;
			i.overlap = overlap;
			i.inverse_normal = inverse_normal1;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			i.line = l;
			i.line2 = line;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	var x = right;
	var y = bottom;
	var dx = left;
	var dy = bottom;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	var d = (line.get_dy() - line.get_y()) * (l.get_dx() - l.get_x()) - (line.get_dx() - line.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line.get_dx() - line.get_x()) * (l.get_y() - line.get_y()) - (line.get_dy() - line.get_y()) * (l.get_x() - line.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var a = l.start;
			var a1 = l.end;
			var b = l.start;
			var x = a1.x;
			var y = a1.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var x = self_x;
			var y = self_y;
			var b_x = x;
			var b_y = y;
			b_x = x * ua;
			b_y = y * ua;
			var x = a.x;
			var y = a.y;
			var hit_x = x;
			var hit_y = y;
			hit_x = x + b_x;
			hit_y = y + b_y;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - hit_x;
			self_y = y - hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var inverse = d >= 0;
			var b = line.end;
			var self = line.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (inverse ? -1 : 1);
			var x = (line.get_dy() - line.get_y()) / l2l;
			var y = -(line.get_dx() - line.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var inverse_normal = inverse;
			if(inverse == null) {
				inverse_normal = false;
			}
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.line2 = null;
			var inverse_normal1 = inverse_normal;
			if(inverse_normal1 == null) {
				inverse_normal1 = false;
			}
			i.distance = distance;
			i.overlap = overlap;
			i.inverse_normal = inverse_normal1;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			i.line = l;
			i.line2 = line;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	var x = left;
	var y = bottom;
	var dx = left;
	var dy = top;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	var d = (line.get_dy() - line.get_y()) * (l.get_dx() - l.get_x()) - (line.get_dx() - line.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line.get_dx() - line.get_x()) * (l.get_y() - line.get_y()) - (line.get_dy() - line.get_y()) * (l.get_x() - line.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var a = l.start;
			var a1 = l.end;
			var b = l.start;
			var x = a1.x;
			var y = a1.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var x = self_x;
			var y = self_y;
			var b_x = x;
			var b_y = y;
			b_x = x * ua;
			b_y = y * ua;
			var x = a.x;
			var y = a.y;
			var hit_x = x;
			var hit_y = y;
			hit_x = x + b_x;
			hit_y = y + b_y;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - hit_x;
			self_y = y - hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var inverse = d >= 0;
			var b = line.end;
			var self = line.start;
			var x = self.x;
			var y = self.y;
			var self_x = x;
			var self_y = y;
			self_x = x - b.x;
			self_y = y - b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (inverse ? -1 : 1);
			var x = (line.get_dy() - line.get_y()) / l2l;
			var y = -(line.get_dx() - line.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var inverse_normal = inverse;
			if(inverse == null) {
				inverse_normal = false;
			}
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.line2 = null;
			var inverse_normal1 = inverse_normal;
			if(inverse_normal1 == null) {
				inverse_normal1 = false;
			}
			i.distance = distance;
			i.overlap = overlap;
			i.inverse_normal = inverse_normal1;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			i.line = l;
			i.line2 = line;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	if(closest != null) {
		closest.line = l;
		closest.shape = r;
	}
	return closest;
};
echo_util_SAT.line_intersects_circle = function(l,c) {
	var a = l.end;
	var b = l.start;
	var x = a.x;
	var y = a.y;
	var d_x = x;
	var d_y = y;
	d_x = x - b.x;
	d_y = y - b.y;
	var a = l.start;
	var _this = c.transform;
	_this.sync();
	var x = a.x;
	var y = a.y;
	var f_x = x;
	var f_y = y;
	f_x = x - _this._x;
	f_y = y - _this._y;
	var c1 = c.local_radius;
	var _this = c.transform;
	var r;
	if(_this.parent == null) {
		r = _this.local_scale_x;
	} else {
		_this.sync();
		r = _this._scale_x;
	}
	var r1 = c1 * r;
	var a = d_x * d_x + d_y * d_y;
	var b = 2 * (f_x * d_x + f_y * d_y);
	var discriminant = b * b - 4 * a * (f_x * f_x + f_y * f_y - r1 * r1);
	if(discriminant < 0) {
		return null;
	}
	discriminant = Math.sqrt(discriminant);
	var t1 = (-b - discriminant) / (2 * a);
	var t2 = (-b + discriminant) / (2 * a);
	if(t1 >= 0 && t1 <= 1) {
		var a = l.start;
		var a1 = l.end;
		var b = l.start;
		var x = a1.x;
		var y = a1.y;
		var self_x = x;
		var self_y = y;
		self_x = x - b.x;
		self_y = y - b.y;
		var x = self_x;
		var y = self_y;
		var b_x = x;
		var b_y = y;
		b_x = x * t1;
		b_y = y * t1;
		var x = a.x;
		var y = a.y;
		var hit_x = x;
		var hit_y = y;
		hit_x = x + b_x;
		hit_y = y + b_y;
		var self = l.start;
		var x = self.x;
		var y = self.y;
		var self_x = x;
		var self_y = y;
		self_x = x - hit_x;
		self_y = y - hit_y;
		var distance = Math.sqrt(self_x * self_x + self_y * self_y);
		var b = l.end;
		var self = l.start;
		var x = self.x;
		var y = self.y;
		var self_x = x;
		var self_y = y;
		self_x = x - b.x;
		self_y = y - b.y;
		var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
		var _this = c.transform;
		var x;
		if(_this.parent == null) {
			x = _this.local_x;
		} else {
			_this.sync();
			x = _this._x;
		}
		var _this = c.transform;
		var y;
		if(_this.parent == null) {
			y = _this.local_y;
		} else {
			_this.sync();
			y = _this._y;
		}
		var self = echo_util_SAT.norm;
		self.x = hit_x - x;
		self.y = hit_y - y;
		var self1 = self;
		self1.x /= r1;
		self1.y /= r1;
		var normal_x = echo_util_SAT.norm.x;
		var normal_y = echo_util_SAT.norm.y;
		var i = echo_data_IntersectionData._pool.get();
		i.line = null;
		i.shape = null;
		i.line2 = null;
		i.distance = distance;
		i.overlap = overlap;
		i.inverse_normal = false;
		var self = i.hit;
		self.x = hit_x;
		self.y = hit_y;
		var self = i.normal;
		self.x = normal_x;
		self.y = normal_y;
		i.pooled = false;
		i.line = l;
		i.shape = c;
		return i;
	}
	if(t2 >= 0 && t2 <= 1) {
		var a = l.start;
		var a1 = l.end;
		var b = l.start;
		var x = a1.x;
		var y = a1.y;
		var self_x = x;
		var self_y = y;
		self_x = x - b.x;
		self_y = y - b.y;
		var x = self_x;
		var y = self_y;
		var b_x = x;
		var b_y = y;
		b_x = x * t2;
		b_y = y * t2;
		var x = a.x;
		var y = a.y;
		var hit_x = x;
		var hit_y = y;
		hit_x = x + b_x;
		hit_y = y + b_y;
		var self = l.start;
		var x = self.x;
		var y = self.y;
		var self_x = x;
		var self_y = y;
		self_x = x - hit_x;
		self_y = y - hit_y;
		var distance = Math.sqrt(self_x * self_x + self_y * self_y);
		var b = l.end;
		var self = l.start;
		var x = self.x;
		var y = self.y;
		var self_x = x;
		var self_y = y;
		self_x = x - b.x;
		self_y = y - b.y;
		var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
		var _this = c.transform;
		var x;
		if(_this.parent == null) {
			x = _this.local_x;
		} else {
			_this.sync();
			x = _this._x;
		}
		var _this = c.transform;
		var y;
		if(_this.parent == null) {
			y = _this.local_y;
		} else {
			_this.sync();
			y = _this._y;
		}
		var self = echo_util_SAT.norm;
		self.x = hit_x - x;
		self.y = hit_y - y;
		var self1 = self;
		self1.x = -self1.x;
		self1.y = -self1.y;
		var self = self1;
		self.x /= r1;
		self.y /= r1;
		var normal_x = echo_util_SAT.norm.x;
		var normal_y = echo_util_SAT.norm.y;
		var i = echo_data_IntersectionData._pool.get();
		i.line = null;
		i.shape = null;
		i.line2 = null;
		i.distance = distance;
		i.overlap = overlap;
		i.inverse_normal = true;
		var self = i.hit;
		self.x = hit_x;
		self.y = hit_y;
		var self = i.normal;
		self.x = normal_x;
		self.y = normal_y;
		i.pooled = false;
		i.line = l;
		i.shape = c;
		return i;
	}
	return null;
};
echo_util_SAT.line_intersects_polygon = function(l,p) {
	var closest = null;
	var line = echo_Line._pool.get();
	var self = line.start;
	self.x = 0;
	self.y = 0;
	var self = line.end;
	self.x = 1;
	self.y = 1;
	line.pooled = false;
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					p._vertices[i1] = new hxmath_math_Vector2Default(0,0);
				}
				var x = p.local_vertices[i1].x;
				var y = p.local_vertices[i1].y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var a = p.transform.get_local_to_world_matrix();
				var v_x = x;
				var v_y = y;
				var v_z = 1;
				var self = p._vertices[i1];
				self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
				self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self1 = p._vertices[(i2 + 1) % p.count];
				target.x = self1.x;
				target.y = self1.y;
				var a1 = p._vertices[i2];
				var self2 = p.sync_pos;
				self2.x -= a1.x;
				self2.y -= a1.y;
				if(p._normals[i2] == null) {
					p._normals[i2] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y1 = p.sync_pos.x;
					var self3 = p._normals[i2];
					self3.x = -p.sync_pos.y;
					self3.y = y1;
				}
				var self4 = p._normals[i2];
				var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
				if(length > 0.0) {
					self4.x /= length;
					self4.y /= length;
				}
			}
		}
		var start = p._vertices[i];
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g6 = 0;
			var _g7 = p.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(p.local_vertices[i3] == null) {
					continue;
				}
				if(p._vertices[i3] == null) {
					p._vertices[i3] = new hxmath_math_Vector2Default(0,0);
				}
				var x1 = p.local_vertices[i3].x;
				var y2 = p.local_vertices[i3].y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var a2 = p.transform.get_local_to_world_matrix();
				var v_x1 = x1;
				var v_y1 = y2;
				var v_z1 = 1;
				var self5 = p._vertices[i3];
				self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
				self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
			}
			var _g8 = 0;
			var _g9 = p.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = p.sync_pos;
				var self6 = p._vertices[(i4 + 1) % p.count];
				target1.x = self6.x;
				target1.y = self6.y;
				var a3 = p._vertices[i4];
				var self7 = p.sync_pos;
				self7.x -= a3.x;
				self7.y -= a3.y;
				if(p._normals[i4] == null) {
					p._normals[i4] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y3 = p.sync_pos.x;
					var self8 = p._normals[i4];
					self8.x = -p.sync_pos.y;
					self8.y = y3;
				}
				var self9 = p._normals[i4];
				var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
				if(length1 > 0.0) {
					self9.x /= length1;
					self9.y /= length1;
				}
			}
		}
		var end = p._vertices[(i + 1) % p.count];
		var x2 = start.x;
		var y4 = start.y;
		var dx = end.x;
		var dy = end.y;
		if(dy == null) {
			dy = 1;
		}
		if(dx == null) {
			dx = 1;
		}
		if(y4 == null) {
			y4 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var self10 = line.start;
		self10.x = x2;
		self10.y = y4;
		var self11 = line.end;
		self11.x = dx;
		self11.y = dy;
		var d = (line.get_dy() - line.get_y()) * (l.get_dx() - l.get_x()) - (line.get_dx() - line.get_x()) * (l.get_dy() - l.get_y());
		var result;
		if(Math.abs(d) <= 0.00001) {
			result = null;
		} else {
			var ua = ((line.get_dx() - line.get_x()) * (l.get_y() - line.get_y()) - (line.get_dy() - line.get_y()) * (l.get_x() - line.get_x())) / d;
			var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line.get_x())) / d;
			if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
				result = null;
			} else {
				var a4 = l.start;
				var a5 = l.end;
				var b = l.start;
				var x3 = a5.x;
				var y5 = a5.y;
				var self_x = x3;
				var self_y = y5;
				self_x = x3 - b.x;
				self_y = y5 - b.y;
				var x4 = self_x;
				var y6 = self_y;
				var b_x = x4;
				var b_y = y6;
				b_x = x4 * ua;
				b_y = y6 * ua;
				var x5 = a4.x;
				var y7 = a4.y;
				var hit_x = x5;
				var hit_y = y7;
				hit_x = x5 + b_x;
				hit_y = y7 + b_y;
				var self12 = l.start;
				var x6 = self12.x;
				var y8 = self12.y;
				var self_x1 = x6;
				var self_y1 = y8;
				self_x1 = x6 - hit_x;
				self_y1 = y8 - hit_y;
				var distance = Math.sqrt(self_x1 * self_x1 + self_y1 * self_y1);
				var b1 = l.end;
				var self13 = l.start;
				var x7 = self13.x;
				var y9 = self13.y;
				var self_x2 = x7;
				var self_y2 = y9;
				self_x2 = x7 - b1.x;
				self_y2 = y9 - b1.y;
				var overlap = Math.sqrt(self_x2 * self_x2 + self_y2 * self_y2) - distance;
				var inverse = d >= 0;
				var b2 = line.end;
				var self14 = line.start;
				var x8 = self14.x;
				var y10 = self14.y;
				var self_x3 = x8;
				var self_y3 = y10;
				self_x3 = x8 - b2.x;
				self_y3 = y10 - b2.y;
				var l2l = Math.sqrt(self_x3 * self_x3 + self_y3 * self_y3) * (inverse ? -1 : 1);
				var x9 = (line.get_dy() - line.get_y()) / l2l;
				var y11 = -(line.get_dx() - line.get_x()) / l2l;
				var self15 = echo_util_SAT.norm;
				self15.x = x9;
				self15.y = y11;
				var normal_x = echo_util_SAT.norm.x;
				var normal_y = echo_util_SAT.norm.y;
				var inverse_normal = inverse;
				if(inverse == null) {
					inverse_normal = false;
				}
				var i5 = echo_data_IntersectionData._pool.get();
				i5.line = null;
				i5.shape = null;
				i5.line2 = null;
				var inverse_normal1 = inverse_normal;
				if(inverse_normal1 == null) {
					inverse_normal1 = false;
				}
				i5.distance = distance;
				i5.overlap = overlap;
				i5.inverse_normal = inverse_normal1;
				var self16 = i5.hit;
				self16.x = hit_x;
				self16.y = hit_y;
				var self17 = i5.normal;
				self17.x = normal_x;
				self17.y = normal_y;
				i5.pooled = false;
				i5.line = l;
				i5.line2 = line;
				result = i5;
			}
		}
		if(result != null && (closest == null || closest.distance > result.distance)) {
			closest = result;
		}
	}
	if(closest != null) {
		closest.line = l;
		closest.shape = p;
	}
	return closest;
};
echo_util_SAT.rect_and_rect = function(rect1,rect2,flip) {
	if(flip == null) {
		flip = false;
	}
	var col = null;
	var tmp;
	var _this = rect1.transform;
	var tmp1;
	if(_this.parent == null) {
		tmp1 = _this.local_rotation;
	} else {
		_this.sync();
		tmp1 = _this._rotation;
	}
	if(tmp1 == 0) {
		var _this = rect2.transform;
		var tmp1;
		if(_this.parent == null) {
			tmp1 = _this.local_rotation;
		} else {
			_this.sync();
			tmp1 = _this._rotation;
		}
		tmp = tmp1 != 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		if(rect1.transformed_rect != null) {
			col = echo_util_SAT.rect_and_polygon(rect2,rect1.transformed_rect,flip);
			if(col == null) {
				return null;
			}
			if(flip) {
				col.sa = rect1;
			} else {
				col.sb = rect1;
			}
			return col;
		}
		if(rect2.transformed_rect != null) {
			col = echo_util_SAT.rect_and_polygon(rect1,rect2.transformed_rect,!flip);
			if(col == null) {
				return null;
			}
			if(flip) {
				col.sa = rect2;
			} else {
				col.sb = rect2;
			}
			return col;
		}
	}
	var sa = flip ? rect2 : rect1;
	var sb = flip ? rect1 : rect2;
	var _this = sb.transform;
	var nx;
	if(_this.parent == null) {
		nx = _this.local_x;
	} else {
		_this.sync();
		nx = _this._x;
	}
	var _this = sa.transform;
	var nx1;
	if(_this.parent == null) {
		nx1 = _this.local_x;
	} else {
		_this.sync();
		nx1 = _this._x;
	}
	var nx2 = nx - nx1;
	var _this = sb.transform;
	var ny;
	if(_this.parent == null) {
		ny = _this.local_y;
	} else {
		_this.sync();
		ny = _this._y;
	}
	var _this = sa.transform;
	var ny1;
	if(_this.parent == null) {
		ny1 = _this.local_y;
	} else {
		_this.sync();
		ny1 = _this._y;
	}
	var ny2 = ny - ny1;
	var x_overlap = sa.ex + sb.ex - Math.abs(nx2);
	if(x_overlap > 0) {
		var y_overlap = sa.ey + sb.ey - Math.abs(ny2);
		if(y_overlap > 0) {
			if(x_overlap < y_overlap) {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = x_overlap;
				var self = c.normal;
				self.x = nx2 < 0 ? -1 : 1;
				self.y = 0;
				c.pooled = false;
				col = c;
			} else {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = y_overlap;
				var self = c.normal;
				self.x = 0;
				self.y = ny2 < 0 ? -1 : 1;
				c.pooled = false;
				col = c;
			}
			col.sa = sa;
			col.sb = sb;
		}
	}
	return col;
};
echo_util_SAT.circle_and_circle = function(circle1,circle2,flip) {
	if(flip == null) {
		flip = false;
	}
	var sa = flip ? circle2 : circle1;
	var sb = flip ? circle1 : circle2;
	var _this = sb.transform;
	var nx;
	if(_this.parent == null) {
		nx = _this.local_x;
	} else {
		_this.sync();
		nx = _this._x;
	}
	var _this = sa.transform;
	var nx1;
	if(_this.parent == null) {
		nx1 = _this.local_x;
	} else {
		_this.sync();
		nx1 = _this._x;
	}
	var nx2 = nx - nx1;
	var _this = sb.transform;
	var ny;
	if(_this.parent == null) {
		ny = _this.local_y;
	} else {
		_this.sync();
		ny = _this._y;
	}
	var _this = sa.transform;
	var ny1;
	if(_this.parent == null) {
		ny1 = _this.local_y;
	} else {
		_this.sync();
		ny1 = _this._y;
	}
	var ny2 = ny - ny1;
	var sa1 = sa.local_radius;
	var _this = sa.transform;
	var r;
	if(_this.parent == null) {
		r = _this.local_scale_x;
	} else {
		_this.sync();
		r = _this._scale_x;
	}
	var sb1 = sb.local_radius;
	var _this = sb.transform;
	var r1;
	if(_this.parent == null) {
		r1 = _this.local_scale_x;
	} else {
		_this.sync();
		r1 = _this._scale_x;
	}
	var r2 = sa1 * r + sb1 * r1;
	var d = nx2 * nx2 + ny2 * ny2;
	var col = null;
	if(d >= r2 * r2) {
		return col;
	} else if(Math.abs(d) <= 0.00001) {
		var sa1 = sa.local_radius;
		var _this = sa.transform;
		var overlap;
		if(_this.parent == null) {
			overlap = _this.local_scale_x;
		} else {
			_this.sync();
			overlap = _this._scale_x;
		}
		var c = echo_data_CollisionData._pool.get();
		c.sa = null;
		c.sb = null;
		c.overlap = sa1 * overlap;
		var self = c.normal;
		self.x = 1;
		self.y = 0;
		c.pooled = false;
		col = c;
	} else {
		d = Math.sqrt(d);
		nx2 /= d;
		ny2 /= d;
		var c = echo_data_CollisionData._pool.get();
		c.sa = null;
		c.sb = null;
		c.overlap = r2 - d;
		var self = c.normal;
		self.x = nx2;
		self.y = ny2;
		c.pooled = false;
		col = c;
	}
	col.sa = sa;
	col.sb = sb;
	return col;
};
echo_util_SAT.polygon_and_polygon = function(polygon1,polygon2,flip) {
	if(flip == null) {
		flip = false;
	}
	var data1 = echo_util_SAT.check_polygons(polygon1,polygon2,flip);
	if(data1 == null) {
		return null;
	}
	var data2 = echo_util_SAT.check_polygons(polygon2,polygon1,!flip);
	if(data2 == null) {
		return null;
	}
	if(data1.overlap < 0) {
		data1.overlap = Math.abs(data1.overlap);
	}
	if(data2.overlap < 0) {
		data2.overlap = Math.abs(data2.overlap);
	}
	if(data1.overlap < data2.overlap) {
		data2.put();
		return data1;
	}
	data1.put();
	return data2;
};
echo_util_SAT.rect_and_circle = function(r,c,flip) {
	if(flip == null) {
		flip = false;
	}
	var tmp;
	if(r.transformed_rect != null) {
		var _this = r.transform;
		var tmp1;
		if(_this.parent == null) {
			tmp1 = _this.local_rotation;
		} else {
			_this.sync();
			tmp1 = _this._rotation;
		}
		tmp = tmp1 != 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		var col = echo_util_SAT.circle_and_polygon(c,r.transformed_rect,flip);
		if(col == null) {
			return null;
		}
		if(flip) {
			col.sa = r;
		} else {
			col.sb = r;
		}
		return col;
	}
	var nx;
	if(flip) {
		var _this = c.transform;
		var nx1;
		if(_this.parent == null) {
			nx1 = _this.local_x;
		} else {
			_this.sync();
			nx1 = _this._x;
		}
		var _this = r.transform;
		var nx2;
		if(_this.parent == null) {
			nx2 = _this.local_x;
		} else {
			_this.sync();
			nx2 = _this._x;
		}
		nx = nx1 - nx2;
	} else {
		var _this = r.transform;
		var nx1;
		if(_this.parent == null) {
			nx1 = _this.local_x;
		} else {
			_this.sync();
			nx1 = _this._x;
		}
		var _this = c.transform;
		var nx2;
		if(_this.parent == null) {
			nx2 = _this.local_x;
		} else {
			_this.sync();
			nx2 = _this._x;
		}
		nx = nx1 - nx2;
	}
	var ny;
	if(flip) {
		var _this = c.transform;
		var ny1;
		if(_this.parent == null) {
			ny1 = _this.local_y;
		} else {
			_this.sync();
			ny1 = _this._y;
		}
		var _this = r.transform;
		var ny2;
		if(_this.parent == null) {
			ny2 = _this.local_y;
		} else {
			_this.sync();
			ny2 = _this._y;
		}
		ny = ny1 - ny2;
	} else {
		var _this = r.transform;
		var ny1;
		if(_this.parent == null) {
			ny1 = _this.local_y;
		} else {
			_this.sync();
			ny1 = _this._y;
		}
		var _this = c.transform;
		var ny2;
		if(_this.parent == null) {
			ny2 = _this.local_y;
		} else {
			_this.sync();
			ny2 = _this._y;
		}
		ny = ny1 - ny2;
	}
	var cx = nx;
	var cy = ny;
	var min = -r.ex;
	var max = r.ex;
	if(cx < min) {
		cx = min;
	} else if(cx > max) {
		cx = max;
	}
	var min = -r.ey;
	var max = r.ey;
	if(cy < min) {
		cy = min;
	} else if(cy > max) {
		cy = max;
	}
	var inside = false;
	var c1 = c.local_radius;
	var _this = c.transform;
	var rad;
	if(_this.parent == null) {
		rad = _this.local_scale_x;
	} else {
		_this.sync();
		rad = _this._scale_x;
	}
	var rad1 = c1 * rad;
	if(Math.abs(nx - cx) <= 0.00001 && Math.abs(ny - cy) <= 0.00001) {
		inside = true;
		if(Math.abs(nx) > Math.abs(ny)) {
			cx = cx > 0 ? r.ex + rad1 + 0.1 : -r.ex - rad1 - 0.1;
		} else {
			cy = cy > 0 ? r.ey + rad1 + 0.1 : -r.ey - rad1 - 0.1;
		}
	}
	nx -= cx;
	ny -= cy;
	var d = nx * nx + ny * ny;
	if(d > rad1 * rad1 && !inside) {
		return null;
	}
	d = Math.sqrt(d);
	nx /= d;
	ny /= d;
	if(inside) {
		nx *= -1;
		ny *= -1;
	}
	var overlap = Math.abs(rad1 - d);
	var c1 = echo_data_CollisionData._pool.get();
	c1.sa = null;
	c1.sb = null;
	c1.overlap = overlap;
	var self = c1.normal;
	self.x = nx;
	self.y = ny;
	c1.pooled = false;
	c1.sa = flip ? c : r;
	c1.sb = flip ? r : c;
	return c1;
};
echo_util_SAT.rect_and_polygon = function(r,p,flip) {
	if(flip == null) {
		flip = false;
	}
	var col = null;
	if(r.transformed_rect != null) {
		col = echo_util_SAT.polygon_and_polygon(r.transformed_rect,p,flip);
	} else {
		var polygon = echo_shape_Polygon._pool.get();
		polygon.count = 4;
		var _g = 0;
		var _g1 = polygon.count;
		while(_g < _g1) {
			var i = _g++;
			if(polygon.local_vertices[i] == null) {
				polygon.local_vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
		}
		var self = polygon.local_vertices[0];
		self.x = -r.ex;
		self.y = -r.ey;
		var self = polygon.local_vertices[1];
		self.x = r.ex;
		self.y = -r.ey;
		var self = polygon.local_vertices[2];
		self.x = r.ex;
		self.y = r.ey;
		var self = polygon.local_vertices[3];
		self.x = -r.ex;
		self.y = r.ey;
		var v = r.transform.local_x;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_x = v;
		var v = r.transform.local_y;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_y = v;
		var v = r.transform.local_rotation;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_rotation = v;
		var v = r.transform.local_scale_x;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_x = v;
		var v = r.transform.local_scale_y;
		var _this = polygon.transform;
		if(!_this.dirty) {
			_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g3 = child.children;
				while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this.on_dirty != null) {
				_this.on_dirty(_this);
			}
		}
		_this.local_scale_y = v;
		polygon.dirty_vertices = true;
		polygon.dirty_bounds = true;
		polygon.pooled = false;
		polygon.set_parent(r.parent);
		col = echo_util_SAT.polygon_and_polygon(polygon,p,flip);
		polygon.put();
	}
	if(col == null) {
		return null;
	}
	if(flip) {
		col.sb = r;
	} else {
		col.sa = r;
	}
	return col;
};
echo_util_SAT.circle_and_polygon = function(c,p,flip) {
	if(flip == null) {
		flip = false;
	}
	var distance = 0;
	var testDistance = 1073741823;
	var _this = c.transform;
	_this.sync();
	var x = _this._x;
	var y = _this._y;
	var c1 = c.local_radius;
	var _this = c.transform;
	var c_rad;
	if(_this.parent == null) {
		c_rad = _this.local_scale_x;
	} else {
		_this.sync();
		c_rad = _this._scale_x;
	}
	var c_rad1 = c1 * c_rad;
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					p._vertices[i1] = new hxmath_math_Vector2Default(0,0);
				}
				var x1 = p.local_vertices[i1].x;
				var y1 = p.local_vertices[i1].y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var a = p.transform.get_local_to_world_matrix();
				var v_x = x1;
				var v_y = y1;
				var v_z = 1;
				var self = p._vertices[i1];
				self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
				self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self1 = p._vertices[(i2 + 1) % p.count];
				target.x = self1.x;
				target.y = self1.y;
				var a1 = p._vertices[i2];
				var self2 = p.sync_pos;
				self2.x -= a1.x;
				self2.y -= a1.y;
				if(p._normals[i2] == null) {
					p._normals[i2] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y2 = p.sync_pos.x;
					var self3 = p._normals[i2];
					self3.x = -p.sync_pos.y;
					self3.y = y2;
				}
				var self4 = p._normals[i2];
				var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
				if(length > 0.0) {
					self4.x /= length;
					self4.y /= length;
				}
			}
		}
		var b = p._vertices[i];
		var self_x = x;
		var self_y = y;
		self_x = x - b.x;
		self_y = y - b.y;
		distance = self_x * self_x + self_y * self_y;
		if(distance < testDistance) {
			testDistance = distance;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g6 = 0;
				var _g7 = p.count;
				while(_g6 < _g7) {
					var i3 = _g6++;
					if(p.local_vertices[i3] == null) {
						continue;
					}
					if(p._vertices[i3] == null) {
						p._vertices[i3] = new hxmath_math_Vector2Default(0,0);
					}
					var x2 = p.local_vertices[i3].x;
					var y3 = p.local_vertices[i3].y;
					if(y3 == null) {
						y3 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var a2 = p.transform.get_local_to_world_matrix();
					var v_x1 = x2;
					var v_y1 = y3;
					var v_z1 = 1;
					var self5 = p._vertices[i3];
					self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
					self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
				}
				var _g8 = 0;
				var _g9 = p.count;
				while(_g8 < _g9) {
					var i4 = _g8++;
					var target1 = p.sync_pos;
					var self6 = p._vertices[(i4 + 1) % p.count];
					target1.x = self6.x;
					target1.y = self6.y;
					var a3 = p._vertices[i4];
					var self7 = p.sync_pos;
					self7.x -= a3.x;
					self7.y -= a3.y;
					if(p._normals[i4] == null) {
						p._normals[i4] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					} else {
						var y4 = p.sync_pos.x;
						var self8 = p._normals[i4];
						self8.x = -p.sync_pos.y;
						self8.y = y4;
					}
					var self9 = p._normals[i4];
					var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
					if(length1 > 0.0) {
						self9.x /= length1;
						self9.y /= length1;
					}
				}
			}
			var x3 = p._vertices[i].x;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g10 = 0;
				var _g11 = p.count;
				while(_g10 < _g11) {
					var i5 = _g10++;
					if(p.local_vertices[i5] == null) {
						continue;
					}
					if(p._vertices[i5] == null) {
						p._vertices[i5] = new hxmath_math_Vector2Default(0,0);
					}
					var x4 = p.local_vertices[i5].x;
					var y5 = p.local_vertices[i5].y;
					if(y5 == null) {
						y5 = 0;
					}
					if(x4 == null) {
						x4 = 0;
					}
					var a4 = p.transform.get_local_to_world_matrix();
					var v_x2 = x4;
					var v_y2 = y5;
					var v_z2 = 1;
					var self10 = p._vertices[i5];
					self10.x = a4.m00 * v_x2 + a4.m10 * v_y2 + a4.m20 * v_z2;
					self10.y = a4.m01 * v_x2 + a4.m11 * v_y2 + a4.m21 * v_z2;
				}
				var _g12 = 0;
				var _g13 = p.count;
				while(_g12 < _g13) {
					var i6 = _g12++;
					var target2 = p.sync_pos;
					var self11 = p._vertices[(i6 + 1) % p.count];
					target2.x = self11.x;
					target2.y = self11.y;
					var a5 = p._vertices[i6];
					var self12 = p.sync_pos;
					self12.x -= a5.x;
					self12.y -= a5.y;
					if(p._normals[i6] == null) {
						p._normals[i6] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					} else {
						var y6 = p.sync_pos.x;
						var self13 = p._normals[i6];
						self13.x = -p.sync_pos.y;
						self13.y = y6;
					}
					var self14 = p._normals[i6];
					var length2 = Math.sqrt(self14.x * self14.x + self14.y * self14.y);
					if(length2 > 0.0) {
						self14.x /= length2;
						self14.y /= length2;
					}
				}
			}
			var y7 = p._vertices[i].y;
			var self15 = echo_util_SAT.closest;
			self15.x = x3;
			self15.y = y7;
		}
	}
	var self = echo_util_SAT.closest;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	self1.x -= x;
	self1.y -= y;
	var self = self1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
	}
	var test = 0;
	if(p.dirty_vertices) {
		p.dirty_vertices = false;
		while(p._vertices.length > p.count) p._vertices.pop();
		var _g = 0;
		var _g1 = p.count;
		while(_g < _g1) {
			var i = _g++;
			if(p.local_vertices[i] == null) {
				continue;
			}
			if(p._vertices[i] == null) {
				p._vertices[i] = new hxmath_math_Vector2Default(0,0);
			}
			var x1 = p.local_vertices[i].x;
			var y1 = p.local_vertices[i].y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var a = p.transform.get_local_to_world_matrix();
			var v_x = x1;
			var v_y = y1;
			var v_z = 1;
			var self1 = p._vertices[i];
			self1.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
			self1.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
		}
		var _g = 0;
		var _g1 = p.count;
		while(_g < _g1) {
			var i = _g++;
			var target = p.sync_pos;
			var self1 = p._vertices[(i + 1) % p.count];
			target.x = self1.x;
			target.y = self1.y;
			var a = p._vertices[i];
			var self2 = p.sync_pos;
			self2.x -= a.x;
			self2.y -= a.y;
			if(p._normals[i] == null) {
				p._normals[i] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
			} else {
				var y1 = p.sync_pos.x;
				var self3 = p._normals[i];
				self3.x = -p.sync_pos.y;
				self3.y = y1;
			}
			var self4 = p._normals[i];
			var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
			if(length > 0.0) {
				self4.x /= length;
				self4.y /= length;
			}
		}
	}
	var b = p._vertices[0];
	var min1 = self.x * b.x + self.y * b.y;
	var max1 = min1;
	var _g = 1;
	var _g1 = p.count;
	while(_g < _g1) {
		var j = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i = _g2++;
				if(p.local_vertices[i] == null) {
					continue;
				}
				if(p._vertices[i] == null) {
					p._vertices[i] = new hxmath_math_Vector2Default(0,0);
				}
				var x1 = p.local_vertices[i].x;
				var y1 = p.local_vertices[i].y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var a = p.transform.get_local_to_world_matrix();
				var v_x = x1;
				var v_y = y1;
				var v_z = 1;
				var self1 = p._vertices[i];
				self1.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
				self1.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i1 = _g4++;
				var target = p.sync_pos;
				var self2 = p._vertices[(i1 + 1) % p.count];
				target.x = self2.x;
				target.y = self2.y;
				var a1 = p._vertices[i1];
				var self3 = p.sync_pos;
				self3.x -= a1.x;
				self3.y -= a1.y;
				if(p._normals[i1] == null) {
					p._normals[i1] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y2 = p.sync_pos.x;
					var self4 = p._normals[i1];
					self4.x = -p.sync_pos.y;
					self4.y = y2;
				}
				var self5 = p._normals[i1];
				var length = Math.sqrt(self5.x * self5.x + self5.y * self5.y);
				if(length > 0.0) {
					self5.x /= length;
					self5.y /= length;
				}
			}
		}
		var b = p._vertices[j];
		test = self.x * b.x + self.y * b.y;
		if(test < min1) {
			min1 = test;
		}
		if(test > max1) {
			max1 = test;
		}
	}
	var min2 = -c_rad1;
	var offset = self.x * -x + self.y * -y;
	min1 += offset;
	max1 += offset;
	var test1 = min1 - c_rad1;
	var test2 = min2 - max1;
	if(test1 > 0 || test2 > 0) {
		return null;
	}
	var distMin = -(c_rad1 - min1);
	if(flip) {
		distMin *= -1;
	}
	var x1 = self.x;
	var y1 = self.y;
	var c1 = echo_data_CollisionData._pool.get();
	c1.sa = null;
	c1.sb = null;
	c1.overlap = distMin;
	var self1 = c1.normal;
	self1.x = x1;
	self1.y = y1;
	c1.pooled = false;
	var closest = Math.abs(distMin);
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					p._vertices[i1] = new hxmath_math_Vector2Default(0,0);
				}
				var x1 = p.local_vertices[i1].x;
				var y1 = p.local_vertices[i1].y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var a = p.transform.get_local_to_world_matrix();
				var v_x = x1;
				var v_y = y1;
				var v_z = 1;
				var self1 = p._vertices[i1];
				self1.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
				self1.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self2 = p._vertices[(i2 + 1) % p.count];
				target.x = self2.x;
				target.y = self2.y;
				var a1 = p._vertices[i2];
				var self3 = p.sync_pos;
				self3.x -= a1.x;
				self3.y -= a1.y;
				if(p._normals[i2] == null) {
					p._normals[i2] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y2 = p.sync_pos.x;
					var self4 = p._normals[i2];
					self4.x = -p.sync_pos.y;
					self4.y = y2;
				}
				var self5 = p._normals[i2];
				var length = Math.sqrt(self5.x * self5.x + self5.y * self5.y);
				if(length > 0.0) {
					self5.x /= length;
					self5.y /= length;
				}
			}
		}
		var x2 = p._normals[i].x;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g6 = 0;
			var _g7 = p.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(p.local_vertices[i3] == null) {
					continue;
				}
				if(p._vertices[i3] == null) {
					p._vertices[i3] = new hxmath_math_Vector2Default(0,0);
				}
				var x3 = p.local_vertices[i3].x;
				var y3 = p.local_vertices[i3].y;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var a2 = p.transform.get_local_to_world_matrix();
				var v_x1 = x3;
				var v_y1 = y3;
				var v_z1 = 1;
				var self6 = p._vertices[i3];
				self6.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
				self6.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
			}
			var _g8 = 0;
			var _g9 = p.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = p.sync_pos;
				var self7 = p._vertices[(i4 + 1) % p.count];
				target1.x = self7.x;
				target1.y = self7.y;
				var a3 = p._vertices[i4];
				var self8 = p.sync_pos;
				self8.x -= a3.x;
				self8.y -= a3.y;
				if(p._normals[i4] == null) {
					p._normals[i4] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y4 = p.sync_pos.x;
					var self9 = p._normals[i4];
					self9.x = -p.sync_pos.y;
					self9.y = y4;
				}
				var self10 = p._normals[i4];
				var length1 = Math.sqrt(self10.x * self10.x + self10.y * self10.y);
				if(length1 > 0.0) {
					self10.x /= length1;
					self10.y /= length1;
				}
			}
		}
		var y5 = p._normals[i].y;
		self.x = x2;
		self.y = y5;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g10 = 0;
			var _g11 = p.count;
			while(_g10 < _g11) {
				var i5 = _g10++;
				if(p.local_vertices[i5] == null) {
					continue;
				}
				if(p._vertices[i5] == null) {
					p._vertices[i5] = new hxmath_math_Vector2Default(0,0);
				}
				var x4 = p.local_vertices[i5].x;
				var y6 = p.local_vertices[i5].y;
				if(y6 == null) {
					y6 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var a4 = p.transform.get_local_to_world_matrix();
				var v_x2 = x4;
				var v_y2 = y6;
				var v_z2 = 1;
				var self11 = p._vertices[i5];
				self11.x = a4.m00 * v_x2 + a4.m10 * v_y2 + a4.m20 * v_z2;
				self11.y = a4.m01 * v_x2 + a4.m11 * v_y2 + a4.m21 * v_z2;
			}
			var _g12 = 0;
			var _g13 = p.count;
			while(_g12 < _g13) {
				var i6 = _g12++;
				var target2 = p.sync_pos;
				var self12 = p._vertices[(i6 + 1) % p.count];
				target2.x = self12.x;
				target2.y = self12.y;
				var a5 = p._vertices[i6];
				var self13 = p.sync_pos;
				self13.x -= a5.x;
				self13.y -= a5.y;
				if(p._normals[i6] == null) {
					p._normals[i6] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				} else {
					var y7 = p.sync_pos.x;
					var self14 = p._normals[i6];
					self14.x = -p.sync_pos.y;
					self14.y = y7;
				}
				var self15 = p._normals[i6];
				var length2 = Math.sqrt(self15.x * self15.x + self15.y * self15.y);
				if(length2 > 0.0) {
					self15.x /= length2;
					self15.y /= length2;
				}
			}
		}
		var b = p._vertices[0];
		min1 = self.x * b.x + self.y * b.y;
		max1 = min1;
		var _g14 = 1;
		var _g15 = p.count;
		while(_g14 < _g15) {
			var j = _g14++;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g16 = 0;
				var _g17 = p.count;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(p.local_vertices[i7] == null) {
						continue;
					}
					if(p._vertices[i7] == null) {
						p._vertices[i7] = new hxmath_math_Vector2Default(0,0);
					}
					var x5 = p.local_vertices[i7].x;
					var y8 = p.local_vertices[i7].y;
					if(y8 == null) {
						y8 = 0;
					}
					if(x5 == null) {
						x5 = 0;
					}
					var a6 = p.transform.get_local_to_world_matrix();
					var v_x3 = x5;
					var v_y3 = y8;
					var v_z3 = 1;
					var self16 = p._vertices[i7];
					self16.x = a6.m00 * v_x3 + a6.m10 * v_y3 + a6.m20 * v_z3;
					self16.y = a6.m01 * v_x3 + a6.m11 * v_y3 + a6.m21 * v_z3;
				}
				var _g18 = 0;
				var _g19 = p.count;
				while(_g18 < _g19) {
					var i8 = _g18++;
					var target3 = p.sync_pos;
					var self17 = p._vertices[(i8 + 1) % p.count];
					target3.x = self17.x;
					target3.y = self17.y;
					var a7 = p._vertices[i8];
					var self18 = p.sync_pos;
					self18.x -= a7.x;
					self18.y -= a7.y;
					if(p._normals[i8] == null) {
						p._normals[i8] = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					} else {
						var y9 = p.sync_pos.x;
						var self19 = p._normals[i8];
						self19.x = -p.sync_pos.y;
						self19.y = y9;
					}
					var self20 = p._normals[i8];
					var length3 = Math.sqrt(self20.x * self20.x + self20.y * self20.y);
					if(length3 > 0.0) {
						self20.x /= length3;
						self20.y /= length3;
					}
				}
			}
			var b1 = p._vertices[j];
			test = self.x * b1.x + self.y * b1.y;
			if(test < min1) {
				min1 = test;
			}
			if(test > max1) {
				max1 = test;
			}
		}
		min2 = -c_rad1;
		offset = self.x * -x + self.y * -y;
		min1 += offset;
		max1 += offset;
		test1 = min1 - c_rad1;
		test2 = min2 - max1;
		if(test1 > 0 || test2 > 0) {
			c1.put();
			return null;
		}
		distMin = -(c_rad1 - min1);
		if(flip) {
			distMin *= -1;
		}
		if(Math.abs(distMin) < closest) {
			var self21 = c1.normal;
			self21.x = self.x;
			self21.y = self.y;
			c1.overlap = distMin;
			closest = Math.abs(distMin);
		}
	}
	c1.sa = flip ? p : c;
	c1.sb = flip ? c : p;
	c1.overlap = Math.abs(c1.overlap);
	if(flip) {
		var self = c1.normal;
		self.x = -self.x;
		self.y = -self.y;
	}
	return c1;
};
echo_util_SAT.check_polygons = function(polygon1,polygon2,flip) {
	if(flip == null) {
		flip = false;
	}
	var test1 = 0;
	var test2 = 0;
	var testNum = 0;
	var min1 = 0;
	var max1 = 0;
	var min2 = 0;
	var max2 = 0;
	var closest = 1073741823;
	var col = null;
	var _g = 0;
	var _g1 = polygon1.count;
	while(_g < _g1) {
		var i = _g++;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g2 = 0;
			var _g3 = polygon1.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(polygon1.local_vertices[i1] == null) {
					continue;
				}
				if(polygon1._vertices[i1] == null) {
					polygon1._vertices[i1] = new hxmath_math_Vector2Default(0,0);
				}
				var x = polygon1.local_vertices[i1].x;
				var y = polygon1.local_vertices[i1].y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var a = polygon1.transform.get_local_to_world_matrix();
				var v_x = x;
				var v_y = y;
				var v_z = 1;
				var self = polygon1._vertices[i1];
				self.x = a.m00 * v_x + a.m10 * v_y + a.m20 * v_z;
				self.y = a.m01 * v_x + a.m11 * v_y + a.m21 * v_z;
			}
			var _g4 = 0;
			var _g5 = polygon1.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = polygon1.sync_pos;
				var self1 = polygon1._vertices[(i2 + 1) % polygon1.count];
				target.x = self1.x;
				target.y = self1.y;
				var a1 = polygon1._vertices[i2];
				var self2 = polygon1.sync_pos;
				self2.x -= a1.x;
				self2.y -= a1.y;
				if(polygon1._normals[i2] == null) {
					polygon1._normals[i2] = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
				} else {
					var y1 = polygon1.sync_pos.x;
					var self3 = polygon1._normals[i2];
					self3.x = -polygon1.sync_pos.y;
					self3.y = y1;
				}
				var self4 = polygon1._normals[i2];
				var length = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
				if(length > 0.0) {
					self4.x /= length;
					self4.y /= length;
				}
			}
		}
		var x1 = polygon1._normals[i].x;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g6 = 0;
			var _g7 = polygon1.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(polygon1.local_vertices[i3] == null) {
					continue;
				}
				if(polygon1._vertices[i3] == null) {
					polygon1._vertices[i3] = new hxmath_math_Vector2Default(0,0);
				}
				var x2 = polygon1.local_vertices[i3].x;
				var y2 = polygon1.local_vertices[i3].y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var a2 = polygon1.transform.get_local_to_world_matrix();
				var v_x1 = x2;
				var v_y1 = y2;
				var v_z1 = 1;
				var self5 = polygon1._vertices[i3];
				self5.x = a2.m00 * v_x1 + a2.m10 * v_y1 + a2.m20 * v_z1;
				self5.y = a2.m01 * v_x1 + a2.m11 * v_y1 + a2.m21 * v_z1;
			}
			var _g8 = 0;
			var _g9 = polygon1.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = polygon1.sync_pos;
				var self6 = polygon1._vertices[(i4 + 1) % polygon1.count];
				target1.x = self6.x;
				target1.y = self6.y;
				var a3 = polygon1._vertices[i4];
				var self7 = polygon1.sync_pos;
				self7.x -= a3.x;
				self7.y -= a3.y;
				if(polygon1._normals[i4] == null) {
					polygon1._normals[i4] = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
				} else {
					var y3 = polygon1.sync_pos.x;
					var self8 = polygon1._normals[i4];
					self8.x = -polygon1.sync_pos.y;
					self8.y = y3;
				}
				var self9 = polygon1._normals[i4];
				var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
				if(length1 > 0.0) {
					self9.x /= length1;
					self9.y /= length1;
				}
			}
		}
		var y4 = polygon1._normals[i].y;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g10 = 0;
			var _g11 = polygon1.count;
			while(_g10 < _g11) {
				var i5 = _g10++;
				if(polygon1.local_vertices[i5] == null) {
					continue;
				}
				if(polygon1._vertices[i5] == null) {
					polygon1._vertices[i5] = new hxmath_math_Vector2Default(0,0);
				}
				var x3 = polygon1.local_vertices[i5].x;
				var y5 = polygon1.local_vertices[i5].y;
				if(y5 == null) {
					y5 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var a4 = polygon1.transform.get_local_to_world_matrix();
				var v_x2 = x3;
				var v_y2 = y5;
				var v_z2 = 1;
				var self10 = polygon1._vertices[i5];
				self10.x = a4.m00 * v_x2 + a4.m10 * v_y2 + a4.m20 * v_z2;
				self10.y = a4.m01 * v_x2 + a4.m11 * v_y2 + a4.m21 * v_z2;
			}
			var _g12 = 0;
			var _g13 = polygon1.count;
			while(_g12 < _g13) {
				var i6 = _g12++;
				var target2 = polygon1.sync_pos;
				var self11 = polygon1._vertices[(i6 + 1) % polygon1.count];
				target2.x = self11.x;
				target2.y = self11.y;
				var a5 = polygon1._vertices[i6];
				var self12 = polygon1.sync_pos;
				self12.x -= a5.x;
				self12.y -= a5.y;
				if(polygon1._normals[i6] == null) {
					polygon1._normals[i6] = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
				} else {
					var y6 = polygon1.sync_pos.x;
					var self13 = polygon1._normals[i6];
					self13.x = -polygon1.sync_pos.y;
					self13.y = y6;
				}
				var self14 = polygon1._normals[i6];
				var length2 = Math.sqrt(self14.x * self14.x + self14.y * self14.y);
				if(length2 > 0.0) {
					self14.x /= length2;
					self14.y /= length2;
				}
			}
		}
		var b = polygon1._vertices[0];
		min1 = x1 * b.x + y4 * b.y;
		max1 = min1;
		var _g14 = 1;
		var _g15 = polygon1.count;
		while(_g14 < _g15) {
			var j = _g14++;
			if(polygon1.dirty_vertices) {
				polygon1.dirty_vertices = false;
				while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
				var _g16 = 0;
				var _g17 = polygon1.count;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(polygon1.local_vertices[i7] == null) {
						continue;
					}
					if(polygon1._vertices[i7] == null) {
						polygon1._vertices[i7] = new hxmath_math_Vector2Default(0,0);
					}
					var x4 = polygon1.local_vertices[i7].x;
					var y7 = polygon1.local_vertices[i7].y;
					if(y7 == null) {
						y7 = 0;
					}
					if(x4 == null) {
						x4 = 0;
					}
					var a6 = polygon1.transform.get_local_to_world_matrix();
					var v_x3 = x4;
					var v_y3 = y7;
					var v_z3 = 1;
					var self15 = polygon1._vertices[i7];
					self15.x = a6.m00 * v_x3 + a6.m10 * v_y3 + a6.m20 * v_z3;
					self15.y = a6.m01 * v_x3 + a6.m11 * v_y3 + a6.m21 * v_z3;
				}
				var _g18 = 0;
				var _g19 = polygon1.count;
				while(_g18 < _g19) {
					var i8 = _g18++;
					var target3 = polygon1.sync_pos;
					var self16 = polygon1._vertices[(i8 + 1) % polygon1.count];
					target3.x = self16.x;
					target3.y = self16.y;
					var a7 = polygon1._vertices[i8];
					var self17 = polygon1.sync_pos;
					self17.x -= a7.x;
					self17.y -= a7.y;
					if(polygon1._normals[i8] == null) {
						polygon1._normals[i8] = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
					} else {
						var y8 = polygon1.sync_pos.x;
						var self18 = polygon1._normals[i8];
						self18.x = -polygon1.sync_pos.y;
						self18.y = y8;
					}
					var self19 = polygon1._normals[i8];
					var length3 = Math.sqrt(self19.x * self19.x + self19.y * self19.y);
					if(length3 > 0.0) {
						self19.x /= length3;
						self19.y /= length3;
					}
				}
			}
			var b1 = polygon1._vertices[j];
			testNum = x1 * b1.x + y4 * b1.y;
			if(testNum < min1) {
				min1 = testNum;
			}
			if(testNum > max1) {
				max1 = testNum;
			}
		}
		if(polygon2.dirty_vertices) {
			polygon2.dirty_vertices = false;
			while(polygon2._vertices.length > polygon2.count) polygon2._vertices.pop();
			var _g20 = 0;
			var _g21 = polygon2.count;
			while(_g20 < _g21) {
				var i9 = _g20++;
				if(polygon2.local_vertices[i9] == null) {
					continue;
				}
				if(polygon2._vertices[i9] == null) {
					polygon2._vertices[i9] = new hxmath_math_Vector2Default(0,0);
				}
				var x5 = polygon2.local_vertices[i9].x;
				var y9 = polygon2.local_vertices[i9].y;
				if(y9 == null) {
					y9 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var a8 = polygon2.transform.get_local_to_world_matrix();
				var v_x4 = x5;
				var v_y4 = y9;
				var v_z4 = 1;
				var self20 = polygon2._vertices[i9];
				self20.x = a8.m00 * v_x4 + a8.m10 * v_y4 + a8.m20 * v_z4;
				self20.y = a8.m01 * v_x4 + a8.m11 * v_y4 + a8.m21 * v_z4;
			}
			var _g22 = 0;
			var _g23 = polygon2.count;
			while(_g22 < _g23) {
				var i10 = _g22++;
				var target4 = polygon2.sync_pos;
				var self21 = polygon2._vertices[(i10 + 1) % polygon2.count];
				target4.x = self21.x;
				target4.y = self21.y;
				var a9 = polygon2._vertices[i10];
				var self22 = polygon2.sync_pos;
				self22.x -= a9.x;
				self22.y -= a9.y;
				if(polygon2._normals[i10] == null) {
					polygon2._normals[i10] = new hxmath_math_Vector2Default(-polygon2.sync_pos.y,polygon2.sync_pos.x);
				} else {
					var y10 = polygon2.sync_pos.x;
					var self23 = polygon2._normals[i10];
					self23.x = -polygon2.sync_pos.y;
					self23.y = y10;
				}
				var self24 = polygon2._normals[i10];
				var length4 = Math.sqrt(self24.x * self24.x + self24.y * self24.y);
				if(length4 > 0.0) {
					self24.x /= length4;
					self24.y /= length4;
				}
			}
		}
		var b2 = polygon2._vertices[0];
		min2 = x1 * b2.x + y4 * b2.y;
		max2 = min2;
		var _g24 = 1;
		var _g25 = polygon2.count;
		while(_g24 < _g25) {
			var j1 = _g24++;
			if(polygon2.dirty_vertices) {
				polygon2.dirty_vertices = false;
				while(polygon2._vertices.length > polygon2.count) polygon2._vertices.pop();
				var _g26 = 0;
				var _g27 = polygon2.count;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(polygon2.local_vertices[i11] == null) {
						continue;
					}
					if(polygon2._vertices[i11] == null) {
						polygon2._vertices[i11] = new hxmath_math_Vector2Default(0,0);
					}
					var x6 = polygon2.local_vertices[i11].x;
					var y11 = polygon2.local_vertices[i11].y;
					if(y11 == null) {
						y11 = 0;
					}
					if(x6 == null) {
						x6 = 0;
					}
					var a10 = polygon2.transform.get_local_to_world_matrix();
					var v_x5 = x6;
					var v_y5 = y11;
					var v_z5 = 1;
					var self25 = polygon2._vertices[i11];
					self25.x = a10.m00 * v_x5 + a10.m10 * v_y5 + a10.m20 * v_z5;
					self25.y = a10.m01 * v_x5 + a10.m11 * v_y5 + a10.m21 * v_z5;
				}
				var _g28 = 0;
				var _g29 = polygon2.count;
				while(_g28 < _g29) {
					var i12 = _g28++;
					var target5 = polygon2.sync_pos;
					var self26 = polygon2._vertices[(i12 + 1) % polygon2.count];
					target5.x = self26.x;
					target5.y = self26.y;
					var a11 = polygon2._vertices[i12];
					var self27 = polygon2.sync_pos;
					self27.x -= a11.x;
					self27.y -= a11.y;
					if(polygon2._normals[i12] == null) {
						polygon2._normals[i12] = new hxmath_math_Vector2Default(-polygon2.sync_pos.y,polygon2.sync_pos.x);
					} else {
						var y12 = polygon2.sync_pos.x;
						var self28 = polygon2._normals[i12];
						self28.x = -polygon2.sync_pos.y;
						self28.y = y12;
					}
					var self29 = polygon2._normals[i12];
					var length5 = Math.sqrt(self29.x * self29.x + self29.y * self29.y);
					if(length5 > 0.0) {
						self29.x /= length5;
						self29.y /= length5;
					}
				}
			}
			var b3 = polygon2._vertices[j1];
			testNum = x1 * b3.x + y4 * b3.y;
			if(testNum < min2) {
				min2 = testNum;
			}
			if(testNum > max2) {
				max2 = testNum;
			}
		}
		test1 = min1 - max2;
		test2 = min2 - max1;
		if(test1 > 0 || test2 > 0) {
			return null;
		}
		var overlap = -(max2 - min1);
		if(flip) {
			overlap *= -1;
		}
		if(Math.abs(overlap) < closest) {
			if(col == null) {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = overlap;
				var self30 = c.normal;
				self30.x = x1;
				self30.y = y4;
				c.pooled = false;
				col = c;
			} else {
				col.overlap = overlap;
				var self31 = col.normal;
				self31.x = x1;
				self31.y = y4;
			}
			closest = Math.abs(overlap);
		}
	}
	if(col == null) {
		return null;
	}
	col.sa = flip ? polygon2 : polygon1;
	col.sb = flip ? polygon1 : polygon2;
	if(flip) {
		var self = col.normal;
		self.x = -self.x;
		self.y = -self.y;
	}
	return col;
};
var echo_util_SlopeDirection = $hxEnums["echo.util.SlopeDirection"] = { __ename__:true,__constructs__:null
	,TopLeft: {_hx_name:"TopLeft",_hx_index:0,__enum__:"echo.util.SlopeDirection",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:1,__enum__:"echo.util.SlopeDirection",toString:$estr}
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:2,__enum__:"echo.util.SlopeDirection",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:3,__enum__:"echo.util.SlopeDirection",toString:$estr}
};
echo_util_SlopeDirection.__constructs__ = [echo_util_SlopeDirection.TopLeft,echo_util_SlopeDirection.TopRight,echo_util_SlopeDirection.BottomLeft,echo_util_SlopeDirection.BottomRight];
echo_util_SlopeDirection.__empty_constructs__ = [echo_util_SlopeDirection.TopLeft,echo_util_SlopeDirection.TopRight,echo_util_SlopeDirection.BottomLeft,echo_util_SlopeDirection.BottomRight];
var echo_util_SlopeAngle = $hxEnums["echo.util.SlopeAngle"] = { __ename__:true,__constructs__:null
	,Gentle: {_hx_name:"Gentle",_hx_index:0,__enum__:"echo.util.SlopeAngle",toString:$estr}
	,Sharp: {_hx_name:"Sharp",_hx_index:1,__enum__:"echo.util.SlopeAngle",toString:$estr}
};
echo_util_SlopeAngle.__constructs__ = [echo_util_SlopeAngle.Gentle,echo_util_SlopeAngle.Sharp];
echo_util_SlopeAngle.__empty_constructs__ = [echo_util_SlopeAngle.Gentle,echo_util_SlopeAngle.Sharp];
var echo_util_SlopeSize = $hxEnums["echo.util.SlopeSize"] = { __ename__:true,__constructs__:null
	,Thick: {_hx_name:"Thick",_hx_index:0,__enum__:"echo.util.SlopeSize",toString:$estr}
	,Thin: {_hx_name:"Thin",_hx_index:1,__enum__:"echo.util.SlopeSize",toString:$estr}
};
echo_util_SlopeSize.__constructs__ = [echo_util_SlopeSize.Thick,echo_util_SlopeSize.Thin];
echo_util_SlopeSize.__empty_constructs__ = [echo_util_SlopeSize.Thick,echo_util_SlopeSize.Thin];
var echo_util_TileMap = function() { };
echo_util_TileMap.__name__ = true;
echo_util_TileMap.generate = function(data,tile_width,tile_height,width_in_tiles,height_in_tiles,offset_x,offset_y,start_index,shapes,ignore) {
	if(start_index == null) {
		start_index = 1;
	}
	if(offset_y == null) {
		offset_y = 0;
	}
	if(offset_x == null) {
		offset_x = 0;
	}
	var get_tile_shape = function(index) {
		if(shapes == null || shapes.length == 0) {
			return null;
		}
		var _g = 0;
		while(_g < shapes.length) {
			var shape = shapes[_g];
			++_g;
			if(shape.index == index) {
				return shape;
			}
		}
		return null;
	};
	var generate_shape = function(x,y,tile_shape,data) {
		data[y][x] = -1;
		var shape = null;
		if(tile_shape.custom_shape != null) {
			shape = echo_Shape.get(tile_shape.custom_shape);
		} else if(tile_shape.slope_direction != null) {
			switch(tile_shape.slope_direction._hx_index) {
			case 0:
				if(tile_shape.slope_shape != null) {
					switch(tile_shape.slope_shape.angle._hx_index) {
					case 0:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,tile_height * 0.5),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(tile_width,tile_height * 0.5),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					case 1:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(tile_width * 0.5,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(tile_width * 0.5,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					}
				} else {
					var vertices = [new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
					var polygon = echo_shape_Polygon._pool.get();
					var x1 = 0;
					var y1 = 0;
					var rotation = 0;
					var scale_x = 1;
					var scale_y = 1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_x = x1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_y = y1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_rotation = rotation;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_x = scale_x;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_y = scale_y;
					var count = null;
					polygon.local_vertices = vertices == null ? [] : vertices;
					polygon.count = polygon.local_vertices.length;
					if(count > polygon.local_vertices.length) {
						var _g = polygon.local_vertices.length;
						while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.pooled = false;
					shape = polygon;
				}
				break;
			case 1:
				if(tile_shape.slope_shape != null) {
					switch(tile_shape.slope_shape.angle._hx_index) {
					case 0:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,tile_height * 0.5),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(0,tile_height * 0.5),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					case 1:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width * 0.5,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width * 0.5,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					}
				} else {
					var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
					var polygon = echo_shape_Polygon._pool.get();
					var x1 = 0;
					var y1 = 0;
					var rotation = 0;
					var scale_x = 1;
					var scale_y = 1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_x = x1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_y = y1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_rotation = rotation;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_x = scale_x;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_y = scale_y;
					var count = null;
					polygon.local_vertices = vertices == null ? [] : vertices;
					polygon.count = polygon.local_vertices.length;
					if(count > polygon.local_vertices.length) {
						var _g = polygon.local_vertices.length;
						while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.pooled = false;
					shape = polygon;
				}
				break;
			case 2:
				if(tile_shape.slope_shape != null) {
					switch(tile_shape.slope_shape.angle._hx_index) {
					case 0:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(0,tile_height * 0.5)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height * 0.5)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					case 1:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height),new hxmath_math_Vector2Default(tile_width * 0.5,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(tile_width * 0.5,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					}
				} else {
					var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height)];
					var polygon = echo_shape_Polygon._pool.get();
					var x1 = 0;
					var y1 = 0;
					var rotation = 0;
					var scale_x = 1;
					var scale_y = 1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_x = x1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_y = y1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_rotation = rotation;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_x = scale_x;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_y = scale_y;
					var count = null;
					polygon.local_vertices = vertices == null ? [] : vertices;
					polygon.count = polygon.local_vertices.length;
					if(count > polygon.local_vertices.length) {
						var _g = polygon.local_vertices.length;
						while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.pooled = false;
					shape = polygon;
				}
				break;
			case 3:
				if(tile_shape.slope_shape != null) {
					switch(tile_shape.slope_shape.angle._hx_index) {
					case 0:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width,tile_height * 0.5),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(0,tile_height * 0.5)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					case 1:
						switch(tile_shape.slope_shape.size._hx_index) {
						case 0:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(tile_width * 0.5,tile_height),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						case 1:
							var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width * 0.5,0),new hxmath_math_Vector2Default(0,tile_height)];
							var polygon = echo_shape_Polygon._pool.get();
							var x1 = 0;
							var y1 = 0;
							var rotation = 0;
							var scale_x = 1;
							var scale_y = 1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_x = x1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_y = y1;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_rotation = rotation;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_x = scale_x;
							var _this = polygon.transform;
							if(!_this.dirty) {
								_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
								var _g = 0;
								var _g1 = _this.children;
								while(_g < _g1.length) {
									var child = _g1[_g];
									++_g;
									child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
									var _g2 = 0;
									var _g3 = child.children;
									while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
									if(child.on_dirty != null) {
										child.on_dirty(child);
									}
								}
								if(_this.on_dirty != null) {
									_this.on_dirty(_this);
								}
							}
							_this.local_scale_y = scale_y;
							var count = null;
							polygon.local_vertices = vertices == null ? [] : vertices;
							polygon.count = polygon.local_vertices.length;
							if(count > polygon.local_vertices.length) {
								var _g = polygon.local_vertices.length;
								while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
							polygon.pooled = false;
							shape = polygon;
							break;
						}
						break;
					}
				} else {
					var vertices = [new hxmath_math_Vector2Default(0,0),new hxmath_math_Vector2Default(tile_width,0),new hxmath_math_Vector2Default(0,tile_height)];
					var polygon = echo_shape_Polygon._pool.get();
					var x1 = 0;
					var y1 = 0;
					var rotation = 0;
					var scale_x = 1;
					var scale_y = 1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_x = x1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_y = y1;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_rotation = rotation;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_x = scale_x;
					var _this = polygon.transform;
					if(!_this.dirty) {
						_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
						var _g = 0;
						var _g1 = _this.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g2 = 0;
							var _g3 = child.children;
							while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this.on_dirty != null) {
							_this.on_dirty(_this);
						}
					}
					_this.local_scale_y = scale_y;
					var count = null;
					polygon.local_vertices = vertices == null ? [] : vertices;
					polygon.count = polygon.local_vertices.length;
					if(count > polygon.local_vertices.length) {
						var _g = polygon.local_vertices.length;
						while(_g < count) polygon.local_vertices[_g++] = new hxmath_math_Vector2Default(0,0);
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.pooled = false;
					shape = polygon;
				}
				break;
			}
		}
		return new echo_Body({ x : x * tile_width + offset_x, y : y * tile_height + offset_y, mass : 0, shape_instance : shape});
	};
	var generate_rect = function(x,y,data) {
		data[y][x] = -1;
		var width = 1;
		var _g = x + 1;
		var _g1 = data[y].length;
		while(_g < _g1) {
			var i = _g++;
			var index = data[y][i];
			if(index >= start_index && get_tile_shape(index) == null && !(ignore != null && ignore.indexOf(index) > -1)) {
				++width;
				data[y][i] = -1;
			} else {
				break;
			}
		}
		var yy = y + 1;
		var height = 1;
		var flag = false;
		while(yy < data.length - 1) {
			if(flag) {
				yy = data.length;
				continue;
			}
			var _g = 0;
			var _g1 = width;
			while(_g < _g1) {
				var next = data[yy][_g++ + x];
				if(get_tile_shape(next) != null || next < start_index || ignore != null && ignore.indexOf(next) > -1) {
					flag = true;
				}
			}
			if(!flag) {
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) data[yy][_g2++ + x] = -1;
				++height;
			}
			++yy;
		}
		return new echo_Body({ x : x * tile_width + tile_width * width * 0.5 + offset_x, y : y * tile_height + tile_height * height * 0.5 + offset_y, mass : 0, shape : { type : 0, width : tile_width * width, height : tile_height * height}});
	};
	var colliders = [];
	var tmp = [];
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var y = Math.floor(i / width_in_tiles);
		if(tmp[y] == null) {
			tmp[y] = [];
		}
		tmp[y][i % width_in_tiles] = data[i];
	}
	var _g = 0;
	var _g1 = tmp.length;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = tmp[y].length;
		while(_g2 < _g3) {
			var x = _g2++;
			var i = tmp[y][x];
			if(i >= start_index && !(ignore != null && ignore.indexOf(i) > -1)) {
				var shape = get_tile_shape(i);
				var body = shape == null ? generate_rect(x,y,tmp) : generate_shape(x,y,shape,tmp);
				body.data.tile_index = shape == null ? start_index : i;
				colliders.push(body);
			}
		}
	}
	return colliders;
};
var echo_util_Transform = function(x,y,rotation,scale_x,scale_y) {
	if(scale_y == null) {
		scale_y = 1;
	}
	if(scale_x == null) {
		scale_x = 1;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.coordinates_dirty = false;
	this.inverse_dirty = false;
	this.dirty = false;
	this.local_to_world_matrix = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
	this.children = [];
	this._scale_y = 1;
	this._scale_x = 1;
	this._rotation = 0;
	this._y = 0;
	this._x = 0;
	this.on_dirty = null;
	if(!this.dirty) {
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	this.local_x = x;
	if(!this.dirty) {
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	this.local_y = y;
	if(!this.dirty) {
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	this.local_rotation = rotation;
	if(!this.dirty) {
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	this.local_scale_x = scale_x;
	if(!this.dirty) {
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	this.local_scale_y = scale_y;
};
echo_util_Transform.__name__ = true;
echo_util_Transform.prototype = {
	set_parent: function(parent,preserve_world_transform) {
		if(preserve_world_transform == null) {
			preserve_world_transform = false;
		}
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
		}
		this.parent = parent;
		if(parent != null) {
			this.parent.children.push(this);
		}
		this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
			var _g2 = 0;
			var _g3 = child.children;
			while(_g2 < _g3.length) _g3[_g2++].set_dirty(true);
			if(child.on_dirty != null) {
				child.on_dirty(child);
			}
		}
		if(this.on_dirty != null) {
			this.on_dirty(this);
		}
	}
	,get_local_to_world_matrix: function() {
		if(this.dirty) {
			if(this.parent == null) {
				var radians = Math.PI / 180 * this.local_rotation;
				var s = Math.sin(radians);
				var c = Math.cos(radians);
				var target = this.local_to_world_matrix;
				target.m00 = c * this.local_scale_x;
				target.m10 = -s * this.local_scale_y;
				target.m20 = this.local_x;
				target.m01 = s * this.local_scale_x;
				target.m11 = c * this.local_scale_y;
				target.m21 = this.local_y;
				target.m02 = 0;
				target.m12 = 0;
				target.m22 = 1;
			} else {
				var a = this.parent.get_local_to_world_matrix();
				var radians = Math.PI / 180 * this.local_rotation;
				var s = Math.sin(radians);
				var c = Math.cos(radians);
				var m00 = c * this.local_scale_x;
				var m10 = -s * this.local_scale_y;
				var m20 = this.local_x;
				var m01 = s * this.local_scale_x;
				var m11 = c * this.local_scale_y;
				var m21 = this.local_y;
				var b_m02 = 0;
				var b_m12 = 0;
				var b_m22 = 1;
				var m101 = a.m00 * m10 + a.m10 * m11 + a.m20 * b_m12;
				var m201 = a.m00 * m20 + a.m10 * m21 + a.m20 * b_m22;
				var m111 = a.m01 * m10 + a.m11 * m11 + a.m21 * b_m12;
				var m211 = a.m01 * m20 + a.m11 * m21 + a.m21 * b_m22;
				var m12 = a.m02 * m10 + a.m12 * m11 + a.m22 * b_m12;
				var m22 = a.m02 * m20 + a.m12 * m21 + a.m22 * b_m22;
				var target = this.local_to_world_matrix;
				target.m00 = a.m00 * m00 + a.m10 * m01 + a.m20 * b_m02;
				target.m10 = m101;
				target.m20 = m201;
				target.m01 = a.m01 * m00 + a.m11 * m01 + a.m21 * b_m02;
				target.m11 = m111;
				target.m21 = m211;
				target.m02 = a.m02 * m00 + a.m12 * m01 + a.m22 * b_m02;
				target.m12 = m12;
				target.m22 = m22;
			}
			this.dirty = false;
		}
		return this.local_to_world_matrix;
	}
	,sync: function() {
		if(!this.coordinates_dirty) {
			return;
		}
		var m = this.get_local_to_world_matrix();
		if(this.parent == null) {
			this._x = this.local_x;
			this._y = this.local_y;
			this._scale_x = this.local_scale_x;
			this._scale_y = this.local_scale_y;
			this._rotation = this.local_rotation;
		} else {
			var a = m.m00;
			var b = m.m01;
			var c = m.m10;
			var d = m.m11;
			this._x = m.m20;
			this._y = m.m21;
			this._scale_x = Math.sqrt(a * a + b * b);
			this._scale_y = Math.sqrt(c * c + d * d);
			this._rotation = 180 / Math.PI * Math.atan2(-c / this._scale_y,a / this._scale_x);
		}
		this.coordinates_dirty = false;
	}
	,set_dirty: function(force) {
		if(force == null) {
			force = false;
		}
		if(force || !this.dirty) {
			this.dirty = this.inverse_dirty = this.coordinates_dirty = true;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) _g1[_g++].set_dirty(true);
			if(this.on_dirty != null) {
				this.on_dirty(this);
			}
		}
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__properties__: {get_native:"get_native"}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:true,__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
haxe_ds_Either.__empty_constructs__ = [];
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var hxmath_math_Matrix3x3Default = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
};
hxmath_math_Matrix3x3Default.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var objects_Background = function() {
	PIXI.TilingSprite.call(this,PIXI.Texture.from("assets/clouds_bg.png"),1024,180);
	this.anchor.set(0.5);
	zero_utilities_Tween.tween(this.tilePosition,120,{ x : 320},{ type : zero_utilities_TweenType.LOOP_FORWARDS});
	this.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
};
objects_Background.__name__ = true;
objects_Background.__super__ = PIXI.TilingSprite;
objects_Background.prototype = $extend(PIXI.TilingSprite.prototype,{
});
var objects_GameObject = function() {
	this.match_rotation = true;
	this.groups = [];
	this.alive = true;
	this.flash_timer = 0;
	this.touching = 0;
	this.normals = [];
	this.facing = objects_Facing.RIGHT;
	PIXI.Container.call(this);
	objects_GameObject.all.push(this);
	this.active = true;
};
objects_GameObject.__name__ = true;
objects_GameObject.update_all = function(dt) {
	var _g = 0;
	var _g1 = objects_GameObject.all;
	while(_g < _g1.length) {
		var object = _g1[_g];
		++_g;
		if(object.active) {
			object.touching = 0;
			if(object.body != null) {
				var _g2 = 0;
				var _g3 = object.normals;
				while(_g2 < _g3.length) {
					var normal = _g3[_g2];
					++_g2;
					var v = util_VecUtil_UP_VEC2;
					if(zero_utilities_Vec2.zero(normal[0] * v[0] + normal[1] * v[1]) > 0.5) {
						object.touching = object.touching + 4096;
					}
					var v1 = util_VecUtil_DOWN_VEC2;
					if(zero_utilities_Vec2.zero(normal[0] * v1[0] + normal[1] * v1[1]) > 0.5) {
						object.touching = object.touching + 256;
					}
					var v2 = util_VecUtil_LEFT_VEC2;
					if(zero_utilities_Vec2.zero(normal[0] * v2[0] + normal[1] * v2[1]) > 0.5) {
						object.touching = object.touching + 16;
					}
					var v3 = util_VecUtil_RIGHT_VEC2;
					if(zero_utilities_Vec2.zero(normal[0] * v3[0] + normal[1] * v3[1]) > 0.5) {
						object.touching = object.touching + 1;
					}
				}
				var _g4 = 0;
				var _g5 = object.normals;
				while(_g4 < _g5.length) {
					var normal1 = _g5[_g4];
					++_g4;
					zero_utilities_Vec2.pool.push(normal1);
					normal1 = null;
				}
				object.normals = [];
				var this1 = states_PlayState.level_rect;
				var tmp = this1[1] + this1[3];
				if(object.body.bounds().min_y > tmp && object.get_velocity().y > 0) {
					var _this = object.body;
					var value = states_PlayState.level_rect[1];
					var _this1 = object.body.bounds();
					var value1 = value - (_this1.max_y - _this1.min_y) / 2;
					var _this2 = _this.transform;
					if(!_this2.dirty) {
						_this2.dirty = _this2.inverse_dirty = _this2.coordinates_dirty = true;
						var _g6 = 0;
						var _g11 = _this2.children;
						while(_g6 < _g11.length) {
							var child = _g11[_g6];
							++_g6;
							child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
							var _g7 = 0;
							var _g12 = child.children;
							while(_g7 < _g12.length) _g12[_g7++].set_dirty(true);
							if(child.on_dirty != null) {
								child.on_dirty(child);
							}
						}
						if(_this2.on_dirty != null) {
							_this2.on_dirty(_this2);
						}
					}
					_this2.local_y = value1;
					if(_this.on_move != null) {
						_this.on_move(_this.transform.local_x,_this.transform.local_y);
					}
				}
				if(object.body.bounds().max_y < states_PlayState.level_rect[1] && object.get_velocity().y < 0) {
					var _this3 = object.body;
					var this11 = states_PlayState.level_rect;
					var value2 = this11[1] + this11[3];
					var _this4 = object.body.bounds();
					var value3 = value2 + (_this4.max_y - _this4.min_y);
					var _this5 = _this3.transform;
					if(!_this5.dirty) {
						_this5.dirty = _this5.inverse_dirty = _this5.coordinates_dirty = true;
						var _g8 = 0;
						var _g13 = _this5.children;
						while(_g8 < _g13.length) {
							var child1 = _g13[_g8];
							++_g8;
							child1.dirty = child1.inverse_dirty = child1.coordinates_dirty = true;
							var _g9 = 0;
							var _g14 = child1.children;
							while(_g9 < _g14.length) _g14[_g9++].set_dirty(true);
							if(child1.on_dirty != null) {
								child1.on_dirty(child1);
							}
						}
						if(_this5.on_dirty != null) {
							_this5.on_dirty(_this5);
						}
					}
					_this5.local_y = value3;
					if(_this3.on_move != null) {
						_this3.on_move(_this3.transform.local_x,_this3.transform.local_y);
					}
				}
			}
			object.update(dt);
		}
	}
};
objects_GameObject.__super__ = PIXI.Container;
objects_GameObject.prototype = $extend(PIXI.Container.prototype,{
	get_touching_cieling: function() {
		return UInt.gt(this.touching & 4096,0);
	}
	,get_touching_floor: function() {
		return UInt.gt(this.touching & 256,0);
	}
	,get_touching_left: function() {
		return UInt.gt(this.touching & 16,0);
	}
	,get_touching_right: function() {
		return UInt.gt(this.touching & 1,0);
	}
	,get_touching_wall: function() {
		if(!this.get_touching_left()) {
			return this.get_touching_right();
		} else {
			return true;
		}
	}
	,get_velocity: function() {
		return this.body.velocity;
	}
	,get_acceleration: function() {
		return this.body.acceleration;
	}
	,make_body: function(options,groups,body_as_parent) {
		if(body_as_parent == null) {
			body_as_parent = true;
		}
		var _gthis = this;
		this.body = new echo_Body(options);
		if(body_as_parent) {
			this.body.on_move = function(x,y) {
				_gthis.position.set(Math.round(x),Math.round(y));
			};
			this.body.on_rotate = function(a) {
				if(_gthis.match_rotation) {
					_gthis.rotation = a * (Math.PI / 180);
				}
			};
		}
		states_PlayState.world.add(this.body);
		this.body.acceleration.y = util_Constants_GRAVITY;
		this.body.data.object = this;
		this.body.max_velocity.y = util_Constants_MAX_VELOCITY_Y;
		if(groups == null) {
			return;
		}
		this.groups = groups;
		var _g = 0;
		while(_g < groups.length) groups[_g++].push(this.body);
	}
	,update: function(dt) {
		this.visible = (this.flash_timer = Math.max(this.flash_timer - dt,0)) == 0 || zero_utilities_SyncedSin.synced_sin(0.15) > 0.25;
	}
	,destroy: function(_) {
		HxOverrides.remove(objects_GameObject.all,this);
		if(this.body != null) {
			var _g = 0;
			var _g1 = this.groups;
			while(_g < _g1.length) HxOverrides.remove(_g1[_g++],this.body);
		}
		if(this.animations != null) {
			this.animations.destroy();
		}
		states_PlayState.world.remove(this.body);
		this.body.dispose();
		PIXI.Container.prototype.destroy.call(this,{ children : true, texture : false, baseTexture : false});
	}
	,__properties__: {get_acceleration:"get_acceleration",get_velocity:"get_velocity",get_touching_wall:"get_touching_wall",get_touching_right:"get_touching_right",get_touching_left:"get_touching_left",get_touching_floor:"get_touching_floor",get_touching_cieling:"get_touching_cieling"}
});
var objects_Hazard = function() {
	objects_GameObject.call(this);
};
objects_Hazard.__name__ = true;
objects_Hazard.__super__ = objects_GameObject;
objects_Hazard.prototype = $extend(objects_GameObject.prototype,{
	make_body: function(options,groups,body_as_parent) {
		if(body_as_parent == null) {
			body_as_parent = true;
		}
		if(groups == null) {
			groups = [];
		}
		if(groups.indexOf(states_PlayState.i.hazards) == -1) {
			groups.push(states_PlayState.i.hazards);
		}
		objects_GameObject.prototype.make_body.call(this,options,groups,body_as_parent);
	}
	,destroy: function(_) {
		states_PlayState.i.poofs.get().fire({ position : zero_utilities_Vec2.from_array_float([this.body.transform.local_x,this.body.transform.local_y])});
		objects_GameObject.prototype.destroy.call(this);
	}
});
var objects_BallAndChain = function(x,y,links) {
	this.chain_length = 0.001;
	this.chain_angle = 270;
	this.offset = zero_utilities_Vec2.get(0,0.001);
	this.chain = [];
	objects_Hazard.call(this);
	this.origin = zero_utilities_Vec2.get(x,y);
	this.make_body({ shape : { type : 1, radius : 5}, mass : 0},null,false);
	this.make_chain(links);
	states_PlayState.i.poofs.get().fire({ position : zero_utilities_Vec2.from_array_float([x,y])});
};
objects_BallAndChain.__name__ = true;
objects_BallAndChain.__super__ = objects_Hazard;
objects_BallAndChain.prototype = $extend(objects_Hazard.prototype,{
	make_chain: function(links) {
		var textures = util_GraphicUtil_textures_from_spritesheet("assets/ball_and_chain.png",3,1,12,12);
		var _g = 0;
		while(_g < textures.length) textures[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		textures.unshift(textures.pop());
		while(textures.length < links) textures.push(textures[textures.length - 1]);
		textures.push(textures.shift());
		var _g = 0;
		while(_g < textures.length) {
			var sprite = PIXI.Sprite.from(textures[_g++]);
			sprite.anchor.set(0.5);
			this.chain.push(sprite);
			this.addChild(sprite);
		}
	}
	,update: function(dt) {
		objects_Hazard.prototype.update.call(this,dt);
		var this1 = this.offset;
		var v = this.chain_angle;
		v *= Math.PI / 180;
		var len = Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]);
		var x = len * Math.cos(v);
		var y = len * Math.sin(v);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
		var this1 = this.offset;
		var v = this.chain_length;
		var x = this1[0] / Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]);
		var y = this1[1] / Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
		var x = this1[0] * v;
		var y = this1[1] * v;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
		var _g = 0;
		var _g1 = this.chain.length;
		while(_g < _g1) {
			var i = _g++;
			var link = this.chain[i];
			var this1 = this.offset;
			var pos = zero_utilities_Vec2.get(this1[0],this1[1]);
			var v = Math.sqrt(pos[0] * pos[0] + pos[1] * pos[1]) * Math.max(i,0.001);
			var x = pos[0] / Math.sqrt(pos[0] * pos[0] + pos[1] * pos[1]);
			var y = pos[1] / Math.sqrt(pos[0] * pos[0] + pos[1] * pos[1]);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(y);
			var x1 = pos[0] * v;
			var y1 = pos[1] * v;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x1);
			pos[1] = zero_utilities_Vec2.zero(y1);
			pos = zero_utilities_Vec2.add(pos,this.origin);
			link.position.set(Math.round(pos[0]),Math.round(pos[1]));
			if(i == this.chain.length - 1) {
				this.body.set_position(pos[0],pos[1]);
			}
			zero_utilities_Vec2.pool.push(pos);
			pos = null;
		}
		this.chain_angle += 144. * dt;
		this.chain_length += (6 - this.chain_length) * 0.025;
	}
});
var objects_Box = function(x,y) {
	this.anim_speed = 0.1;
	this.anim_timer = 0;
	this.counter = 0;
	this.idx = 0;
	this.textures = util_GraphicUtil_textures_from_spritesheet("assets/box.png",3,2,16,16);
	objects_GameObject.call(this);
	this.make_body({ shape : { type : 0, width : 12, height : 12}, x : x, y : y},[states_PlayState.i.pickups]);
	this.get_acceleration().y = 0;
	this.make_graphic();
};
objects_Box.__name__ = true;
objects_Box.__super__ = objects_GameObject;
objects_Box.prototype = $extend(objects_GameObject.prototype,{
	make_graphic: function() {
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) _g1[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		this.sprite = PIXI.Sprite.from(this.textures[0]);
		this.sprite.anchor.set(0.5);
		this.glow = PIXI.Sprite.from("assets/box_glow.png");
		this.glow.anchor.set(0.5);
		this.glow.scale.set(0.2);
		this.glow.blendMode = PIXI.BLEND_MODES.OVERLAY;
		this.glow.alpha = 0.5;
		this.addChild(this.glow);
		this.addChild(this.sprite);
		this.scale.set(0);
	}
	,update: function(dt) {
		objects_GameObject.prototype.update.call(this,dt);
		this.counter += dt;
		if((this.anim_timer -= dt) <= 0) {
			this.anim_timer = this.anim_speed;
			this.idx = (this.idx + 1) % 6;
			this.sprite.texture = this.textures[this.idx];
		}
		this.glow.rotation += 0.05;
		var t1 = (Math.sin(this.counter) - (-1)) / 2;
		this.glow.alpha = (1 - t1) * 0.3 + t1 * 0.5;
		this.scale.x += (1 - this.scale.x) * 0.1;
		this.scale.y += (1 - this.scale.y) * 0.1;
	}
	,destroy: function(_) {
		states_PlayState.i.poofs.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y])});
		objects_GameObject.prototype.destroy.call(this);
	}
});
var objects_Facing = $hxEnums["objects.Facing"] = { __ename__:true,__constructs__:null
	,LEFT: {_hx_name:"LEFT",_hx_index:0,__enum__:"objects.Facing",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:1,__enum__:"objects.Facing",toString:$estr}
};
objects_Facing.__constructs__ = [objects_Facing.LEFT,objects_Facing.RIGHT];
objects_Facing.__empty_constructs__ = [objects_Facing.LEFT,objects_Facing.RIGHT];
var objects_Player = function(x,y) {
	this.start_timer = 3;
	this.particle_timer = 0;
	this.health = util_Constants_HEALTH;
	this.last_touching = 0;
	this.last_vel_y = 0;
	this.last_vel_x = 0;
	this.high_jump_amt = 0;
	this.rotation_speed = 0;
	this.heading_up = false;
	this.can_double_jump = false;
	this.just_jumped_timer = 0;
	this.jump_timer = 0;
	this.power = objects_Power.JUMP;
	objects_GameObject.call(this);
	this.position.set(x,y);
	this.make_body({ shape : { type : 0, width : 6, height : 12}, x : x, y : y},[states_PlayState.i.physics_objects,states_PlayState.i.player_bodies]);
	this.make_graphic();
	this.reset_powers();
	this.flash_timer = 4;
	Main.game_events.dispatch(GameEvents.PLAYER_HEALTH,{ health : this.health});
};
objects_Player.__name__ = true;
objects_Player.__super__ = objects_GameObject;
objects_Player.prototype = $extend(objects_GameObject.prototype,{
	reset_powers: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = objects_Power.__empty_constructs__.slice();
		while(_g1 < _g2.length) _g.push(_g2[_g1++]);
		this.powers = _g;
		HxOverrides.remove(this.powers,objects_Power.JUMP);
		HxOverrides.remove(this.powers,this.power);
		zero_extensions_ArrayExt.shuffle(this.powers);
	}
	,make_graphic: function() {
		var _gthis = this;
		var textures = util_GraphicUtil_textures_from_spritesheet("assets/player.png",8,8,24,24);
		var _g = 0;
		while(_g < textures.length) textures[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		this.sprite = new PIXI.Sprite();
		this.sprite.anchor.set(0.5,0.75);
		this.animations = new zero_utilities_AnimationManager({ on_frame_change : function(n) {
			_gthis.sprite.texture = textures[n];
		}});
		this.animations.add({ name : "idle", frames : [0]});
		this.animations.add({ name : "jump", frames : [7]});
		this.animations.add({ name : "fall", frames : [8]});
		this.animations.add({ name : "walk", frames : [1,1,2,3,4,4,5,6], duration : 0.5});
		this.animations.add({ name : "walk_jetpack", frames : [13,13,14,15,16,16,17,18], duration : 0.5});
		this.animations.add({ name : "jump_jetpack", frames : [19]});
		this.animations.add({ name : "fall_jetpack", frames : [20]});
		this.animations.add({ name : "float_fall", frames : [21,22,23,24,25,26], duration : 0.3});
		this.animations.add({ name : "flip", frames : [9,10,11,12], duration : 0.1});
		this.animations.add({ name : "ball", frames : [27]});
		this.animations.add({ name : "zero_g_out", frames : [28]});
		this.animations.add({ name : "zero_g_in", frames : [29]});
		this.animations.add({ name : "pogo_up", frames : [30]});
		this.animations.add({ name : "pogo_down", frames : [31,32,33], duration : 0.25});
		var tmp = this.animations;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 32) _g.push(_g1++ % 3 + 34);
		tmp.add({ name : "charge", frames : _g, duration : util_Constants_HIGH_JUMP_CHARGE_TIME, ease : zero_utilities_Ease.quadOut, type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS, on_complete : function() {
			states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([_gthis.x,_gthis.y]), velocity : zero_utilities_Vec2.from_array_int([-80,-80])});
			states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([_gthis.x,_gthis.y]), velocity : zero_utilities_Vec2.from_array_int([80,-80])});
		}});
		this.animations.add({ name : "dash", frames : [37,38,39], duration : 0.15, type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS});
		this.addChild(this.sprite);
	}
	,get_new_power: function() {
		this.set_power(this.powers.pop());
		var sound;
		switch(this.power._hx_index) {
		case 0:
			sound = util_Sound.JUMP;
			break;
		case 1:
			sound = util_Sound.DOUBLE_JUMP;
			break;
		case 2:
			sound = util_Sound.JETPACK;
			break;
		case 3:
			sound = util_Sound.GLIDE;
			break;
		case 4:
			sound = util_Sound.GRAVITY_FLIP;
			break;
		case 5:
			sound = util_Sound.PING_PONG;
			break;
		case 6:
			sound = util_Sound.PARKOUR;
			break;
		case 7:
			sound = util_Sound.POGO;
			break;
		case 8:
			sound = util_Sound.ZERO_GRAVITY;
			break;
		case 9:
			sound = util_Sound.HIGH_JUMP;
			break;
		}
		if(sound != util_Sound.JUMP) {
			util_Audio.play(sound);
		}
		this.flash_timer = util_Constants_POWERUP_INVULNERABILITY_PERIOD;
		Main.game_events.dispatch(GameEvents.NEW_POWER,{ power : this.power});
		if(this.powers.length == 0) {
			this.reset_powers();
		}
	}
	,set_power: function(p) {
		this.power = p;
		this.scale.y = 1;
		var _this = this.body;
		var _this1 = _this.transform;
		if(!_this1.dirty) {
			_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
			var _g = 0;
			var _g1 = _this1.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
				var _g2 = 0;
				var _g11 = child.children;
				while(_g2 < _g11.length) _g11[_g2++].set_dirty(true);
				if(child.on_dirty != null) {
					child.on_dirty(child);
				}
			}
			if(_this1.on_dirty != null) {
				_this1.on_dirty(_this1);
			}
		}
		_this1.local_rotation = 0;
		if(_this.on_rotate != null) {
			_this.on_rotate(_this.transform.local_rotation);
		}
		this.rotation = _this.transform.local_rotation;
		this.get_acceleration().y = util_Constants_GRAVITY;
		this.heading_up = false;
		this.match_rotation = true;
		return this.power;
	}
	,update: function(dt) {
		objects_GameObject.prototype.update.call(this,dt);
		this.controls(dt);
		this.animation(dt);
	}
	,controls: function(dt) {
		switch(this.power._hx_index) {
		case 0:
			this.jump(dt);
			break;
		case 1:
			this.double_jump(dt);
			break;
		case 2:
			this.jetpack(dt);
			break;
		case 3:
			this.glide(dt);
			break;
		case 4:
			this.grav_flip(dt);
			break;
		case 5:
			this.ping_pong(dt);
			break;
		case 6:
			this.parkour(dt);
			break;
		case 7:
			this.pogo(dt);
			break;
		case 8:
			this.zero_gravity(dt);
			break;
		case 9:
			this.high_jump(dt);
			break;
		}
		if(this.get_velocity().x != 0) {
			this.last_vel_x = this.get_velocity().x;
		}
		if(this.get_velocity().y != 0) {
			this.last_vel_y = this.get_velocity().y;
		}
		this.last_touching = this.touching;
	}
	,walk: function(dt,ignore_if_jumping) {
		if(ignore_if_jumping == null) {
			ignore_if_jumping = true;
		}
		if(this.start_timer > 0 && (this.start_timer -= dt) > 0) {
			this.get_velocity().x = 0;
			return;
		}
		var tmp = this.facing == objects_Facing.LEFT ? -util_Constants_WALK_SPEED : util_Constants_WALK_SPEED;
		this.get_velocity().x = tmp;
		if(this.get_touching_left() && this.get_touching_floor() || this.get_touching_left() && (!ignore_if_jumping || this.get_velocity().y > 0)) {
			this.facing = objects_Facing.RIGHT;
		}
		if(this.get_touching_right() && this.get_touching_floor() || this.get_touching_right() && (!ignore_if_jumping || this.get_velocity().y > 0)) {
			this.facing = objects_Facing.LEFT;
		}
	}
	,jump: function(dt,ignore_if_jumping) {
		if(ignore_if_jumping == null) {
			ignore_if_jumping = true;
		}
		this.walk(dt,ignore_if_jumping);
		this.jump_timer = Math.max(this.jump_timer -= dt,0);
		this.just_jumped_timer = Math.max(this.just_jumped_timer -= dt,0);
		if(util_Pointer.get_just_pressed()) {
			this.just_jumped_timer = util_Constants_COYOTE_TIME;
		}
		if(util_Pointer.get_just_released() && this.get_velocity().y < 0) {
			this.get_velocity().y *= util_Constants_JUMP_DAMPNER;
		}
		if(this.get_touching_floor()) {
			this.jump_timer = util_Constants_COYOTE_TIME;
		}
		if(this.jump_timer > 0 && this.just_jumped_timer > 0) {
			util_Audio.play(util_Sound.SFX_JUMP);
			this.get_velocity().y = -util_Constants_JUMP_POWER;
			this.jump_timer = this.just_jumped_timer = 0;
			return true;
		}
		return false;
	}
	,double_jump: function(dt) {
		if(!this.jump(dt) && util_Pointer.get_just_pressed() && this.can_double_jump) {
			this.get_velocity().y = -util_Constants_JUMP_POWER;
			this.jump_timer = this.just_jumped_timer = 0;
			this.can_double_jump = false;
			states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y]), velocity : zero_utilities_Vec2.from_array_int([0,80])});
			util_Audio.play(util_Sound.SFX_DOUBLE_JUMP);
		}
		if(this.get_touching_floor()) {
			this.can_double_jump = true;
		}
	}
	,jetpack: function(dt) {
		this.walk(dt,false);
		if(util_Pointer.pressed) {
			this.get_acceleration().y = util_Constants_JETPACK_ACCELERATION;
			if((this.particle_timer -= dt) <= 0) {
				this.particle_timer = 0.1;
				var min = -20;
				states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y]), velocity : zero_utilities_Vec2.from_array_float([min + Math.random() * (20 - min),150])});
				util_Audio.play(util_Sound.SFX_BOOST);
			}
		} else {
			this.get_acceleration().y = util_Constants_GRAVITY;
		}
		if(this.get_touching_cieling()) {
			this.get_velocity().y = util_Constants_JETPACK_BUMP_AMT;
		}
	}
	,glide: function(dt) {
		this.jump(dt,false);
		if(util_Pointer.pressed) {
			this.get_velocity().y = Math.min(this.get_velocity().y,util_Constants_GLIDE_MAX_VEL_Y);
			if(this.get_velocity().y > 0 && !this.get_touching_floor() && (this.particle_timer -= dt) <= 0) {
				this.particle_timer = 0.1;
				var min = -6;
				states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y + (min + Math.random() * (6 - min))]), velocity : zero_utilities_Vec2.from_array_int([this.facing == objects_Facing.LEFT ? 64 : -64,0])});
				util_Audio.play(util_Sound.SFX_TWINKLE);
			}
		}
	}
	,grav_flip: function(dt) {
		this.walk(dt,false);
		if(util_Pointer.get_just_pressed()) {
			this.get_acceleration().y = -this.get_acceleration().y;
			util_Audio.play(util_Sound.SFX_GRAV_SHIFT);
		}
	}
	,ping_pong: function(dt) {
		this.get_acceleration().y = 0;
		var self = this.get_velocity();
		self.x = this.facing == objects_Facing.LEFT ? -util_Constants_WALK_SPEED : util_Constants_WALK_SPEED;
		self.y = this.heading_up ? -util_Constants_WALK_SPEED : util_Constants_WALK_SPEED;
		if(this.get_touching_floor()) {
			this.heading_up = true;
		}
		if(this.get_touching_cieling()) {
			this.heading_up = false;
		}
		if(this.get_touching_left()) {
			this.facing = objects_Facing.RIGHT;
		}
		if(this.get_touching_right()) {
			this.facing = objects_Facing.LEFT;
		}
		if(this.touching != 0) {
			util_Audio.play(util_Sound.SFX_PONG);
		}
		if(util_Pointer.get_just_pressed()) {
			this.heading_up = !this.heading_up;
			util_Audio.play(util_Sound.SFX_PONG_HIT);
		}
	}
	,pogo: function(dt) {
		var target = this.facing == objects_Facing.LEFT ? util_Pointer.pressed && this.get_velocity().y > 0 ? -util_Constants_POGO_MIN_WALK_SPEED : -util_Constants_WALK_SPEED : util_Pointer.pressed && this.get_velocity().y > 0 ? util_Constants_POGO_MIN_WALK_SPEED : util_Constants_WALK_SPEED;
		this.get_velocity().x += (target - this.get_velocity().x) * 0.2;
		if(this.get_touching_left()) {
			this.facing = objects_Facing.RIGHT;
		}
		if(this.get_touching_right()) {
			this.facing = objects_Facing.LEFT;
		}
		if(this.get_touching_floor()) {
			util_Audio.play(util_Sound.SFX_POGO);
			var tmp = util_Pointer.pressed ? -util_Constants_POGO_MAX_JUMP_FORCE : -util_Constants_POGO_BOUNCE_FORCE;
			this.get_velocity().y = tmp;
		}
		if(this.get_velocity().y > 0 && util_Pointer.pressed) {
			this.get_velocity().y *= 1.1;
		}
		if(this.get_velocity().y < 0 && util_Pointer.get_just_released()) {
			this.get_velocity().y *= util_Constants_JUMP_DAMPNER;
		}
		if(this.get_touching_floor() && util_Pointer.pressed) {
			states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y + 6]), velocity : zero_utilities_Vec2.from_array_int([-100,-80])});
			states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y + 6]), velocity : zero_utilities_Vec2.from_array_int([100,-80])});
		}
	}
	,zero_gravity: function(dt) {
		this.match_rotation = false;
		this.get_acceleration().y = 0;
		this.rotation_speed = util_Pointer.pressed ? 0 : this.rotation_speed + (util_Constants_ZERO_G_ROTATION_SPEED - this.rotation_speed) * 0.1;
		this.rotation += this.rotation_speed;
		var max = Math.PI * 2;
		this.rotation = (this.rotation % max + max) % max;
		var vel = zero_utilities_Vec2.get(this.get_velocity().x,this.get_velocity().y);
		if(Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]) == 0) {
			vel[0] = 0.01;
		}
		var v = this.rotation - Math.PI / 2;
		var len = Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]);
		var x = len * Math.cos(v);
		var y = len * Math.sin(v);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		vel[0] = zero_utilities_Vec2.zero(x);
		vel[1] = zero_utilities_Vec2.zero(y);
		var v = Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]) + ((util_Pointer.pressed ? util_Constants_ZERO_G_BOOST_SPEED : 0.01) - Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1])) * (util_Pointer.pressed ? 0.2 : 0.1);
		var x = vel[0] / Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]);
		var y = vel[1] / Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		vel[0] = zero_utilities_Vec2.zero(x);
		vel[1] = zero_utilities_Vec2.zero(y);
		var x = vel[0] * v;
		var y = vel[1] * v;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		vel[0] = zero_utilities_Vec2.zero(x);
		vel[1] = zero_utilities_Vec2.zero(y);
		var self = this.get_velocity();
		self.x = vel[0];
		self.y = vel[1];
		zero_utilities_Vec2.pool.push(vel);
		vel = null;
		if(this.get_touching_cieling()) {
			this.get_velocity().y = Math.abs(this.last_vel_y);
		}
		if(this.get_touching_floor()) {
			this.get_velocity().y = -Math.abs(this.last_vel_y);
		}
		if(this.get_touching_left()) {
			this.get_velocity().x = Math.abs(this.last_vel_x);
		}
		if(this.get_touching_right()) {
			this.get_velocity().x = -Math.abs(this.last_vel_x);
		}
		if(this.get_touching_cieling() || this.get_touching_floor() || this.get_touching_left() || this.get_touching_right()) {
			var self = this.get_velocity();
			this.rotation = Math.atan2(self.y,self.x) + Math.PI / 2;
		}
		if(util_Pointer.pressed) {
			if((this.particle_timer -= dt) <= 0) {
				this.particle_timer = 0.1;
				var v = zero_utilities_Vec2.get(100,0);
				var v1 = this.rotation + Math.PI / 2 + (-0.2 + Math.random() * 0.4);
				var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
				var x = len * Math.cos(v1);
				var y = len * Math.sin(v1);
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				v[0] = zero_utilities_Vec2.zero(x);
				v[1] = zero_utilities_Vec2.zero(y);
				states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y]), velocity : v});
				util_Audio.play(util_Sound.SFX_BOOST);
			}
		}
	}
	,high_jump: function(dt) {
		if(util_Pointer.get_just_pressed() && this.get_touching_floor() || util_Pointer.pressed && this.get_touching_floor() && this.last_touching == 0) {
			util_Audio.play(util_Sound.SFX_CHARGE);
		}
		if(util_Pointer.get_just_released() && this.get_touching_floor()) {
			util_Audio.stop(util_Sound.SFX_CHARGE);
			util_Audio.play(util_Sound.SFX_DOUBLE_JUMP);
			var t1 = Math.min(this.high_jump_amt,util_Constants_HIGH_JUMP_CHARGE_TIME) / util_Constants_HIGH_JUMP_CHARGE_TIME;
			var tmp = (1 - t1) * util_Constants_HIGH_JUMP_MIN_FORCE + t1 * util_Constants_HIGH_JUMP_MAX_FORCE;
			this.get_velocity().y = -tmp;
		}
		this.high_jump_amt = util_Pointer.pressed && this.get_touching_floor() ? this.high_jump_amt + dt : 0;
		var tmp = util_Pointer.pressed ? 0 : this.facing == objects_Facing.LEFT ? -util_Constants_WALK_SPEED : util_Constants_WALK_SPEED;
		this.get_velocity().x = tmp;
		if(this.get_touching_left() && this.get_touching_floor() || this.get_touching_left() && this.get_velocity().y > 0) {
			this.facing = objects_Facing.RIGHT;
		}
		if(this.get_touching_right() && this.get_touching_floor() || this.get_touching_right() && this.get_velocity().y > 0) {
			this.facing = objects_Facing.LEFT;
		}
	}
	,parkour: function(dt) {
		var target = this.facing == objects_Facing.LEFT ? -util_Constants_WALK_SPEED : util_Constants_WALK_SPEED;
		var n = this.get_velocity().x += (target - this.get_velocity().x) * 0.1;
		if((n > 0 ? 1 : n < 0 ? -1 : 0) != (target > 0 ? 1 : target < 0 ? -1 : 0)) {
			this.get_velocity().x = target;
		}
		if(util_Pointer.get_just_pressed()) {
			util_Audio.play(util_Sound.SFX_DASH);
			var tmp = this.facing == objects_Facing.LEFT ? -util_Constants_PARKOUR_DASH_SPEED : util_Constants_PARKOUR_DASH_SPEED;
			this.get_velocity().x = tmp;
			if(this.get_touching_wall()) {
				this.get_velocity().x *= -1;
				this.facing = this.facing == objects_Facing.LEFT ? objects_Facing.RIGHT : objects_Facing.LEFT;
			}
		}
		var tmp = this.get_dashing() ? 0 : this.get_touching_wall() ? -util_Constants_WALK_SPEED : this.get_velocity().y;
		this.get_velocity().y = tmp;
		if(this.get_touching_cieling() && this.get_touching_wall()) {
			var fh = this.body;
			var value = fh.transform.local_y + 4;
			var _this = fh.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g11 = child.children;
					while(_g2 < _g11.length) _g11[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = value;
			if(fh.on_move != null) {
				fh.on_move(fh.transform.local_x,fh.transform.local_y);
			}
			this.facing = this.facing == objects_Facing.LEFT ? objects_Facing.RIGHT : objects_Facing.LEFT;
		}
		var tmp = this.get_dashing() ? 0 : util_Constants_GRAVITY;
		this.get_acceleration().y = tmp;
		if(this.get_touching_wall() && UInt.gt(this.last_touching & 4096,0)) {
			var fh = this.body;
			var value = fh.transform.local_y + 2;
			var _this = fh.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g11 = child.children;
					while(_g2 < _g11.length) _g11[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_y = value;
			if(fh.on_move != null) {
				fh.on_move(fh.transform.local_x,fh.transform.local_y);
			}
			var fh = this.body;
			var value = fh.transform.local_x + (this.facing == objects_Facing.LEFT ? -2 : 2);
			var _this = fh.transform;
			if(!_this.dirty) {
				_this.dirty = _this.inverse_dirty = _this.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g11 = child.children;
					while(_g2 < _g11.length) _g11[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this.on_dirty != null) {
					_this.on_dirty(_this);
				}
			}
			_this.local_x = value;
			if(fh.on_move != null) {
				fh.on_move(fh.transform.local_x,fh.transform.local_y);
			}
		}
		if(this.get_dashing()) {
			if((this.particle_timer -= dt) <= 0) {
				this.particle_timer = 0.1;
				var min = -6;
				states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y + (min + Math.random() * (6 - min))])});
			}
		}
	}
	,get_dashing: function() {
		return Math.abs(this.get_velocity().x) - util_Constants_PARKOUR_DASH_THRESHOLD > util_Constants_WALK_SPEED;
	}
	,animation: function(dt) {
		switch(this.power._hx_index) {
		case 0:case 1:
			if(this.get_touching_floor()) {
				if(this.get_velocity().x == 0) {
					this.animations.play("idle",0,true);
				} else {
					this.animations.play("walk");
				}
			} else if(this.get_velocity().y > 0) {
				this.animations.play("fall",0,true);
			} else {
				this.animations.play("jump",0,true);
			}
			break;
		case 2:
			if(this.get_touching_floor()) {
				this.animations.play("walk_jetpack");
			} else if(this.get_velocity().y > 0) {
				this.animations.play("fall_jetpack",0,true);
			} else {
				this.animations.play("jump_jetpack",0,true);
			}
			break;
		case 3:
			if(this.get_touching_floor()) {
				if(this.get_velocity().x == 0) {
					this.animations.play("idle",0,true);
				} else {
					this.animations.play("walk");
				}
			} else if(this.get_velocity().y > 0) {
				if(util_Pointer.pressed) {
					this.animations.play("float_fall");
				} else {
					this.animations.play("fall",0,true);
				}
			} else {
				this.animations.play("jump",0,true);
			}
			break;
		case 4:
			if(this.get_touching_floor() || this.get_touching_cieling()) {
				if(this.get_velocity().x == 0) {
					this.animations.play("idle",0,true);
				} else {
					this.animations.play("walk");
				}
			} else {
				this.animations.play("fall",0,true);
			}
			if(this.get_velocity().y != 0) {
				var n = this.get_velocity().y;
				this.scale.y = n > 0 ? 1 : n < 0 ? -1 : 0;
			}
			break;
		case 5:
			this.animations.play("ball");
			var n = this.get_velocity().y;
			this.scale.y = -(n > 0 ? 1 : n < 0 ? -1 : 0);
			break;
		case 6:
			var _this = this.body;
			var value = this.get_touching_left() ? 90 : this.get_touching_right() ? -90 : 0;
			var _this1 = _this.transform;
			if(!_this1.dirty) {
				_this1.dirty = _this1.inverse_dirty = _this1.coordinates_dirty = true;
				var _g = 0;
				var _g1 = _this1.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.dirty = child.inverse_dirty = child.coordinates_dirty = true;
					var _g2 = 0;
					var _g11 = child.children;
					while(_g2 < _g11.length) _g11[_g2++].set_dirty(true);
					if(child.on_dirty != null) {
						child.on_dirty(child);
					}
				}
				if(_this1.on_dirty != null) {
					_this1.on_dirty(_this1);
				}
			}
			_this1.local_rotation = value;
			if(_this.on_rotate != null) {
				_this.on_rotate(_this.transform.local_rotation);
			}
			if(this.get_dashing()) {
				this.animations.play("dash");
			} else if(this.get_touching_floor() || this.get_touching_left() || this.get_touching_right()) {
				this.animations.play("walk");
			} else {
				this.animations.play("fall");
			}
			break;
		case 7:
			if(this.get_velocity().y < 0) {
				this.animations.play("pogo_up");
			} else {
				this.animations.play("pogo_down");
			}
			break;
		case 8:
			if(util_Pointer.pressed) {
				this.animations.play("zero_g_out");
			} else {
				this.animations.play("zero_g_in");
			}
			break;
		case 9:
			if(this.get_touching_floor()) {
				if(this.get_velocity().x == 0) {
					this.animations.play("charge");
				} else {
					this.animations.play("walk");
				}
			} else if(this.get_velocity().y > 0) {
				this.animations.play("fall",0,true);
			} else {
				this.animations.play("jump",0,true);
			}
			break;
		}
		this.scale.x = this.facing == objects_Facing.LEFT ? -1 : 1;
	}
	,hurt: function() {
		if(this.flash_timer > 0) {
			return;
		}
		util_Audio.play(util_Sound.SFX_HURT);
		var v = zero_utilities_Vec2.get(150,0);
		var v1 = 45;
		v1 *= Math.PI / 180;
		var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
		var x = len * Math.cos(v1);
		var y = len * Math.sin(v1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		v[0] = zero_utilities_Vec2.zero(x);
		v[1] = zero_utilities_Vec2.zero(y);
		states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.body.transform.local_x,this.body.transform.local_y]), velocity : v});
		var v = zero_utilities_Vec2.get(150,0);
		var v1 = 135;
		v1 *= Math.PI / 180;
		var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
		var x = len * Math.cos(v1);
		var y = len * Math.sin(v1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		v[0] = zero_utilities_Vec2.zero(x);
		v[1] = zero_utilities_Vec2.zero(y);
		states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.body.transform.local_x,this.body.transform.local_y]), velocity : v});
		var v = zero_utilities_Vec2.get(150,0);
		var v1 = 225;
		v1 *= Math.PI / 180;
		var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
		var x = len * Math.cos(v1);
		var y = len * Math.sin(v1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		v[0] = zero_utilities_Vec2.zero(x);
		v[1] = zero_utilities_Vec2.zero(y);
		states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.body.transform.local_x,this.body.transform.local_y]), velocity : v});
		var v = zero_utilities_Vec2.get(150,0);
		var v1 = 315;
		v1 *= Math.PI / 180;
		var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
		var x = len * Math.cos(v1);
		var y = len * Math.sin(v1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		v[0] = zero_utilities_Vec2.zero(x);
		v[1] = zero_utilities_Vec2.zero(y);
		states_PlayState.i.stars.get().fire({ position : zero_utilities_Vec2.from_array_float([this.body.transform.local_x,this.body.transform.local_y]), velocity : v});
		this.flash_timer = util_Constants_INVULNERABILITY_PERIOD;
		this.health -= 1;
		Main.game_events.dispatch(GameEvents.PLAYER_HEALTH,{ health : this.health});
		if(this.health > 0) {
			new ui_PulseSprite(this.sprite);
		}
		if(this.health > 0) {
			return;
		}
		this.alive = false;
		states_PlayState.i.dead_players.get().fire({ position : zero_utilities_Vec2.from_array_float([this.x,this.y])});
		this.destroy();
		zero_utilities_Timer.get(1,function() {
			states_PlayState.i.game_over();
		});
	}
	,__properties__: $extend(objects_GameObject.prototype.__properties__,{get_dashing:"get_dashing",set_power:"set_power"})
});
var objects_Power = $hxEnums["objects.Power"] = { __ename__:true,__constructs__:null
	,JUMP: {_hx_name:"JUMP",_hx_index:0,__enum__:"objects.Power",toString:$estr}
	,DOUBLE_JUMP: {_hx_name:"DOUBLE_JUMP",_hx_index:1,__enum__:"objects.Power",toString:$estr}
	,JETPACK: {_hx_name:"JETPACK",_hx_index:2,__enum__:"objects.Power",toString:$estr}
	,GLIDE: {_hx_name:"GLIDE",_hx_index:3,__enum__:"objects.Power",toString:$estr}
	,GRAVITY_FLIP: {_hx_name:"GRAVITY_FLIP",_hx_index:4,__enum__:"objects.Power",toString:$estr}
	,PING_PONG: {_hx_name:"PING_PONG",_hx_index:5,__enum__:"objects.Power",toString:$estr}
	,PARKOUR: {_hx_name:"PARKOUR",_hx_index:6,__enum__:"objects.Power",toString:$estr}
	,POGO: {_hx_name:"POGO",_hx_index:7,__enum__:"objects.Power",toString:$estr}
	,ZERO_GRAVITY: {_hx_name:"ZERO_GRAVITY",_hx_index:8,__enum__:"objects.Power",toString:$estr}
	,HIGH_JUMP: {_hx_name:"HIGH_JUMP",_hx_index:9,__enum__:"objects.Power",toString:$estr}
};
objects_Power.__constructs__ = [objects_Power.JUMP,objects_Power.DOUBLE_JUMP,objects_Power.JETPACK,objects_Power.GLIDE,objects_Power.GRAVITY_FLIP,objects_Power.PING_PONG,objects_Power.PARKOUR,objects_Power.POGO,objects_Power.ZERO_GRAVITY,objects_Power.HIGH_JUMP];
objects_Power.__empty_constructs__ = [objects_Power.JUMP,objects_Power.DOUBLE_JUMP,objects_Power.JETPACK,objects_Power.GLIDE,objects_Power.GRAVITY_FLIP,objects_Power.PING_PONG,objects_Power.PARKOUR,objects_Power.POGO,objects_Power.ZERO_GRAVITY,objects_Power.HIGH_JUMP];
var objects_RollingBall = function(x,y) {
	this.timer = 0;
	this.idx = 0;
	this.textures = util_GraphicUtil_textures_from_spritesheet("assets/rolling_ball.png",3,2,18,18);
	objects_Hazard.call(this);
	this.make_body({ shape : { type : 1, radius : 8}, x : x, y : y},[states_PlayState.i.hazards,states_PlayState.i.physics_objects]);
	this.get_acceleration().y = util_Constants_GRAVITY * 0.5;
	this.facing = objects_Facing.RIGHT;
	this.make_graphic();
};
objects_RollingBall.__name__ = true;
objects_RollingBall.__super__ = objects_Hazard;
objects_RollingBall.prototype = $extend(objects_Hazard.prototype,{
	make_graphic: function() {
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) _g1[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		this.sprite = new PIXI.Sprite();
		this.sprite.anchor.set(0.5,0.5);
		this.addChild(this.sprite);
	}
	,update: function(dt) {
		objects_Hazard.prototype.update.call(this,dt);
		if(this.get_touching_floor()) {
			this.get_velocity().y = -util_Constants_ROLLING_BALL_BOUNCE_FORCE;
		}
		if(this.get_touching_left()) {
			this.facing = objects_Facing.RIGHT;
		}
		if(this.get_touching_right()) {
			this.facing = objects_Facing.LEFT;
		}
		if(this.touching != 0) {
			util_Audio.play(util_Sound.SFX_BOUNCE);
		}
		var tmp = this.facing == objects_Facing.LEFT ? -util_Constants_ROLLING_BALL_X_SPEED : util_Constants_ROLLING_BALL_X_SPEED;
		this.get_velocity().x = tmp;
		this.scale.x = this.facing == objects_Facing.LEFT ? -1 : 1;
		if((this.timer -= dt) > 0) {
			return;
		}
		this.sprite.texture = this.textures[this.idx++ % 6];
		this.timer = 0.1;
	}
});
var objects_SawBlade = function(x,y,nodes) {
	this.idx = 0;
	this.anim_timer = 0;
	objects_Hazard.call(this);
	this.nodes = [zero_utilities_Vec2.get(x,y)];
	var _g = 0;
	while(_g < nodes.length) {
		var node = nodes[_g];
		++_g;
		this.nodes.push(zero_utilities_Vec2.get(node.x,node.y));
	}
	this.make_body({ shape : { type : 1, radius : 6}, x : x, y : y});
	this.get_acceleration().y = 0;
	this.make_graphic();
	this.get_target();
	states_PlayState.i.poofs.get().fire({ position : zero_utilities_Vec2.from_array_float([x,y])});
};
objects_SawBlade.__name__ = true;
objects_SawBlade.__super__ = objects_Hazard;
objects_SawBlade.prototype = $extend(objects_Hazard.prototype,{
	make_graphic: function() {
		this.textures = util_GraphicUtil_textures_from_spritesheet("assets/saw_blade.png",2,2,16,16);
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) _g1[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		this.sprite = PIXI.Sprite.from(this.textures[0]);
		this.sprite.anchor.set(0.5);
		this.addChild(this.sprite);
	}
	,get_target: function() {
		if(this.target != null) {
			this.body.set_position(this.target[0],this.target[1]);
		}
		this.target = this.nodes.shift();
		this.nodes.push(this.target);
	}
	,update: function(dt) {
		objects_Hazard.prototype.update.call(this,dt);
		var pos = zero_utilities_Vec2.get(this.body.transform.local_x,this.body.transform.local_y);
		var this2 = zero_utilities_Vec2.subtract(this.target,zero_utilities_Vec2.from_array_float(pos));
		if(Math.sqrt(this2[0] * this2[0] + this2[1] * this2[1]) < 0.5) {
			this.get_target();
		}
		var vel = zero_utilities_Vec2.subtract(this.target,pos);
		var v = util_Constants_SAWBLADE_SPEED;
		var x = vel[0] / Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]);
		var y = vel[1] / Math.sqrt(vel[0] * vel[0] + vel[1] * vel[1]);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		vel[0] = zero_utilities_Vec2.zero(x);
		vel[1] = zero_utilities_Vec2.zero(y);
		var x = vel[0] * v;
		var y = vel[1] * v;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		vel[0] = zero_utilities_Vec2.zero(x);
		vel[1] = zero_utilities_Vec2.zero(y);
		var self = this.get_velocity();
		self.x = vel[0];
		self.y = vel[1];
		zero_utilities_Vec2.pool.push(pos);
		pos = null;
		zero_utilities_Vec2.pool.push(vel);
		vel = null;
		if((this.anim_timer -= dt) <= 0) {
			this.anim_timer = 0.025;
			this.sprite.texture = this.textures[this.idx++ % 3];
		}
	}
});
var objects_Spikes = function(x,y) {
	this.spikes_up = false;
	var _gthis = this;
	objects_Hazard.call(this);
	this.make_body({ shape : { type : 0, width : 16, height : 4}, x : x, y : y});
	this.make_graphic();
	this.get_acceleration().y = 0;
	this.set_spikes_up(true);
	this.timer = zero_utilities_Timer.get(util_Constants_SPIKES_TIMER,function() {
		_gthis.set_spikes_up(!_gthis.spikes_up);
	},999);
	states_PlayState.i.poofs.get().fire({ position : zero_utilities_Vec2.from_array_float([x,y])});
};
objects_Spikes.__name__ = true;
objects_Spikes.__super__ = objects_Hazard;
objects_Spikes.prototype = $extend(objects_Hazard.prototype,{
	make_graphic: function() {
		var _gthis = this;
		var textures = util_GraphicUtil_textures_from_spritesheet("assets/spikes.png",2,2,8,8);
		var _g = 0;
		while(_g < textures.length) textures[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
		var sprites = [];
		var l_sprite = PIXI.Sprite.from(textures[0]);
		l_sprite.anchor.set(1,0.75);
		this.addChild(l_sprite);
		sprites.push(l_sprite);
		var r_sprite = PIXI.Sprite.from(textures[0]);
		r_sprite.anchor.set(0,0.75);
		this.addChild(r_sprite);
		sprites.push(r_sprite);
		this.animations = new zero_utilities_AnimationManager({ on_frame_change : function(n) {
			var _g = 0;
			while(_g < sprites.length) sprites[_g++].texture = textures[n];
		}});
		this.animations.add({ name : "up", frames : [0,1,2,3,3,3], type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS, duration : 0.3, on_complete : function() {
			_gthis.body.active = true;
		}});
		this.animations.add({ name : "down", frames : [3,2,1,0], type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS, duration : 0.2});
	}
	,set_spikes_up: function(v) {
		this.spikes_up = v;
		if(!v) {
			this.body.active = v;
		}
		util_Audio.play(v ? util_Sound.SFX_SPIKES_UP : util_Sound.SFX_SPIKES_DOWN);
		if(v) {
			this.animations.play("up");
		} else {
			this.animations.play("down");
		}
	}
	,destroy: function(_) {
		this.timer.pause();
		objects_Hazard.prototype.destroy.call(this,_);
	}
});
var objects_Tilemap = function(data,flags) {
	PIXI.Container.call(this);
	var tiles = [];
	var base = PIXI.BaseTexture.from("assets/tiles.png");
	base.scaleMode = PIXI.SCALE_MODES.NEAREST;
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,0,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,8,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,16,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,24,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,32,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,40,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,48,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(0,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(8,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(16,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(24,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(32,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(40,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(48,56,8,8)));
	tiles.push(new PIXI.Texture(base,new PIXI.Rectangle(56,56,8,8)));
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var j = _g++;
		var _g2 = 0;
		var _g3 = data[j].length;
		while(_g2 < _g3) {
			var i = _g2++;
			var idx = data[j][i];
			var flag = flags[j][i];
			if(idx < 0) {
				continue;
			}
			var spr = PIXI.Sprite.from(tiles[idx]);
			spr.anchor.set(0.5);
			spr.position.set(i * 8 + 4,j * 8 + 4);
			if(flag != 0) {
				if((flag & 4) > 0) {
					spr.scale.x *= -1;
				}
				if((flag & 2) > 0) {
					spr.scale.y *= -1;
				}
				if((flag & 1) > 0) {
					spr.scale.y *= -1;
					var rotation = spr.scale.x < 0 ? Math.PI : 0;
					rotation += spr.scale.y < 0 ? Math.PI / 2 : -Math.PI / 2;
					spr.rotation += rotation;
				}
			}
			this.addChild(spr);
		}
	}
};
objects_Tilemap.__name__ = true;
objects_Tilemap.__super__ = PIXI.Container;
objects_Tilemap.prototype = $extend(PIXI.Container.prototype,{
});
var particles_Particle = function(_) {
	this.acceleration = zero_utilities_Vec2.get();
	this.velocity = zero_utilities_Vec2.get();
	PIXI.Sprite.call(this,_);
	this.kill();
};
particles_Particle.__name__ = true;
particles_Particle.__super__ = PIXI.Sprite;
particles_Particle.prototype = $extend(PIXI.Sprite.prototype,{
	fire: function(options) {
		if(options.velocity == null) {
			options.velocity = zero_utilities_Vec2.get();
		}
		if(options.acceleration == null) {
			options.acceleration = zero_utilities_Vec2.get();
		}
		if(options.lifetime == null) {
			options.lifetime = 0;
		}
		this.position.set(options.position[0],options.position[1]);
		var this1 = this.velocity;
		var v = options.velocity;
		var x = v[0];
		var y = v[1];
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
		var this1 = this.acceleration;
		var v = options.acceleration;
		var x = v[0];
		var y = v[1];
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
		this.lifetime = options.lifetime;
		this.visible = true;
		zero_utilities_Vec2.pool.push(options.position);
		options.position = null;
		zero_utilities_Vec2.pool.push(options.velocity);
		options.velocity = null;
		zero_utilities_Vec2.pool.push(options.acceleration);
		options.acceleration = null;
	}
	,kill: function() {
		this.visible = false;
	}
	,update: function(ev) {
		this.velocity[0] += this.acceleration[0] * ev.dt;
		this.velocity[1] += this.acceleration[1] * ev.dt;
		this.position.x += this.velocity[0] * ev.dt;
		this.position.y += this.velocity[1] * ev.dt;
		if(this.lifetime > 0 && (this.lifetime -= ev.dt) <= 0) {
			this.kill();
		}
		this.position.set(Math.round(this.x),Math.round(this.y));
	}
	,get_available: function() {
		return !this.visible;
	}
	,destroy: function(_) {
		PIXI.Sprite.prototype.destroy.call(this,{ children : true, texture : false, baseTexture : false});
	}
	,__properties__: {get_available:"get_available"}
});
var particles_DeadPlayer = function() {
	var texture = util_GraphicUtil_textures_from_spritesheet("assets/player_dead.png",1,1,16,16)[0];
	texture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
	particles_Particle.call(this,texture);
	this.anchor.set(0.5);
};
particles_DeadPlayer.__name__ = true;
particles_DeadPlayer.__super__ = particles_Particle;
particles_DeadPlayer.prototype = $extend(particles_Particle.prototype,{
	fire: function(options) {
		options.velocity = zero_utilities_Vec2.get(0,-util_Constants_JUMP_POWER * 0.75);
		options.acceleration = zero_utilities_Vec2.get(0,util_Constants_GRAVITY);
		particles_Particle.prototype.fire.call(this,options);
	}
	,update: function(ev) {
		particles_Particle.prototype.update.call(this,ev);
		if(this.y > 512) {
			this.kill();
		}
	}
});
var particles_Particles = function(get_new) {
	this.pool = [];
	PIXI.Container.call(this);
	this.get_new = get_new;
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
particles_Particles.__name__ = true;
particles_Particles.__super__ = PIXI.Container;
particles_Particles.prototype = $extend(PIXI.Container.prototype,{
	get: function() {
		var _g = 0;
		var _g1 = this.pool;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.get_available()) {
				return s;
			}
		}
		var p = this.get_new();
		this.pool.push(p);
		this.addChild(p);
		return p;
	}
	,update: function(ev) {
		var _g = 0;
		var _g1 = this.pool;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(!p.get_available()) {
				p.update(ev);
			}
		}
	}
});
var particles_Poof = function() {
	this.timer = 0;
	this.textures = util_GraphicUtil_textures_from_spritesheet("assets/poof.png",3,3,24,24);
	var _g = 0;
	var _g1 = this.textures;
	while(_g < _g1.length) _g1[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
	particles_Particle.call(this,this.textures[0]);
	this.anchor.set(0.5);
};
particles_Poof.__name__ = true;
particles_Poof.__super__ = particles_Particle;
particles_Poof.prototype = $extend(particles_Particle.prototype,{
	fire: function(options) {
		particles_Particle.prototype.fire.call(this,options);
		this.lifetime = 0.4;
		this.set_idx(0);
	}
	,update: function(ev) {
		particles_Particle.prototype.update.call(this,ev);
		if((this.timer -= ev.dt) > 0) {
			return;
		}
		this.set_idx(this.idx + 1);
	}
	,set_idx: function(v) {
		if(v > 8) {
			this.kill();
		} else {
			this.texture = this.textures[v];
		}
		this.timer = 0.05;
		return this.idx = v;
	}
	,__properties__: $extend(particles_Particle.prototype.__properties__,{set_idx:"set_idx"})
});
var particles_Star = function() {
	var _gthis = this;
	var textures = util_GraphicUtil_textures_from_spritesheet("assets/star.png",3,3,5,5);
	var _g = 0;
	while(_g < textures.length) textures[_g++].baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
	particles_Particle.call(this,textures[0]);
	this.anchor.set(0.5);
	this.animation = new zero_utilities_AnimationManager({ on_frame_change : function(n) {
		_gthis.texture = textures[n];
	}});
	this.animation.add({ name : "play", frames : [0,1,2,3,4,5,6,7,8], duration : 0.4, type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS, on_complete : $bind(this,this.kill)});
};
particles_Star.__name__ = true;
particles_Star.__super__ = particles_Particle;
particles_Star.prototype = $extend(particles_Particle.prototype,{
	fire: function(options) {
		particles_Particle.prototype.fire.call(this,options);
		this.animation.play("play",0,true);
		this.alpha = 1;
	}
	,update: function(ev) {
		particles_Particle.prototype.update.call(this,ev);
		var this1 = this.velocity;
		if(Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]) > 0) {
			var this1 = this.velocity;
			var this11 = this.velocity;
			var v = Math.sqrt(this11[0] * this11[0] + this11[1] * this11[1]) * 0.9;
			var x = this1[0] / Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]);
			var y = this1[1] / Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1]);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			this1[0] = zero_utilities_Vec2.zero(x);
			this1[1] = zero_utilities_Vec2.zero(y);
			var x = this1[0] * v;
			var y = this1[1] * v;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			this1[0] = zero_utilities_Vec2.zero(x);
			this1[1] = zero_utilities_Vec2.zero(y);
		}
		if(!this.animation.get_active()) {
			this.kill();
		}
	}
});
var particles_Warning = function() {
	particles_Particle.call(this);
	var gfx = new PIXI.Graphics();
	gfx.lineStyle(32,14957380,1,0);
	gfx.drawCircle(0,0,64);
	this.addChild(gfx);
	gfx.blendMode = PIXI.BLEND_MODES.ADD;
};
particles_Warning.__name__ = true;
particles_Warning.__super__ = particles_Particle;
particles_Warning.prototype = $extend(particles_Particle.prototype,{
	fire: function(options) {
		particles_Particle.prototype.fire.call(this,options);
		this.scale.set(1,1);
	}
	,update: function(ev) {
		particles_Particle.prototype.update.call(this,ev);
		this.scale.x += (0 - this.scale.x) * 0.05;
		this.scale.y += (0 - this.scale.y) * 0.05;
		if(this.scale.x < 0.01) {
			this.kill();
		}
	}
});
var states_State = function() {
	PIXI.Container.call(this);
	this.init();
	Main.app_events.listen(AppEvents.RESIZE,$bind(this,this.resize));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
states_State.__name__ = true;
states_State.__super__ = PIXI.Container;
states_State.prototype = $extend(PIXI.Container.prototype,{
	init: function() {
	}
	,update: function(ev) {
	}
	,resize: function(ev) {
	}
	,destroy: function(_) {
		Main.app_events.unlisten(AppEvents.RESIZE,$bind(this,this.resize));
		Main.game_events.unlisten(GameEvents.UPDATE,$bind(this,this.update));
		PIXI.Container.prototype.destroy.call(this,_);
	}
});
var zero_utilities_Rect = {};
zero_utilities_Rect.zero = function(n) {
	if(Math.abs(n) <= zero_utilities_Rect.epsilon) {
		return 0;
	} else {
		return n;
	}
};
zero_utilities_Rect.get = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(zero_utilities_Rect.pool != null && zero_utilities_Rect.pool.length > 0) {
		var this1 = zero_utilities_Rect.pool.shift();
		var x1 = x;
		var y1 = y;
		var z = width;
		var w = height;
		if(height == null) {
			w = 0;
		}
		if(width == null) {
			z = 0;
		}
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		zero_utilities_Vec4.arr_set(this1,0,zero_utilities_Rect.zero(x1));
		zero_utilities_Vec4.arr_set(this1,1,zero_utilities_Rect.zero(y1));
		zero_utilities_Vec4.arr_set(this1,2,zero_utilities_Rect.zero(z));
		zero_utilities_Vec4.arr_set(this1,3,zero_utilities_Rect.zero(w));
		return this1;
	} else {
		var x1 = x;
		var y1 = y;
		var z = width;
		var w = height;
		if(height == null) {
			w = 0;
		}
		if(width == null) {
			z = 0;
		}
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		return zero_utilities_Vec4.from_array_float([x1,y1,z,w]);
	}
};
var zero_utilities_Vec4 = {};
zero_utilities_Vec4.zero = function(n) {
	if(Math.abs(n) <= zero_utilities_Vec4.epsilon) {
		return 0;
	} else {
		return n;
	}
};
zero_utilities_Vec4.from_array_float = function(input) {
	return zero_utilities_Vec4.get(input[0],input[1],input[2],input[3]);
};
zero_utilities_Vec4.arr_set = function(this1,n,v) {
	if(n < 0 || n > 3) {
		return;
	} else {
		this1[n] = v;
	}
};
zero_utilities_Vec4.get = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(zero_utilities_Vec4.pool != null && zero_utilities_Vec4.pool.length > 0) {
		var this1 = zero_utilities_Vec4.pool.shift();
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w == null) {
			w1 = 0;
		}
		if(z == null) {
			z1 = 0;
		}
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		this1[0] = zero_utilities_Vec4.zero(x1);
		this1[1] = zero_utilities_Vec4.zero(y1);
		this1[2] = zero_utilities_Vec4.zero(z1);
		this1[3] = zero_utilities_Vec4.zero(w1);
		return this1;
	} else {
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w == null) {
			w1 = 0;
		}
		if(z == null) {
			z1 = 0;
		}
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		return [x1,y1,z1,w1];
	}
};
var states_PlayState = function() {
	this.dead_players = new particles_Particles(function() {
		return new particles_DeadPlayer();
	});
	this.warnings = new particles_Particles(function() {
		return new particles_Warning();
	});
	this.stars = new particles_Particles(function() {
		return new particles_Star();
	});
	this.poofs = new particles_Particles(function() {
		return new particles_Poof();
	});
	this.one_way_geom = [];
	this.level_geom = [];
	this.pickups = [];
	this.hazards = [];
	this.player_bodies = [];
	this.physics_objects = [];
	this.current_time = 0;
	this.hazard_data = [];
	this.box_positions = [];
	this.level = Main.assets.resources["assets/level.json"].data;
	states_State.call(this);
};
states_PlayState.__name__ = true;
states_PlayState.__super__ = states_State;
states_PlayState.prototype = $extend(states_State.prototype,{
	init: function() {
		states_PlayState.i = this;
		this.addChild(this.game_layer = new PIXI.Container());
		this.addChild(this.ui_layer = new PIXI.Container());
		this.game_layer.addChild(new objects_Background());
		this.game_layer.addChild(this.dolly = new util_Dolly());
		this.make_layers();
		this.make_tiles();
		this.make_particles();
		this.make_ui();
		this.set_state(states_PlayStateState.TITLE);
	}
	,make_layers: function() {
		this.dolly.addChild(this.background = new PIXI.Container());
		this.dolly.addChild(this.objects = new PIXI.Container());
		this.dolly.addChild(this.foreground = new PIXI.Container());
	}
	,make_tiles: function() {
		var bg_layer = zero_utilities_OgmoUtils.get_tile_layer(this.level,"bg");
		var tile_layer = zero_utilities_OgmoUtils.get_tile_layer(this.level,"tiles");
		var bg_tiles = new objects_Tilemap(bg_layer.data2D,bg_layer.tileFlags2D);
		this.tile_data = tile_layer.data2D;
		var tiles = new objects_Tilemap(this.tile_data,tile_layer.tileFlags2D);
		this.background.addChild(bg_tiles);
		this.foreground.addChild(tiles);
	}
	,init_game: function() {
		var _gthis = this;
		util_Audio.play_music();
		util_GameState_points = 0;
		objects_GameObject.all = [];
		util_GameState_times = [];
		this.box_positions = [];
		this.hazard_data = [];
		this.physics_objects = [];
		this.player_bodies = [];
		this.hazards = [];
		this.pickups = [];
		this.current_time = 0;
		states_PlayState.world = new echo_World({ width : 1000, height : 1000});
		zero_utilities_OgmoUtils.load_entities(zero_utilities_OgmoUtils.get_entity_layer(this.level,"entities"),function(e) {
			switch(e.name) {
			case "box":
				_gthis.box_positions.push(zero_utilities_Vec2.get(e.x,e.y));
				break;
			case "player":
				_gthis.objects.addChild(_gthis.player = new objects_Player(e.x,e.y));
				break;
			case "ball_and_chain":case "rolling_ball":case "saw_blade":case "spikes":
				_gthis.hazard_data.push(e);
				break;
			}
		});
		zero_extensions_ArrayExt.shuffle(this.hazard_data);
		zero_extensions_ArrayExt.shuffle(this.box_positions);
		Main.game_events.dispatch(GameEvents.NEW_POWER,{ power : objects_Power.JUMP});
		var a = this.tile_data;
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var row = a[_g1];
			++_g1;
			var _g2 = 0;
			while(_g2 < row.length) _g.push(row[_g2++]);
		}
		this.level_geom = echo_util_TileMap.generate(_g,8,8,56,32,0,0,1,null,[12,13,14,15]);
		var a = this.tile_data;
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var row = a[_g1];
			++_g1;
			var _g2 = 0;
			while(_g2 < row.length) _g.push(row[_g2++]);
		}
		var _g1 = [];
		_g1.push(16);
		_g1.push(17);
		_g1.push(18);
		_g1.push(19);
		_g1.push(20);
		_g1.push(21);
		_g1.push(22);
		_g1.push(23);
		_g1.push(24);
		_g1.push(25);
		_g1.push(26);
		_g1.push(27);
		_g1.push(28);
		_g1.push(29);
		_g1.push(30);
		_g1.push(31);
		_g1.push(32);
		_g1.push(33);
		_g1.push(34);
		_g1.push(35);
		_g1.push(36);
		_g1.push(37);
		_g1.push(38);
		_g1.push(39);
		_g1.push(40);
		_g1.push(41);
		_g1.push(42);
		_g1.push(43);
		_g1.push(44);
		_g1.push(45);
		_g1.push(46);
		_g1.push(47);
		_g1.push(48);
		_g1.push(49);
		_g1.push(50);
		_g1.push(51);
		_g1.push(52);
		_g1.push(53);
		_g1.push(54);
		_g1.push(55);
		_g1.push(56);
		_g1.push(57);
		_g1.push(58);
		_g1.push(59);
		_g1.push(60);
		_g1.push(61);
		_g1.push(62);
		_g1.push(63);
		this.one_way_geom = echo_util_TileMap.generate(_g,8,8,56,32,0,0,12,null,_g1);
		var _g = 0;
		var _g1 = this.level_geom;
		while(_g < _g1.length) states_PlayState.world.add(_g1[_g++]);
		var _g = 0;
		var _g1 = this.one_way_geom;
		while(_g < _g1.length) states_PlayState.world.add(_g1[_g++]);
		this.add_listeners();
		zero_utilities_Timer.get(4,function() {
			_gthis.spawn_box();
		});
	}
	,make_particles: function() {
		this.foreground.addChild(this.dead_players);
		this.foreground.addChild(this.poofs);
		this.background.addChild(this.stars);
		this.foreground.addChild(this.warnings);
	}
	,make_ui: function() {
		this.ui_layer.addChild(this.white_layer = new PIXI.Graphics());
		this.white_layer.beginFill(16777215,0.15);
		this.white_layer.drawRect(0,0,1,1);
		this.ui_layer.addChild(new ui_Unboxed());
		this.ui_layer.addChild(new ui_PowerIcon());
		this.ui_layer.addChild(new ui_Hearts());
		this.ui_layer.addChild(new ui_Logo());
		this.ui_layer.addChild(new ui_PowerInstructions());
		this.ui_layer.addChild(new ui_Score());
		this.ui_layer.addChild(new ui_CTA());
		this.ui_layer.addChild(new ui_PostGame());
		this.ui_layer.addChild(new ui_AudioControl());
		this.ui_layer.addChild(new ui_HighScore());
		this.ui_layer.addChild(new ui_Share());
	}
	,add_listeners: function() {
		var _gthis = this;
		echo_Echo.listen(states_PlayState.world,haxe_ds_Either.Right(this.physics_objects),haxe_ds_Either.Right(this.level_geom),{ stay : function(a,b,c) {
			var _g = 0;
			while(_g < c.length) {
				var col = c[_g];
				++_g;
				a.data.object.normals.push(zero_utilities_Vec2.get(col.normal.x,col.normal.y));
			}
		}});
		echo_Echo.listen(states_PlayState.world,haxe_ds_Either.Right(this.physics_objects),haxe_ds_Either.Right(this.one_way_geom),{ condition : function(a,b,c) {
			var a1 = c[0].normal;
			var b = util_VecUtil_DOWN_V2;
			if(a1.x * b.x + a1.y * b.y >= 0.5) {
				return a.velocity.y >= 0;
			} else {
				return false;
			}
		}, stay : function(a,b,c) {
			var _g = 0;
			while(_g < c.length) {
				var col = c[_g];
				++_g;
				a.data.object.normals.push(zero_utilities_Vec2.get(col.normal.x,col.normal.y));
			}
		}});
		echo_Echo.listen(states_PlayState.world,haxe_ds_Either.Right(this.player_bodies),haxe_ds_Either.Right(this.pickups),{ enter : function(a,b,c) {
			_gthis.get_box(b.data.object);
		}});
		echo_Echo.listen(states_PlayState.world,haxe_ds_Either.Right(this.player_bodies),haxe_ds_Either.Right(this.hazards),{ enter : function(a,b,c) {
			a.data.object.hurt();
		}, separate : false});
	}
	,get_box: function(box) {
		var _gthis = this;
		util_GameState_points++;
		box.destroy();
		util_GameState_times.push(this.current_time);
		this.current_time = 0;
		this.player.get_new_power();
		zero_utilities_Timer.get(0.5,function() {
			_gthis.spawn_box();
		});
		if(util_GameState_points % util_Constants_POINTS_PER_HAZARD == 0) {
			this.spawn_hazard();
		}
	}
	,spawn_box: function() {
		var pos = this.get_box_pos();
		var ppos = zero_utilities_Vec2.get(this.player.x,this.player.y);
		while(true) {
			var this2 = zero_utilities_Vec2.subtract(ppos,zero_utilities_Vec2.from_array_float(pos));
			if(!(Math.sqrt(this2[0] * this2[0] + this2[1] * this2[1]) < 64)) {
				break;
			}
			pos = this.get_box_pos();
		}
		util_Audio.play(util_Sound.SFX_SPAWN);
		this.objects.addChild(new objects_Box(pos[0],pos[1]));
	}
	,get_box_pos: function() {
		var out = this.box_positions.pop();
		this.box_positions.unshift(out);
		return out;
	}
	,spawn_hazard: function() {
		var _gthis = this;
		if(this.hazard_data.length == 0) {
			return;
		}
		var e = this.hazard_data.pop();
		zero_utilities_Timer.get(1.5,function() {
			util_Audio.play(util_Sound.SFX_SPAWN);
			switch(e.name) {
			case "ball_and_chain":
				_gthis.objects.addChild(new objects_BallAndChain(e.x,e.y,e.values.links));
				break;
			case "rolling_ball":
				_gthis.objects.addChild(new objects_RollingBall(e.x,e.y));
				break;
			case "saw_blade":
				_gthis.objects.addChild(new objects_SawBlade(e.x,e.y,e.nodes));
				break;
			case "spikes":
				_gthis.objects.addChild(new objects_Spikes(e.x,e.y));
				break;
			}
		});
		this.warnings.get().fire({ position : zero_utilities_Vec2.from_array_int([e.x,e.y])});
	}
	,update: function(ev) {
		this.current_time += ev.dt;
		if(states_PlayState.world != null) {
			echo_Echo.step(states_PlayState.world,ev.dt);
		}
		objects_GameObject.update_all(ev.dt);
		this.dolly.update(ev);
		var fh = this.dolly;
		var this1 = fh.scroll;
		var fh1 = fh.scroll[1];
		var v;
		switch(this.state._hx_index) {
		case 1:
			v = (72 - this.dolly.scroll[1]) * 0.025;
			break;
		case 0:case 2:
			v = (-108 - this.dolly.scroll[1]) * 0.025;
			break;
		}
		this1[1] = fh1 + v;
		var fh = this.dolly;
		var this1 = fh.scroll;
		var fh1 = fh.scroll[0];
		var v;
		switch(this.state._hx_index) {
		case 1:
			v = this.player == null || !this.player.alive ? 0 : Math.min(Math.max(this.player.x + this.player.get_velocity().x / 2 - this.dolly.scroll[0],-20),20) * 0.1;
			break;
		case 0:case 2:
			v = (224 - this.dolly.scroll[0]) * 0.1;
			break;
		}
		this1[0] = fh1 + v;
		if((this.state == states_PlayStateState.TITLE || this.state == states_PlayStateState.END) && util_Pointer.get_just_released() && !ui_AudioControl.i.just_pressed && !ui_HighScore.i.just_pressed) {
			this.set_state(states_PlayStateState.PLAY);
		}
	}
	,resize: function(ev) {
		states_PlayState.zoom = ev.height / states_PlayState.game_height;
		this.game_layer.position.set(ev.width / 2,ev.height / 2);
		this.game_layer.scale.set(states_PlayState.zoom,states_PlayState.zoom);
		ui_UIObject.resize_all(ev);
		this.dolly.resize(ev);
		this.white_layer.scale.set(ev.width,ev.height);
	}
	,set_state: function(s) {
		this.state = s;
		Main.game_events.dispatch(GameEvents.GAME_STATE,{ state : this.state});
		switch(this.state._hx_index) {
		case 0:
			break;
		case 1:
			this.init_game();
			util_Audio.play(util_Sound.SKILL_SWAP);
			break;
		case 2:
			zero_utilities_Timer.get(1,function() {
				util_Audio.play(util_Sound.NICE_JOB);
			});
			break;
		}
		return this.state;
	}
	,game_over: function() {
		var _g = 0;
		var _g1 = objects_GameObject.all;
		while(_g < _g1.length) _g1[_g++].destroy();
		this.objects.removeChildren();
		states_PlayState.world.clear();
		this.set_state(states_PlayStateState.END);
	}
	,__properties__: {set_state:"set_state"}
});
var states_PlayStateState = $hxEnums["states.PlayStateState"] = { __ename__:true,__constructs__:null
	,TITLE: {_hx_name:"TITLE",_hx_index:0,__enum__:"states.PlayStateState",toString:$estr}
	,PLAY: {_hx_name:"PLAY",_hx_index:1,__enum__:"states.PlayStateState",toString:$estr}
	,END: {_hx_name:"END",_hx_index:2,__enum__:"states.PlayStateState",toString:$estr}
};
states_PlayStateState.__constructs__ = [states_PlayStateState.TITLE,states_PlayStateState.PLAY,states_PlayStateState.END];
states_PlayStateState.__empty_constructs__ = [states_PlayStateState.TITLE,states_PlayStateState.PLAY,states_PlayStateState.END];
var ui_UIObject = function(anchor,reference,offset) {
	if(reference == null) {
		reference = ui_PositionReference.WINDOW;
	}
	if(anchor == null) {
		anchor = ui_Anchor.MIDDLE_CENTER;
	}
	this.state = ui_UIState.IN;
	PIXI.Container.call(this);
	this.anchor = anchor;
	this.offset = offset == null ? zero_utilities_Vec2.get() : offset;
	this.reference = reference;
	ui_UIObject.all.push(this);
};
ui_UIObject.__name__ = true;
ui_UIObject.resize_all = function(ev) {
	var _g = 0;
	var _g1 = ui_UIObject.all;
	while(_g < _g1.length) _g1[_g++].resize(ev);
};
ui_UIObject.__super__ = PIXI.Container;
ui_UIObject.prototype = $extend(PIXI.Container.prototype,{
	resize: function(ev) {
		var pos = zero_utilities_Vec2.get();
		var scale = Math.max(Math.min(Math.min(ev.width / 1600,1),ev.height / 900),0.4);
		this.scale.set(scale);
		var w;
		switch(this.reference._hx_index) {
		case 0:
			w = this.parent.width;
			break;
		case 1:
			w = ev.width;
			break;
		}
		var h;
		switch(this.reference._hx_index) {
		case 0:
			h = this.parent.height;
			break;
		case 1:
			h = ev.height;
			break;
		}
		switch(this.anchor._hx_index) {
		case 0:
			pos[0] = zero_utilities_Vec2.zero(0);
			pos[1] = zero_utilities_Vec2.zero(0);
			break;
		case 1:
			var x = w / 2;
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(0);
			break;
		case 2:
			var x = w;
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(0);
			break;
		case 3:
			var y = h / 2;
			if(y == null) {
				y = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(0);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		case 4:
			var x = w / 2;
			var y = h / 2;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		case 5:
			var x = w;
			var y = h / 2;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		case 6:
			var y = h;
			if(y == null) {
				y = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(0);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		case 7:
			var x = w / 2;
			var y = h;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		case 8:
			var x = w;
			var y = h;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			pos[0] = zero_utilities_Vec2.zero(x);
			pos[1] = zero_utilities_Vec2.zero(y);
			break;
		}
		var new_offset = zero_utilities_Vec2.multiply_f(this.offset,scale);
		pos = zero_utilities_Vec2.add(pos,new_offset);
		this.position.set(pos[0],pos[1]);
		zero_utilities_Vec2.pool.push(pos);
		zero_utilities_Vec2.pool.push(new_offset);
		new_offset = null;
	}
});
var ui_AudioControl = function() {
	this.just_pressed = false;
	this.textures = util_GraphicUtil_textures_from_spritesheet("assets/audio.png",2,1,115,120);
	this.muted = false;
	var _gthis = this;
	ui_AudioControl.i = this;
	ui_UIObject.call(this,ui_Anchor.TOP_LEFT,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([248,118]));
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
	this.interactive = this.buttonMode = true;
	this.on("pointertap",function(e) {
		_gthis.set_muted();
	});
	this.container = new PIXI.Container();
	this.addChild(this.container);
	this.container.position.set(-512,0);
	this.sprite = PIXI.Sprite.from(this.textures[0]);
	this.sprite.anchor.set(0.5);
	var bg = new PIXI.Graphics();
	bg.beginFill(0,0.75);
	bg.arc(-160,0,40,Math.PI / 2,Math.PI / 2 * 3);
	bg.arc(160,0,40,-Math.PI / 2,Math.PI / 2);
	bg.endFill();
	bg.rotation = -(2 * (Math.PI / 180));
	bg.position.set(0,80);
	this.text = new PIXI.Text("SOUND ON",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	this.text.anchor.set(0.5);
	bg.addChild(this.text);
	this.container.addChild(bg);
	this.container.addChild(this.sprite);
	if(util_GameState_muted != null) {
		zero_utilities_Timer.get(0.1,function() {
			_gthis.set_muted(util_GameState_muted);
		});
	}
};
ui_AudioControl.__name__ = true;
ui_AudioControl.__super__ = ui_UIObject;
ui_AudioControl.prototype = $extend(ui_UIObject.prototype,{
	set_state: function(ev) {
		var _g = ev.state;
		var tmp;
		if(_g == null) {
			tmp = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 1:
				tmp = ui_UIState.OUT;
				break;
			case 0:case 2:
				tmp = ui_UIState.IN;
				break;
			}
		}
		this.state = tmp;
	}
	,update: function(ev) {
		var t;
		switch(this.state._hx_index) {
		case 0:
			t = 0;
			break;
		case 1:
			t = -512;
			break;
		}
		this.container.x += (t - this.container.x) * 0.1;
	}
	,set_muted: function(m) {
		var _gthis = this;
		this.just_pressed = true;
		this.muted = m == null ? !this.muted : !m;
		this.sprite.texture = this.muted ? this.textures[1] : this.textures[0];
		Howler.mute(this.muted);
		zero_utilities_Timer.get(0.1,function() {
			_gthis.just_pressed = false;
		});
		this.text.text = this.muted ? "SOUND OFF" : "SOUND ON";
		var tmp = this.muted ? "0" : "1";
		window.localStorage.setItem("muted",tmp);
		new ui_PulseSprite(this.sprite);
	}
});
var ui_CTA = function() {
	this.time = 0;
	this.target_out = 400;
	ui_UIObject.call(this,ui_Anchor.BOTTOM_CENTER,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([0,-128]));
	var sprite = PIXI.Sprite.from("assets/cta.png");
	sprite.anchor.set(0.5);
	this.container = new PIXI.Container();
	this.container.y = this.target_out;
	this.addChild(this.container);
	this.container.addChild(sprite);
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
	sprite.interactive = sprite.buttonMode = true;
	sprite.on("pointertap",function(e) {
		window.open('http://unboxedtechnology.com/', '_parent');
	});
};
ui_CTA.__name__ = true;
ui_CTA.__super__ = ui_UIObject;
ui_CTA.prototype = $extend(ui_UIObject.prototype,{
	set_state: function(ev) {
		var _gthis = this;
		var _g = ev.state;
		if(_g == null) {
			if(this.timer != null && this.timer.get_active()) {
				this.timer.cancel();
			}
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 0:case 1:
				if(this.timer != null && this.timer.get_active()) {
					this.timer.cancel();
				}
				this.state = ui_UIState.OUT;
				break;
			case 2:
				this.timer = zero_utilities_Timer.get(1.5,function() {
					_gthis.state = ui_UIState.IN;
				});
				break;
			}
		}
	}
	,update: function(ev) {
		switch(this.state._hx_index) {
		case 0:
			this.container.y += (0 - this.container.y) * 0.1;
			break;
		case 1:
			this.container.y += (this.target_out - this.container.y) * 0.1;
			break;
		}
		this.time += ev.dt * 2;
		this.rotation = Math.sin(this.time) / 16;
	}
});
var ui_Hearts = function() {
	this.alpha_target = 0;
	this.hearts = [];
	var _gthis = this;
	ui_UIObject.call(this,ui_Anchor.TOP_LEFT,ui_PositionReference.WINDOW,zero_utilities_Vec2.get(214,92));
	var _g = 0;
	var _g1 = util_Constants_HEALTH;
	while(_g < _g1) {
		var heart = PIXI.Sprite.from("assets/heart.png");
		heart.anchor.set(0.5);
		this.addChild(heart);
		heart.position.set(_g++ * 60,0);
		this.hearts.push(heart);
	}
	Main.game_events.listen(GameEvents.PLAYER_HEALTH,$bind(this,this.update_hearts));
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,function(ev) {
		_gthis.alpha += (_gthis.alpha_target - _gthis.alpha) * 0.1;
	});
	this.alpha = 0;
};
ui_Hearts.__name__ = true;
ui_Hearts.__super__ = ui_UIObject;
ui_Hearts.prototype = $extend(ui_UIObject.prototype,{
	update_hearts: function(ev) {
		var _g = 0;
		var _g1 = util_Constants_HEALTH;
		while(_g < _g1) {
			var i = _g++;
			if(i == ev.health && this.hearts[i].alpha == 1) {
				new ui_PulseSprite(this.hearts[i]);
			}
			this.hearts[i].tint = i >= ev.health ? 0 : 16777215;
			this.hearts[i].alpha = i >= ev.health ? 0.25 : 1;
		}
	}
	,set_state: function(ev) {
		var _g = ev.state;
		var tmp;
		if(_g == null) {
			tmp = 0;
		} else {
			switch(_g._hx_index) {
			case 1:
				tmp = 1;
				break;
			case 0:case 2:
				tmp = 0;
				break;
			}
		}
		this.alpha_target = tmp;
	}
});
var ui_HighScore = function() {
	this.just_pressed = false;
	var _gthis = this;
	ui_HighScore.i = this;
	ui_UIObject.call(this,ui_Anchor.TOP_RIGHT,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([-248,118]));
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
	this.container = new PIXI.Container();
	this.addChild(this.container);
	this.container.position.set(512,0);
	var bg = new PIXI.Graphics();
	bg.beginFill(0,0.75);
	bg.arc(-160,0,40,Math.PI / 2,Math.PI / 2 * 3);
	bg.arc(160,0,40,-Math.PI / 2,Math.PI / 2);
	bg.endFill();
	bg.rotation = 2 * (Math.PI / 180);
	bg.position.set(0,80);
	this.text = new PIXI.Text("MY HIGH SCORE",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	this.text.anchor.set(0.5);
	bg.addChild(this.text);
	var sprite = PIXI.Sprite.from(Main.assets.resources["assets/share.png"].texture);
	sprite.anchor.set(0.5);
	sprite.position.set(128,140);
	sprite.buttonMode = sprite.interactive = true;
	sprite.on("pointertap",function(e) {
		_gthis.just_pressed = true;
		ui_Share.i.show();
	});
	this.hi_sprite = PIXI.Sprite.from(Main.assets.resources["assets/arrow.png"].texture);
	this.hi_sprite.anchor.set(0.5);
	this.hi_sprite.rotation = -Math.PI / 4;
	this.score_text = new PIXI.Text("0",{ fill : 16753408, fontSize : 144, fontFamily : "'Lilita One', Arial", strokeThickness : 16, stroke : 0});
	this.score_text.anchor.set(0.5);
	this.container.addChild(bg);
	this.container.addChild(sprite);
	this.container.addChild(this.score_text);
	this.container.addChild(this.hi_sprite);
	this.set_score(util_GameState_high_score != null ? util_GameState_high_score : 0);
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.update_score));
};
ui_HighScore.__name__ = true;
ui_HighScore.__super__ = ui_UIObject;
ui_HighScore.prototype = $extend(ui_UIObject.prototype,{
	set_score: function(v) {
		this.score_text.text = "" + v;
		this.hi_sprite.x = this.score_text.width / 2 + 24;
		return this.score = v;
	}
	,set_state: function(ev) {
		var _gthis = this;
		var _g = ev.state;
		if(_g == null) {
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 1:
				this.state = ui_UIState.OUT;
				break;
			case 0:case 2:
				zero_utilities_Timer.get(0.1,function() {
					_gthis.state = util_GameState_high_score == null ? ui_UIState.OUT : ui_UIState.IN;
				});
				break;
			}
		}
	}
	,update: function(ev) {
		var t;
		switch(this.state._hx_index) {
		case 0:
			t = 0;
			break;
		case 1:
			t = 512;
			break;
		}
		this.container.x += (t - this.container.x) * 0.1;
	}
	,update_score: function(ev) {
		this.hi_sprite.scale.set(0);
		if(ev.state != states_PlayStateState.END) {
			return;
		}
		if(util_GameState_points <= util_GameState_high_score) {
			return;
		}
		util_GameState_high_score = util_GameState_points;
		this.set_score(util_GameState_points);
		zero_utilities_Tween.tween(this.hi_sprite.scale,0.5,{ x : 1, y : 1},{ delay : 1, ease : zero_utilities_Ease.elasticOut});
		window.localStorage.setItem("hiscore","" + util_GameState_points);
	}
	,__properties__: {set_score:"set_score"}
});
var ui_Logo = function() {
	this.pulse_timer = 3;
	ui_UIObject.call(this,ui_Anchor.MIDDLE_CENTER,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([0,-96]));
	this.sprite = PIXI.Sprite.from("assets/logo.png");
	this.sprite.anchor.set(0.5);
	this.addChild(this.sprite);
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
	var subtitle = PIXI.Sprite.from("assets/test.png");
	subtitle.rotation = 0.01;
	subtitle.position.set(0,180);
	subtitle.anchor.set(0.5);
	subtitle.scale.set(0);
	this.sprite.addChild(subtitle);
	zero_utilities_Tween.tween(subtitle.scale,0.4,{ x : 1, y : 1},{ ease : zero_utilities_Ease.backOut, delay : 0.5});
};
ui_Logo.__name__ = true;
ui_Logo.__super__ = ui_UIObject;
ui_Logo.prototype = $extend(ui_UIObject.prototype,{
	update: function(ev) {
		if((this.pulse_timer -= ev.dt) > 0 || this.state == ui_UIState.OUT) {
			return;
		}
		this.pulse_timer = 5;
		new ui_PulseSprite(this.sprite,0.5,1.5);
	}
	,set_state: function(ev) {
		var _gthis = this;
		var _g = ev.state;
		if(_g != null) {
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				this.state = ui_UIState.OUT;
				zero_utilities_Tween.tween(this.scale,0.5,{ x : 0, y : 0},{ ease : zero_utilities_Ease.backIn, on_complete : function() {
					_gthis.alpha = 0;
				}});
				break;
			case 2:
				this.state = ui_UIState.OUT;
				break;
			}
		}
	}
});
var ui_PostGame = function() {
	this.out_pos = -1280;
	this.percent = 0;
	ui_UIObject.call(this,ui_Anchor.MIDDLE_CENTER,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([0,-128]));
	this.addChild(this.container = new PIXI.Container());
	var bg = new PIXI.Graphics();
	bg.beginFill(0,0.75);
	bg.drawRoundedRect(-256,-256,512,512,16);
	bg.endFill();
	var logo = PIXI.Sprite.from(Main.assets.resources["assets/logo.png"].texture);
	logo.anchor.set(0.5,1);
	logo.position.set(0,-100);
	logo.scale.set(0.4);
	this.container.addChild(bg);
	this.container.addChild(logo);
	this.container.y = this.out_pos;
	var score_text = new PIXI.Text("SCORE:",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	score_text.position.set(0,-100);
	score_text.anchor.set(0.5);
	var skill_text = new PIXI.Text("MY SKILL AGILITY:",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	skill_text.position.set(0,100);
	skill_text.anchor.set(0.5);
	this.container.addChild(score_text);
	this.container.addChild(skill_text);
	this.score = new PIXI.Text("12",{ fill : 16753408, fontSize : 144, fontFamily : "'Lilita One', Arial", strokeThickness : 16, stroke : 0});
	this.score.anchor.set(0.5);
	this.score.position.set(0,-8);
	this.container.addChild(this.score);
	var skill_outline = new PIXI.Graphics();
	skill_outline.lineStyle(8,16777215,1,0);
	skill_outline.arc(-140,0,20,Math.PI / 2,Math.PI / 2 * 3);
	skill_outline.arc(140,0,20,-Math.PI / 2,-Math.PI / 2 * 3);
	skill_outline.lineTo(-140,20);
	skill_outline.position.set(0,144);
	this.container.addChild(skill_outline);
	var canvas = window.document.createElement("canvas");
	canvas.width = 320;
	canvas.height = 40;
	var ctx = canvas.getContext("2d",null);
	var gradient = ctx.createLinearGradient(0,0,320,40);
	gradient.addColorStop(0,"#7000FF");
	gradient.addColorStop(1,"#FF004D");
	ctx.fillStyle = gradient;
	ctx.fillRect(0,0,320,40);
	var sprite = PIXI.Sprite.from(canvas);
	sprite.anchor.set(0.5);
	sprite.position.set(0,144);
	this.bar = new PIXI.Graphics();
	sprite.mask = this.bar;
	this.bar.position.set(0,144);
	this.container.addChild(this.bar);
	this.container.addChild(sprite);
	this.dot = new PIXI.Graphics();
	this.dot.beginFill(16777215);
	this.dot.drawCircle(0,0,6);
	this.dot.position.set(0,144);
	this.container.addChild(this.dot);
	this.stars = new particles_Particles(function() {
		return new particles_Star();
	});
	this.stars.scale.set(4);
	this.addChild(this.stars);
	this.set_percent(0.5);
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
ui_PostGame.__name__ = true;
ui_PostGame.__super__ = ui_UIObject;
ui_PostGame.prototype = $extend(ui_UIObject.prototype,{
	set_percent: function(v) {
		this.bar.clear();
		this.bar.beginFill(16777215);
		this.bar.drawCircle(-140,0,6);
		var t1 = v / 1;
		this.bar.drawCircle((1 - t1) * -140 + t1 * 140,0,6);
		var t1 = v / 1;
		this.bar.drawRect(-140,-6,(1 - t1) * 0 + t1 * 280,12);
		this.bar.endFill();
		var t1 = v / 1;
		this.dot.x = (1 - t1) * -140 + t1 * 140;
		return this.percent = v;
	}
	,set_state: function(ev) {
		var _g = ev.state;
		if(_g == null) {
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 0:case 1:
				this.state = ui_UIState.OUT;
				break;
			case 2:
				this.state = ui_UIState.IN;
				this.set_percent(0);
				this.score.text = "" + util_GameState_points;
				zero_utilities_Timer.get(1,$bind(this,this.animate_skill));
				break;
			}
		}
	}
	,update: function(ev) {
		var t;
		switch(this.state._hx_index) {
		case 0:
			t = 0.0;
			break;
		case 1:
			t = this.out_pos;
			break;
		}
		this.container.y += (t - this.container.y) * 0.1;
	}
	,animate_skill: function() {
		var _gthis = this;
		var amt = 0.75;
		var avg = 0.0;
		util_GameState_times.shift();
		var _g = 0;
		var _g1 = util_GameState_times;
		while(_g < _g1.length) avg += _g1[_g++];
		avg /= util_GameState_times.length;
		var t1 = (avg - 20) / -15;
		amt = Math.min(Math.max((1 - t1) * 0 + t1,0.5),1);
		zero_utilities_Tween.tween(this,1,{ percent : amt},{ ease : zero_utilities_Ease.quadOut, on_complete : function() {
			util_Audio.play(util_Sound.SFX_GET);
			var t1 = amt / 1;
			_gthis.stars.position.set((1 - t1) * -140 + t1 * 140,144);
			var v = zero_utilities_Vec2.get(0,100);
			var v1 = 45;
			v1 *= Math.PI / 180;
			var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
			var x = len * Math.cos(v1);
			var y = len * Math.sin(v1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			v[0] = zero_utilities_Vec2.zero(x);
			v[1] = zero_utilities_Vec2.zero(y);
			_gthis.stars.get().fire({ position : zero_utilities_Vec2.from_array_int([0,0]), velocity : v});
			var v = zero_utilities_Vec2.get(0,100);
			var v1 = 135;
			v1 *= Math.PI / 180;
			var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
			var x = len * Math.cos(v1);
			var y = len * Math.sin(v1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			v[0] = zero_utilities_Vec2.zero(x);
			v[1] = zero_utilities_Vec2.zero(y);
			_gthis.stars.get().fire({ position : zero_utilities_Vec2.from_array_int([0,0]), velocity : v});
			var v = zero_utilities_Vec2.get(0,100);
			var v1 = 225;
			v1 *= Math.PI / 180;
			var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
			var x = len * Math.cos(v1);
			var y = len * Math.sin(v1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			v[0] = zero_utilities_Vec2.zero(x);
			v[1] = zero_utilities_Vec2.zero(y);
			_gthis.stars.get().fire({ position : zero_utilities_Vec2.from_array_int([0,0]), velocity : v});
			var v = zero_utilities_Vec2.get(0,100);
			var v1 = 315;
			v1 *= Math.PI / 180;
			var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);
			var x = len * Math.cos(v1);
			var y = len * Math.sin(v1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			v[0] = zero_utilities_Vec2.zero(x);
			v[1] = zero_utilities_Vec2.zero(y);
			_gthis.stars.get().fire({ position : zero_utilities_Vec2.from_array_int([0,0]), velocity : v});
		}});
	}
	,__properties__: {set_percent:"set_percent"}
});
var ui_PowerIcon = function() {
	this.out_x = -600;
	var _g = new haxe_ds_EnumValueMap();
	var _g1 = 0;
	var _g2 = [];
	var _g11 = 0;
	var _g21 = objects_Power.__empty_constructs__.slice();
	while(_g11 < _g21.length) _g2.push(_g21[_g11++]);
	var _g3 = _g2;
	while(_g1 < _g3.length) {
		var power = _g3[_g1];
		++_g1;
		_g.set(power,Std.string(power).split("_").join(" "));
	}
	this.names = _g;
	this.icons = new haxe_ds_EnumValueMap();
	var textures = util_GraphicUtil_textures_from_spritesheet("assets/power_icons.png",5,2,128,128);
	var _g = 0;
	var _g1 = [];
	var _g11 = 0;
	var _g2 = objects_Power.__empty_constructs__.slice();
	while(_g11 < _g2.length) _g1.push(_g2[_g11++]);
	var _g2 = _g1;
	while(_g < _g2.length) {
		var power = _g2[_g];
		++_g;
		var this1 = this.icons;
		var _g1 = [];
		var _g11 = 0;
		var _g21 = objects_Power.__empty_constructs__.slice();
		while(_g11 < _g21.length) _g1.push(_g21[_g11++]);
		this1.set(power,textures[_g1.indexOf(power)]);
	}
	ui_UIObject.call(this,ui_Anchor.TOP_LEFT,ui_PositionReference.WINDOW,zero_utilities_Vec2.get(136,136));
	Main.game_events.listen(GameEvents.NEW_POWER,$bind(this,this.set_power));
	this.icon_sprite = PIXI.Sprite.from(textures[0]);
	this.icon_sprite.anchor.set(0.5);
	this.name_bg = new PIXI.Graphics();
	this.name_bg.position.set(64,0);
	this.name_text = new PIXI.Text("",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	this.name_text.position.set(96,0);
	this.name_text.anchor.set(0,0.5);
	var all = new PIXI.Container();
	this.container = new PIXI.Container();
	this.container.x = this.out_x;
	this.addChild(all);
	all.addChild(this.container);
	this.container.addChild(this.icon_sprite);
	this.container.addChild(this.name_bg);
	this.container.addChild(this.name_text);
	this.set_power({ power : objects_Power.JUMP});
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
ui_PowerIcon.__name__ = true;
ui_PowerIcon.__super__ = ui_UIObject;
ui_PowerIcon.prototype = $extend(ui_UIObject.prototype,{
	set_power: function(ev) {
		if(ev.power == null) {
			return;
		}
		var tmp = this.icons.get(ev.power);
		this.icon_sprite.texture = tmp;
		var tmp = this.names.get(ev.power);
		this.name_text.text = tmp;
		this.name_bg.clear();
		this.name_bg.beginFill(0,0.75);
		this.name_bg.drawRect(0,-30,this.name_text.width + 32,60);
		this.name_bg.arc(this.name_text.width + 32,0,30,-Math.PI / 2,Math.PI / 2);
		this.name_bg.endFill();
	}
	,resize: function(ev) {
		ui_UIObject.prototype.resize.call(this,ev);
		this.name_bg.visible = this.name_text.visible = this.scale.x > 0.5;
	}
	,set_state: function(ev) {
		var _g = ev.state;
		if(_g == null) {
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 1:
				this.state = ui_UIState.IN;
				break;
			case 0:case 2:
				this.state = ui_UIState.OUT;
				break;
			}
		}
	}
	,update: function(ev) {
		var tx;
		switch(this.state._hx_index) {
		case 0:
			tx = 0;
			break;
		case 1:
			tx = this.out_x;
			break;
		}
		this.container.x += (tx - this.container.x) * 0.1;
	}
});
var ui_PowerInstructions = function() {
	var _g = new haxe_ds_EnumValueMap();
	_g.set(objects_Power.JUMP,"TAP TO JUMP, RELEASE TAP TO FALL");
	_g.set(objects_Power.DOUBLE_JUMP,"TAP TO JUMP, TAP AGAIN TO JUMP IN MIDAIR");
	_g.set(objects_Power.JETPACK,"HOLD TO BOOST, RELEASE TO FALL");
	_g.set(objects_Power.GLIDE,"TAP TO JUMP, HOLD TO GLIDE");
	_g.set(objects_Power.GRAVITY_FLIP,"TAP TO REVERSE GRAVITY");
	_g.set(objects_Power.PING_PONG,"TAP TO SWITCH DIRECTION");
	_g.set(objects_Power.PARKOUR,"TAP TO DASH, RUN UP WALLS");
	_g.set(objects_Power.POGO,"HOLD TO SLOW DOWN AND BOUNCE HIGHER");
	_g.set(objects_Power.ZERO_GRAVITY,"HOLD TO BOOST, RELEASE TO AIM");
	_g.set(objects_Power.HIGH_JUMP,"HOLD TO CHARGE UP A HIGH JUMP");
	this.instructions = _g;
	this.out_target = -200;
	ui_UIObject.call(this,ui_Anchor.BOTTOM_CENTER,null,zero_utilities_Vec2.get(0,-64));
	this.bg = new PIXI.Graphics();
	this.text = new PIXI.Text("",{ fill : 16777215, fontSize : 36, fontFamily : "'Lilita One', Arial"});
	this.text.position.set(16,0);
	this.text.anchor.set(0.5);
	this.pointer_sprite = PIXI.Sprite.from("assets/pointer.png");
	this.pointer_sprite.anchor.set(0.5);
	var all = new PIXI.Container();
	this.container = new PIXI.Container();
	all.addChild(this.container);
	this.container.addChild(this.bg);
	this.container.addChild(this.text);
	this.container.addChild(this.pointer_sprite);
	this.addChild(all);
	Main.game_events.listen(GameEvents.NEW_POWER,$bind(this,this.set_power));
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
	this.set_power({ power : objects_Power.JUMP});
};
ui_PowerInstructions.__name__ = true;
ui_PowerInstructions.__super__ = ui_UIObject;
ui_PowerInstructions.prototype = $extend(ui_UIObject.prototype,{
	set_power: function(ev) {
		var tmp = this.instructions.get(ev.power);
		this.text.text = tmp;
		var bg_width = this.text.width + 112;
		this.bg.clear();
		this.bg.beginFill(0,0.75);
		this.bg.drawRoundedRect(-bg_width / 2,-32,bg_width,64,32);
		this.bg.endFill();
		this.pointer_sprite.position.set(-bg_width / 2 + 40,0);
	}
	,set_state: function(ev) {
		var _gthis = this;
		var _g = ev.state;
		if(_g != null) {
			switch(_g._hx_index) {
			case 0:
				this.state = ui_UIState.IN;
				this.set_title("TAP ANYWHERE TO BEGIN!");
				break;
			case 1:
				if(this.timer != null && this.timer.get_active()) {
					this.timer.cancel();
				}
				this.state = ui_UIState.IN;
				this.set_power({ power : objects_Power.JUMP});
				break;
			case 2:
				this.timer = zero_utilities_Timer.get(1,function() {
					_gthis.state = ui_UIState.OUT;
				});
				this.set_title("TAP ANYWHERE TO PLAY AGAIN!");
				break;
			}
		}
	}
	,set_title: function(t) {
		this.text.text = t;
		var bg_width = this.text.width + 112;
		this.bg.clear();
		this.bg.beginFill(0,0.75);
		this.bg.drawRoundedRect(-bg_width / 2,-32,bg_width,64,32);
		this.bg.endFill();
		this.pointer_sprite.position.set(-bg_width / 2 + 40,0);
	}
	,update: function(ev) {
		var target_y;
		switch(this.state._hx_index) {
		case 0:
			target_y = 0;
			break;
		case 1:
			target_y = this.out_target;
			break;
		}
		this.container.y += (target_y - this.container.y) * 0.1;
	}
});
var ui_PulseSprite = function(clone,time,amt) {
	if(amt == null) {
		amt = 2;
	}
	if(time == null) {
		time = 0.2;
	}
	var _gthis = this;
	PIXI.Sprite.call(this);
	this.transform.setFromMatrix(clone.transform.worldTransform);
	this.texture = clone.texture;
	zero_utilities_Tween.tween(this.scale,time,{ x : this.scale.x * amt, y : this.scale.y * amt},{ ease : zero_utilities_Ease.quadOut});
	zero_utilities_Tween.tween(this,time,{ alpha : 0},{ ease : zero_utilities_Ease.quintOut});
	zero_utilities_Timer.get(time + 0.1,function() {
		_gthis.destroy(false);
	});
	if(!ui_Share.i.active) {
		Main.app.stage.addChild(this);
	}
	this.anchor.set(0.5);
};
ui_PulseSprite.__name__ = true;
ui_PulseSprite.__super__ = PIXI.Sprite;
ui_PulseSprite.prototype = $extend(PIXI.Sprite.prototype,{
});
var ui_Score = function() {
	this.out_x = 400;
	var _gthis = this;
	ui_UIObject.call(this,ui_Anchor.TOP_RIGHT,ui_PositionReference.WINDOW,zero_utilities_Vec2.get(-120,120));
	this.score_text = new PIXI.Text("0",{ fill : 16753408, fontSize : 144, fontFamily : "'Lilita One', Arial", strokeThickness : 16, stroke : 0});
	this.score_text.anchor.set(0.5);
	this.container = new PIXI.Container();
	this.container.x = this.out_x;
	this.addChild(this.container);
	this.container.addChild(this.score_text);
	Main.game_events.listen(GameEvents.NEW_POWER,function(e) {
		_gthis.score_text.text = "" + util_GameState_points;
	});
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
ui_Score.__name__ = true;
ui_Score.__super__ = ui_UIObject;
ui_Score.prototype = $extend(ui_UIObject.prototype,{
	set_state: function(ev) {
		var _g = ev.state;
		if(_g == null) {
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 1:
				this.state = ui_UIState.IN;
				break;
			case 0:case 2:
				this.state = ui_UIState.OUT;
				break;
			}
		}
	}
	,update: function(ev) {
		var tx;
		switch(this.state._hx_index) {
		case 0:
			tx = 0;
			break;
		case 1:
			tx = this.out_x;
			break;
		}
		this.container.x += (tx - this.container.x) * 0.1;
	}
});
var ui_Share = function() {
	var _gthis = this;
	ui_Share.i = this;
	ui_UIObject.call(this,ui_Anchor.MIDDLE_CENTER,ui_PositionReference.WINDOW,zero_utilities_Vec2.get());
	this.container = new PIXI.Container();
	this.bg = new PIXI.Graphics();
	this.bg.beginFill(0,0.75);
	this.bg.drawRect(-1920,-1920,3840,3840);
	this.bg.endFill();
	this.bg.interactive = true;
	this.bg.on("pointertap",function(e) {
		_gthis.hide();
	});
	var panel = new PIXI.Graphics();
	panel.interactive = true;
	panel.beginFill(0,0.75);
	panel.drawRect(-376,-182,768,380);
	panel.endFill();
	panel.beginFill(16777215);
	panel.drawRect(-384,-190,768,380);
	panel.endFill();
	var linkedin = new PIXI.Sprite(Main.assets.resources["assets/linkedin.png"].texture);
	linkedin.anchor.set(0.5);
	linkedin.position.set(-112,-48);
	linkedin.interactive = linkedin.buttonMode = true;
	linkedin.on("pointertap",function(e) {
		util_Social_linked_in_share();
	});
	var facebook = new PIXI.Sprite(Main.assets.resources["assets/facebook.png"].texture);
	facebook.anchor.set(0.5);
	facebook.position.set(0,-48);
	facebook.interactive = facebook.buttonMode = true;
	facebook.on("pointertap",function(e) {
		util_Social_facebook_share();
	});
	var twitter = new PIXI.Sprite(Main.assets.resources["assets/twitter.png"].texture);
	twitter.anchor.set(0.5);
	twitter.position.set(112,-48);
	twitter.interactive = twitter.buttonMode = true;
	twitter.on("pointertap",function(e) {
		util_Social_twitter_share();
	});
	this.copy = new PIXI.Container();
	var copy_text = new PIXI.Text("http://unboxedtechnology.com/skill-swap-game/",{ fontFamily : "Arial", fontSize : 24, fontWeight : "bold", fill : 0});
	this.copy_icon = new PIXI.Sprite(Main.assets.resources["assets/copy.png"].texture);
	copy_text.anchor.set(1,0.5);
	this.copy_icon.anchor.set(0,0.5);
	copy_text.x = -8;
	this.copy_icon.x = 8;
	this.copy.addChild(copy_text);
	this.copy.addChild(this.copy_icon);
	this.copy.position.set(240,48);
	this.copy.interactive = this.copy.buttonMode = true;
	this.copy.on("pointertap",function(e) {
		util_Social_copy_share();
	});
	this.copy_confirmation = PIXI.Sprite.from(Main.assets.resources["assets/copy_confirmation.png"].texture);
	this.copy_confirmation.anchor.set(0.5);
	this.copy_confirmation.position.set(0,96);
	this.copy_confirmation.alpha = 0;
	this.addChild(this.container);
	this.container.addChild(this.bg);
	this.container.addChild(panel);
	this.container.addChild(linkedin);
	this.container.addChild(facebook);
	this.container.addChild(twitter);
	this.container.addChild(this.copy);
	this.container.addChild(this.copy_confirmation);
	this.hide();
};
ui_Share.__name__ = true;
ui_Share.__super__ = ui_UIObject;
ui_Share.prototype = $extend(ui_UIObject.prototype,{
	show: function() {
		this.container.x = 0;
		this.active = true;
	}
	,hide: function() {
		this.container.x = 5120;
		zero_utilities_Timer.get(0.1,function() {
			ui_HighScore.i.just_pressed = false;
		});
		this.active = false;
	}
});
var ui_Anchor = $hxEnums["ui.Anchor"] = { __ename__:true,__constructs__:null
	,TOP_LEFT: {_hx_name:"TOP_LEFT",_hx_index:0,__enum__:"ui.Anchor",toString:$estr}
	,TOP_CENTER: {_hx_name:"TOP_CENTER",_hx_index:1,__enum__:"ui.Anchor",toString:$estr}
	,TOP_RIGHT: {_hx_name:"TOP_RIGHT",_hx_index:2,__enum__:"ui.Anchor",toString:$estr}
	,MIDDLE_LEFT: {_hx_name:"MIDDLE_LEFT",_hx_index:3,__enum__:"ui.Anchor",toString:$estr}
	,MIDDLE_CENTER: {_hx_name:"MIDDLE_CENTER",_hx_index:4,__enum__:"ui.Anchor",toString:$estr}
	,MIDDLE_RIGHT: {_hx_name:"MIDDLE_RIGHT",_hx_index:5,__enum__:"ui.Anchor",toString:$estr}
	,BOTTOM_LEFT: {_hx_name:"BOTTOM_LEFT",_hx_index:6,__enum__:"ui.Anchor",toString:$estr}
	,BOTTOM_CENTER: {_hx_name:"BOTTOM_CENTER",_hx_index:7,__enum__:"ui.Anchor",toString:$estr}
	,BOTTOM_RIGHT: {_hx_name:"BOTTOM_RIGHT",_hx_index:8,__enum__:"ui.Anchor",toString:$estr}
};
ui_Anchor.__constructs__ = [ui_Anchor.TOP_LEFT,ui_Anchor.TOP_CENTER,ui_Anchor.TOP_RIGHT,ui_Anchor.MIDDLE_LEFT,ui_Anchor.MIDDLE_CENTER,ui_Anchor.MIDDLE_RIGHT,ui_Anchor.BOTTOM_LEFT,ui_Anchor.BOTTOM_CENTER,ui_Anchor.BOTTOM_RIGHT];
ui_Anchor.__empty_constructs__ = [ui_Anchor.TOP_LEFT,ui_Anchor.TOP_CENTER,ui_Anchor.TOP_RIGHT,ui_Anchor.MIDDLE_LEFT,ui_Anchor.MIDDLE_CENTER,ui_Anchor.MIDDLE_RIGHT,ui_Anchor.BOTTOM_LEFT,ui_Anchor.BOTTOM_CENTER,ui_Anchor.BOTTOM_RIGHT];
var ui_PositionReference = $hxEnums["ui.PositionReference"] = { __ename__:true,__constructs__:null
	,PARENT: {_hx_name:"PARENT",_hx_index:0,__enum__:"ui.PositionReference",toString:$estr}
	,WINDOW: {_hx_name:"WINDOW",_hx_index:1,__enum__:"ui.PositionReference",toString:$estr}
};
ui_PositionReference.__constructs__ = [ui_PositionReference.PARENT,ui_PositionReference.WINDOW];
ui_PositionReference.__empty_constructs__ = [ui_PositionReference.PARENT,ui_PositionReference.WINDOW];
var ui_UIState = $hxEnums["ui.UIState"] = { __ename__:true,__constructs__:null
	,IN: {_hx_name:"IN",_hx_index:0,__enum__:"ui.UIState",toString:$estr}
	,OUT: {_hx_name:"OUT",_hx_index:1,__enum__:"ui.UIState",toString:$estr}
};
ui_UIState.__constructs__ = [ui_UIState.IN,ui_UIState.OUT];
ui_UIState.__empty_constructs__ = [ui_UIState.IN,ui_UIState.OUT];
var ui_Unboxed = function() {
	ui_UIObject.call(this,ui_Anchor.BOTTOM_RIGHT,ui_PositionReference.WINDOW,zero_utilities_Vec2.from_array_int([-192,-80]));
	var bg = new PIXI.Graphics();
	bg.beginFill(16777215);
	bg.drawRoundedRect(-140,-56,280,512,16);
	var text = new PIXI.Text("Powered by",{ fill : 2965072, fontSize : 20, fontFamily : "'Lilita One', Arial"});
	text.position.set(20,-20);
	text.anchor.set(0.5);
	var sprite = PIXI.Sprite.from("assets/unboxed.png");
	sprite.anchor.set(0.5,0.25);
	sprite.scale.set(0.8);
	this.container = new PIXI.Container();
	this.addChild(this.container);
	this.container.addChild(bg);
	this.container.addChild(text);
	this.container.addChild(sprite);
	Main.game_events.listen(GameEvents.GAME_STATE,$bind(this,this.set_state));
	Main.game_events.listen(GameEvents.UPDATE,$bind(this,this.update));
};
ui_Unboxed.__name__ = true;
ui_Unboxed.__super__ = ui_UIObject;
ui_Unboxed.prototype = $extend(ui_UIObject.prototype,{
	set_state: function(ev) {
		var _g = ev.state;
		if(_g == null) {
			this.state = ui_UIState.OUT;
		} else {
			switch(_g._hx_index) {
			case 1:
				this.state = ui_UIState.OUT;
				break;
			case 0:case 2:
				this.state = ui_UIState.IN;
				break;
			}
		}
	}
	,update: function(ev) {
		var fh = this.container;
		var fh1 = fh.y;
		var tmp;
		switch(this.state._hx_index) {
		case 0:
			tmp = (0 - this.container.y) * 0.1;
			break;
		case 1:
			tmp = (320 - this.container.y) * 0.1;
			break;
		}
		fh.y = fh1 + tmp;
	}
});
var util_Sound = $hxEnums["util.Sound"] = { __ename__:true,__constructs__:null
	,DOUBLE_JUMP: {_hx_name:"DOUBLE_JUMP",_hx_index:0,__enum__:"util.Sound",toString:$estr}
	,GLIDE: {_hx_name:"GLIDE",_hx_index:1,__enum__:"util.Sound",toString:$estr}
	,GRAVITY_FLIP: {_hx_name:"GRAVITY_FLIP",_hx_index:2,__enum__:"util.Sound",toString:$estr}
	,HIGH_JUMP: {_hx_name:"HIGH_JUMP",_hx_index:3,__enum__:"util.Sound",toString:$estr}
	,JETPACK: {_hx_name:"JETPACK",_hx_index:4,__enum__:"util.Sound",toString:$estr}
	,JUMP: {_hx_name:"JUMP",_hx_index:5,__enum__:"util.Sound",toString:$estr}
	,NICE_JOB: {_hx_name:"NICE_JOB",_hx_index:6,__enum__:"util.Sound",toString:$estr}
	,PARKOUR: {_hx_name:"PARKOUR",_hx_index:7,__enum__:"util.Sound",toString:$estr}
	,PING_PONG: {_hx_name:"PING_PONG",_hx_index:8,__enum__:"util.Sound",toString:$estr}
	,POGO: {_hx_name:"POGO",_hx_index:9,__enum__:"util.Sound",toString:$estr}
	,SKILL_SWAP: {_hx_name:"SKILL_SWAP",_hx_index:10,__enum__:"util.Sound",toString:$estr}
	,ZERO_GRAVITY: {_hx_name:"ZERO_GRAVITY",_hx_index:11,__enum__:"util.Sound",toString:$estr}
	,SFX_BOOST: {_hx_name:"SFX_BOOST",_hx_index:12,__enum__:"util.Sound",toString:$estr}
	,SFX_BOUNCE: {_hx_name:"SFX_BOUNCE",_hx_index:13,__enum__:"util.Sound",toString:$estr}
	,SFX_CHARGE: {_hx_name:"SFX_CHARGE",_hx_index:14,__enum__:"util.Sound",toString:$estr}
	,SFX_DASH: {_hx_name:"SFX_DASH",_hx_index:15,__enum__:"util.Sound",toString:$estr}
	,SFX_DIE: {_hx_name:"SFX_DIE",_hx_index:16,__enum__:"util.Sound",toString:$estr}
	,SFX_DOUBLE_JUMP: {_hx_name:"SFX_DOUBLE_JUMP",_hx_index:17,__enum__:"util.Sound",toString:$estr}
	,SFX_GET: {_hx_name:"SFX_GET",_hx_index:18,__enum__:"util.Sound",toString:$estr}
	,SFX_GRAV_SHIFT: {_hx_name:"SFX_GRAV_SHIFT",_hx_index:19,__enum__:"util.Sound",toString:$estr}
	,SFX_HURT: {_hx_name:"SFX_HURT",_hx_index:20,__enum__:"util.Sound",toString:$estr}
	,SFX_JUMP: {_hx_name:"SFX_JUMP",_hx_index:21,__enum__:"util.Sound",toString:$estr}
	,SFX_LAND: {_hx_name:"SFX_LAND",_hx_index:22,__enum__:"util.Sound",toString:$estr}
	,SFX_POGO: {_hx_name:"SFX_POGO",_hx_index:23,__enum__:"util.Sound",toString:$estr}
	,SFX_PONG: {_hx_name:"SFX_PONG",_hx_index:24,__enum__:"util.Sound",toString:$estr}
	,SFX_PONG_HIT: {_hx_name:"SFX_PONG_HIT",_hx_index:25,__enum__:"util.Sound",toString:$estr}
	,SFX_SPAWN: {_hx_name:"SFX_SPAWN",_hx_index:26,__enum__:"util.Sound",toString:$estr}
	,SFX_SPIKES_DOWN: {_hx_name:"SFX_SPIKES_DOWN",_hx_index:27,__enum__:"util.Sound",toString:$estr}
	,SFX_SPIKES_UP: {_hx_name:"SFX_SPIKES_UP",_hx_index:28,__enum__:"util.Sound",toString:$estr}
	,SFX_TWINKLE: {_hx_name:"SFX_TWINKLE",_hx_index:29,__enum__:"util.Sound",toString:$estr}
};
util_Sound.__constructs__ = [util_Sound.DOUBLE_JUMP,util_Sound.GLIDE,util_Sound.GRAVITY_FLIP,util_Sound.HIGH_JUMP,util_Sound.JETPACK,util_Sound.JUMP,util_Sound.NICE_JOB,util_Sound.PARKOUR,util_Sound.PING_PONG,util_Sound.POGO,util_Sound.SKILL_SWAP,util_Sound.ZERO_GRAVITY,util_Sound.SFX_BOOST,util_Sound.SFX_BOUNCE,util_Sound.SFX_CHARGE,util_Sound.SFX_DASH,util_Sound.SFX_DIE,util_Sound.SFX_DOUBLE_JUMP,util_Sound.SFX_GET,util_Sound.SFX_GRAV_SHIFT,util_Sound.SFX_HURT,util_Sound.SFX_JUMP,util_Sound.SFX_LAND,util_Sound.SFX_POGO,util_Sound.SFX_PONG,util_Sound.SFX_PONG_HIT,util_Sound.SFX_SPAWN,util_Sound.SFX_SPIKES_DOWN,util_Sound.SFX_SPIKES_UP,util_Sound.SFX_TWINKLE];
util_Sound.__empty_constructs__ = [util_Sound.DOUBLE_JUMP,util_Sound.GLIDE,util_Sound.GRAVITY_FLIP,util_Sound.HIGH_JUMP,util_Sound.JETPACK,util_Sound.JUMP,util_Sound.NICE_JOB,util_Sound.PARKOUR,util_Sound.PING_PONG,util_Sound.POGO,util_Sound.SKILL_SWAP,util_Sound.ZERO_GRAVITY,util_Sound.SFX_BOOST,util_Sound.SFX_BOUNCE,util_Sound.SFX_CHARGE,util_Sound.SFX_DASH,util_Sound.SFX_DIE,util_Sound.SFX_DOUBLE_JUMP,util_Sound.SFX_GET,util_Sound.SFX_GRAV_SHIFT,util_Sound.SFX_HURT,util_Sound.SFX_JUMP,util_Sound.SFX_LAND,util_Sound.SFX_POGO,util_Sound.SFX_PONG,util_Sound.SFX_PONG_HIT,util_Sound.SFX_SPAWN,util_Sound.SFX_SPIKES_DOWN,util_Sound.SFX_SPIKES_UP,util_Sound.SFX_TWINKLE];
var util_Audio = function() { };
util_Audio.__name__ = true;
util_Audio.init = function() {
	Howler.init();
	util_Audio.music = new Howl({ src : ["assets/audio/music.ogg","assets/audio/music.mp3","assets/audio/music.wav"], loop : true, preload : true, volume : 0.9});
	var _g = 0;
	var _g1 = [];
	var _g11 = 0;
	var _g2 = util_Sound.__empty_constructs__.slice();
	while(_g11 < _g2.length) _g1.push(_g2[_g11++]);
	var _g2 = _g1;
	while(_g < _g2.length) {
		var sound = _g2[_g];
		++_g;
		var howl = new Howl({ src : ["assets/audio/" + Std.string(sound).toLowerCase() + ".ogg","assets/audio/" + Std.string(sound).toLowerCase() + ".mp3","assets/audio/" + Std.string(sound).toLowerCase() + ".wav"], loop : false, preload : true, volume : util_Audio.volume.get(sound)});
		util_Audio.sounds.set(sound,howl);
		util_Audio.cooldowns.set(sound,true);
	}
};
util_Audio.play = function(sound) {
	if(!util_Audio.cooldowns.get(sound)) {
		return;
	}
	util_Audio.sounds.get(sound).play();
	util_Audio.cooldowns.set(sound,false);
	zero_utilities_Timer.get(0.1,function() {
		util_Audio.cooldowns.set(sound,true);
	});
};
util_Audio.stop = function(sound) {
	util_Audio.sounds.get(sound).stop();
};
util_Audio.play_music = function() {
	if(!util_Audio.music.playing()) {
		util_Audio.music.play();
	}
};
var util_Dolly = function() {
	this.offset = zero_utilities_Vec2.get(0,0);
	this.scroll = zero_utilities_Vec2.get(0,-108);
	PIXI.Container.call(this);
};
util_Dolly.__name__ = true;
util_Dolly.__super__ = PIXI.Container;
util_Dolly.prototype = $extend(PIXI.Container.prototype,{
	update: function(ev) {
		this.position.set(this.wide ? -224 : -Math.min(Math.max(this.scroll[0],64 - this.offset[0]),384 + this.offset[0]),-this.scroll[1] + this.offset[1]);
	}
	,resize: function(ev) {
		this.wide = ev.width / states_PlayState.zoom > states_PlayState.game_width;
		var this1 = this.offset;
		var x = -ev.width / states_PlayState.zoom / 2;
		var y = -ev.height / states_PlayState.zoom / 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x);
		this1[1] = zero_utilities_Vec2.zero(y);
	}
});
function util_GraphicUtil_textures_from_spritesheet(asset,width_in_frames,height_in_frames,frame_width,frame_height) {
	var base = Main.assets.resources[asset].texture;
	var _g = [];
	var _g1 = 0;
	while(_g1 < height_in_frames) {
		var j = _g1++;
		var _g2 = 0;
		while(_g2 < width_in_frames) _g.push(new PIXI.Texture(base.baseTexture,new PIXI.Rectangle(_g2++ * frame_width,j * frame_height,frame_width,frame_height)));
	}
	return _g;
}
var util_Pointer = function() { };
util_Pointer.__name__ = true;
util_Pointer.__properties__ = {get_just_released:"get_just_released",get_just_pressed:"get_just_pressed"};
util_Pointer.init = function() {
	window.addEventListener("pointerdown",function(e) {
		return util_Pointer._pressed = true;
	});
	window.addEventListener("pointerup",function(e) {
		return util_Pointer._pressed = false;
	});
	window.addEventListener("pointerout",function(e) {
		return util_Pointer._pressed = false;
	});
	Main.game_events.listen(GameEvents.PRE_UPDATE,function(ev) {
		util_Pointer.pressed = util_Pointer._pressed;
	});
	Main.game_events.listen(GameEvents.POST_UPDATE,function(ev) {
		util_Pointer.last = util_Pointer.pressed;
	});
};
util_Pointer.get_just_pressed = function() {
	if(util_Pointer.pressed) {
		return !util_Pointer.last;
	} else {
		return false;
	}
};
util_Pointer.get_just_released = function() {
	if(!util_Pointer.pressed) {
		return util_Pointer.last;
	} else {
		return false;
	}
};
function util_Social_linked_in_share() {
	$global.location.href = "https://www.linkedin.com/shareArticle?url=https://unboxedtechnology.com/skill-swap-game/";
}
function util_Social_twitter_share() {
	var tmp = "https://twitter.com/intent/tweet?url=http%3A%2F%2Funboxedtechnology.com%2Fskill-swap-game%2F&text=I%20got%20" + util_GameState_high_score;
	$global.location.href = tmp + "%20points%20testing%20my%20skill%20agility%20with%20Unboxed%20Training%20%26%20Technology!%20See%20how%20many%20skills%20you%20can%20unpack%20at";
}
function util_Social_facebook_share() {
	FB.ui({ display : "popup", method : "share", href : "http://unboxedtechnology.com/skill-swap-game/", quote : "I got " + util_GameState_high_score + " points testing my skill agility with Unboxed Training & Technology! See how many skills you can unpack at http://unboxedtechnology.com/skill-swap-game/"});
}
function util_Social_copy_share() {
	var text = "http://unboxedtechnology.com/skill-swap-game/";
	$global.navigator.clipboard.writeText(text).then(function(e) {
		util_Social_copied();
	},function(e) {
		util_Social_copy_share_fallback(text);
	});
}
function util_Social_copy_share_fallback(text) {
	var textArea = window.document.createElement("textarea");
	textArea.value = text;
	textArea.style.top = "0";
	textArea.style.left = "0";
	textArea.style.position = "fixed";
	window.document.body.appendChild(textArea);
	textArea.focus();
	textArea.select();
	try {
		if(window.document.execCommand("copy")) {
			util_Social_copied();
		} else {
			util_Social_not_copied();
		}
	} catch( _g ) {
		util_Social_not_copied();
	}
	window.document.body.removeChild(textArea);
}
function util_Social_copied() {
	ui_Share.i.copy_confirmation.alpha = 1;
	zero_utilities_Timer.get(4,function() {
		ui_Share.i.copy_confirmation.alpha = 0;
	});
}
function util_Social_not_copied() {
	console.log("src/util/Social.hx:74:","Fallback: Oops, unable to copy");
}
var zero_utilities_Vec2 = {};
zero_utilities_Vec2.zero = function(n) {
	if(Math.abs(n) <= zero_utilities_Vec2.epsilon) {
		return 0;
	} else {
		return n;
	}
};
zero_utilities_Vec2.from_array_float = function(input) {
	return zero_utilities_Vec2.get(input[0],input[1]);
};
zero_utilities_Vec2.from_array_int = function(input) {
	return zero_utilities_Vec2.get(input[0],input[1]);
};
zero_utilities_Vec2.get = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(zero_utilities_Vec2.pool != null && zero_utilities_Vec2.pool.length > 0) {
		var this1 = zero_utilities_Vec2.pool.shift();
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		this1[0] = zero_utilities_Vec2.zero(x1);
		this1[1] = zero_utilities_Vec2.zero(y1);
		return this1;
	} else {
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		return [x1,y1];
	}
};
zero_utilities_Vec2.add = function(v1,v2) {
	return zero_utilities_Vec2.get(v1[0] + v2[0],v1[1] + v2[1]);
};
zero_utilities_Vec2.subtract = function(v1,v2) {
	return zero_utilities_Vec2.get(v1[0] - v2[0],v1[1] - v2[1]);
};
zero_utilities_Vec2.multiply_f = function(v,n) {
	return zero_utilities_Vec2.get(v[0] * n,v[1] * n);
};
var zero_extensions_ArrayExt = function() { };
zero_extensions_ArrayExt.__name__ = true;
zero_extensions_ArrayExt.shuffle = function(array) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var n = array.length;
		var j = Math.random() * n | 0;
		var a = array[i];
		array[i] = array[j];
		array[j] = a;
	}
	return array;
};
var zero_utilities_AnimationManager = function(options) {
	this.data = new haxe_ds_StringMap();
	this.animation_index = -1;
	this.on_frame_change = options.on_frame_change;
};
zero_utilities_AnimationManager.__name__ = true;
zero_utilities_AnimationManager.prototype = {
	add: function(data) {
		if(data.duration == null) {
			data.duration = 1;
		}
		if(data.type == null) {
			data.type = zero_utilities_TweenType.LOOP_FORWARDS;
		}
		if(data.ease == null) {
			data.ease = function(n) {
				return n;
			};
		}
		this.data.h[data.name] = data;
		return this;
	}
	,play: function(name,period,force) {
		if(force == null) {
			force = false;
		}
		if(period == null) {
			period = 0;
		}
		if(!Object.prototype.hasOwnProperty.call(this.data.h,name)) {
			return;
		}
		if(this.current != null && this.current.name == name && !force) {
			return;
		}
		this.current = this.data.h[name];
		this.set_animation_index(0);
		if(this.tween != null) {
			this.tween.active = false;
		}
		var tmp = this.current.frames.length - 1;
		this.tween = zero_utilities_Tween.get(this).duration(this.current.duration).ease(this.current.ease).set_period(period).type(this.current.type).prop({ animation_index : tmp});
		if(this.current.on_complete != null) {
			this.tween.on_complete(this.current.on_complete);
		}
		this.on_frame_change(this.current.frames[0]);
	}
	,set_animation_index: function(n) {
		if(this.current == null) {
			return n;
		}
		n = Math.round(n) % this.current.frames.length;
		if(this.animation_index == n) {
			return n;
		}
		this.on_frame_change(this.current.frames[n]);
		return this.animation_index = n;
	}
	,destroy: function() {
		this.tween.destroy();
		this.data.h = Object.create(null);
		this.current = null;
	}
	,get_active: function() {
		return this.tween.active;
	}
	,__properties__: {get_active:"get_active",set_animation_index:"set_animation_index"}
};
var zero_utilities_Ease = function() { };
zero_utilities_Ease.__name__ = true;
zero_utilities_Ease.quadOut = function(t) {
	return -t * (t - 2);
};
zero_utilities_Ease.quintOut = function(t) {
	return --t * t * t * t * t + 1;
};
zero_utilities_Ease.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
zero_utilities_Ease.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
zero_utilities_Ease.elasticOut = function(t) {
	return zero_utilities_Ease.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - zero_utilities_Ease.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / zero_utilities_Ease.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / zero_utilities_Ease.ELASTIC_PERIOD) + 1;
};
var zero_utilities_OgmoUtils = function() { };
zero_utilities_OgmoUtils.__name__ = true;
zero_utilities_OgmoUtils.get_tile_layer = function(data,name) {
	var _g = 0;
	var _g1 = data.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		if(layer.name == name) {
			return layer;
		}
	}
	return null;
};
zero_utilities_OgmoUtils.get_entity_layer = function(data,name) {
	var _g = 0;
	var _g1 = data.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		if(layer.name == name) {
			return layer;
		}
	}
	return null;
};
zero_utilities_OgmoUtils.load_entities = function(layer,fn) {
	var _g = 0;
	var _g1 = layer.entities;
	while(_g < _g1.length) fn(_g1[_g++]);
};
var zero_utilities_SyncedSin = function() { };
zero_utilities_SyncedSin.__name__ = true;
zero_utilities_SyncedSin.update = function(dt) {
	zero_utilities_SyncedSin.counter = (zero_utilities_SyncedSin.counter + dt) % 1;
};
zero_utilities_SyncedSin.synced_sin = function(wavelength) {
	return Math.sin(zero_utilities_SyncedSin.counter * Math.PI * 2 / wavelength);
};
var zero_utilities_Timer = function() {
};
zero_utilities_Timer.__name__ = true;
zero_utilities_Timer.get = function(time,fn,repeat) {
	if(repeat == null) {
		repeat = 1;
	}
	var timer = zero_utilities_Timer.pool.length > 0 ? zero_utilities_Timer.pool.shift() : new zero_utilities_Timer();
	timer.time = time;
	timer.fn = fn;
	timer.repeat = repeat;
	timer.paused = false;
	timer.elapsed = 0;
	zero_utilities_Timer.timers.push(timer);
	return timer;
};
zero_utilities_Timer.update = function(dt) {
	var _g = 0;
	var _g1 = zero_utilities_Timer.timers;
	while(_g < _g1.length) _g1[_g++].run(dt);
};
zero_utilities_Timer.prototype = {
	get_active: function() {
		return zero_utilities_Timer.timers.indexOf(this) >= 0;
	}
	,cancel: function() {
		if(HxOverrides.remove(zero_utilities_Timer.timers,this)) {
			zero_utilities_Timer.pool.push(this);
		}
	}
	,pause: function() {
		this.paused = true;
	}
	,run: function(dt) {
		if(this.paused) {
			return;
		}
		this.elapsed += dt;
		if(this.time - this.elapsed > zero_utilities_Timer.epsilon) {
			return;
		}
		this.fn();
		this.elapsed = 0;
		this.repeat--;
		if(this.repeat != 0) {
			return;
		}
		this.cancel();
	}
	,__properties__: {get_active:"get_active"}
};
var zero_utilities_Tween = function() {
	this.active = true;
};
zero_utilities_Tween.__name__ = true;
zero_utilities_Tween.get = function(target) {
	var tween = zero_utilities_Tween.pool.shift();
	if(tween == null) {
		tween = new zero_utilities_Tween();
	}
	tween.init(target);
	tween.active = true;
	zero_utilities_Tween.active_tweens.push(tween);
	return tween;
};
zero_utilities_Tween.tween = function(target,duration,properties,options) {
	var t = zero_utilities_Tween.get(target).duration(duration).prop(properties);
	if(options == null) {
		return t;
	}
	if(options.delay != null) {
		t.delay(options.delay);
	}
	if(options.ease != null) {
		t.ease(options.ease);
	}
	if(options.type != null) {
		t.type(options.type);
	}
	if(options.on_complete != null) {
		t.on_complete(options.on_complete);
	}
	return t;
};
zero_utilities_Tween.update = function(dt) {
	var _g = 0;
	var _g1 = zero_utilities_Tween.active_tweens;
	while(_g < _g1.length) _g1[_g++].update_tween(dt);
};
zero_utilities_Tween.prototype = {
	duration: function(time) {
		this.data.duration = time;
		return this;
	}
	,prop: function(properties) {
		var _g = 0;
		var _g1 = Reflect.fields(properties);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var start = Reflect.getProperty(this.data.target,field);
			if(((this.data.target) instanceof Array)) {
				switch(field) {
				case "g":case "y":
					start = this.data.target[1];
					break;
				case "a":case "height":case "w":
					start = this.data.target[3];
					break;
				case "b":case "width":case "z":
					start = this.data.target[2];
					break;
				case "r":case "x":
					start = this.data.target[0];
					break;
				}
			}
			this.data.properties.push({ field : field, start : start == null ? 0 : start, end : Reflect.field(properties,field)});
		}
		return this;
	}
	,ease: function(ease) {
		this.data.ease = ease;
		return this;
	}
	,delay: function(time) {
		this.data.delay = time;
		this.data.delay_ref = time;
		return this;
	}
	,on_complete: function(fn) {
		this.data.on_complete = fn;
		return this;
	}
	,type: function(type) {
		this.data.type = type;
		var tmp;
		switch(type._hx_index) {
		case 1:case 3:
			tmp = true;
			break;
		case 0:case 2:case 4:
			tmp = false;
			break;
		}
		this.reverse = tmp;
		return this;
	}
	,set_period: function(period) {
		this.period = Math.max(Math.min(period,1),0);
		return this;
	}
	,destroy: function() {
		this.data = null;
		HxOverrides.remove(zero_utilities_Tween.active_tweens,this);
		this.active = false;
		zero_utilities_Tween.pool.push(this);
	}
	,init: function(target) {
		this.data = this.get_default_data(target);
		this.period = 0;
		this.reverse = false;
	}
	,get_default_data: function(target) {
		return { target : target, duration : 1, properties : [], ease : function(f) {
			return f;
		}, delay : 0, delay_ref : 0, on_complete : function() {
		}, type : zero_utilities_TweenType.SINGLE_SHOT_FORWARDS};
	}
	,update_tween: function(dt) {
		if(!this.active) {
			return;
		}
		dt = this.update_dt(dt);
		this.update_period(dt);
	}
	,update_dt: function(dt) {
		if(this.data.delay > 0) {
			this.data.delay -= dt;
			if(this.data.delay > 0) {
				return 0;
			}
			dt = -this.data.delay;
		}
		return dt;
	}
	,update_period: function(dt) {
		if(dt == 0) {
			return;
		}
		var d = dt / this.data.duration;
		this.period += this.reverse ? -d : d;
		this.period = Math.max(Math.min(this.period,1),0);
		if(this.period == 0 || this.period == 1) {
			this.complete();
		} else {
			this.apply();
		}
	}
	,complete: function() {
		this.apply();
		this.data.on_complete();
		switch(this.data.type._hx_index) {
		case 0:case 1:
			this.destroy();
			break;
		case 2:case 3:case 4:
			this.reset();
			break;
		}
	}
	,reset: function() {
		if(this.data.type == zero_utilities_TweenType.PING_PONG) {
			this.reverse = !this.reverse;
		}
		this.data.delay = this.data.delay_ref;
		this.period = this.reverse ? 1 : 0;
	}
	,apply: function() {
		if(this.data == null) {
			return;
		}
		var eased_period = this.data.ease(this.period);
		var _g = 0;
		var _g1 = this.data.properties;
		while(_g < _g1.length) {
			var property = _g1[_g];
			++_g;
			var t = eased_period / 1;
			var val = (1 - t) * property.start + t * property.end;
			if(((this.data.target) instanceof Array)) {
				switch(property.field) {
				case "g":case "y":
					this.data.target[1] = val;
					break;
				case "a":case "height":case "w":
					this.data.target[3] = val;
					break;
				case "b":case "width":case "z":
					this.data.target[2] = val;
					break;
				case "r":case "x":
					this.data.target[0] = val;
					break;
				}
			} else {
				Reflect.setProperty(this.data.target,property.field,val);
			}
		}
	}
};
var zero_utilities_TweenType = $hxEnums["zero.utilities.TweenType"] = { __ename__:true,__constructs__:null
	,SINGLE_SHOT_FORWARDS: {_hx_name:"SINGLE_SHOT_FORWARDS",_hx_index:0,__enum__:"zero.utilities.TweenType",toString:$estr}
	,SINGLE_SHOT_BACKWARDS: {_hx_name:"SINGLE_SHOT_BACKWARDS",_hx_index:1,__enum__:"zero.utilities.TweenType",toString:$estr}
	,LOOP_FORWARDS: {_hx_name:"LOOP_FORWARDS",_hx_index:2,__enum__:"zero.utilities.TweenType",toString:$estr}
	,LOOP_BACKWARDS: {_hx_name:"LOOP_BACKWARDS",_hx_index:3,__enum__:"zero.utilities.TweenType",toString:$estr}
	,PING_PONG: {_hx_name:"PING_PONG",_hx_index:4,__enum__:"zero.utilities.TweenType",toString:$estr}
};
zero_utilities_TweenType.__constructs__ = [zero_utilities_TweenType.SINGLE_SHOT_FORWARDS,zero_utilities_TweenType.SINGLE_SHOT_BACKWARDS,zero_utilities_TweenType.LOOP_FORWARDS,zero_utilities_TweenType.LOOP_BACKWARDS,zero_utilities_TweenType.PING_PONG];
zero_utilities_TweenType.__empty_constructs__ = [zero_utilities_TweenType.SINGLE_SHOT_FORWARDS,zero_utilities_TweenType.SINGLE_SHOT_BACKWARDS,zero_utilities_TweenType.LOOP_FORWARDS,zero_utilities_TweenType.LOOP_BACKWARDS,zero_utilities_TweenType.PING_PONG];
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.container = window.document.getElementById("game");
Main.app_events = new util_Events();
Main.game_events = new util_Events();
AppEvents.RESIZE = "RESIZE";
GameEvents.UPDATE = "UPDATE";
GameEvents.PRE_UPDATE = "PRE_UPDATE";
GameEvents.POST_UPDATE = "POST_UPDATE";
GameEvents.NEW_POWER = "NEW_POWER";
GameEvents.PLAYER_HEALTH = "PLAYER_HEALTH";
GameEvents.GAME_STATE = "GAME_STATE";
echo_Body.ids = 0;
echo_Collisions.qr = [];
echo_Collisions.sqr = [];
echo_Echo.cached_listeners = new echo_Listeners();
echo_Echo.cached_collisions = [];
echo_Echo.cached_zero = new hxmath_math_Vector2Default(0.0,0.0);
echo_Line._pool = new echo_util_Pool(echo_Line);
echo_Physics.zero = new hxmath_math_Vector2Default(0.0,0.0);
echo_data_Collision._pool = new echo_util_Pool(echo_data_Collision);
echo_data_CollisionData._pool = new echo_util_Pool(echo_data_CollisionData);
echo_data_Intersection._pool = new echo_util_Pool(echo_data_Intersection);
echo_data_IntersectionData._pool = new echo_util_Pool(echo_data_IntersectionData);
echo_shape_Circle._pool = new echo_util_Pool(echo_shape_Circle);
echo_shape_Polygon._pool = new echo_util_Pool(echo_shape_Polygon);
echo_shape_Rect._pool = new echo_util_Pool(echo_shape_Rect);
echo_util_AABB._pool = new echo_util_Pool(echo_util_AABB);
echo_util_QuadTree._pool = new echo_util_Pool(echo_util_QuadTree);
echo_util_SAT.norm = new hxmath_math_Vector2Default(0,0);
echo_util_SAT.closest = new hxmath_math_Vector2Default(0,0);
objects_GameObject.all = [];
zero_utilities_Rect.epsilon = 1e-8;
zero_utilities_Rect.pool = [];
zero_utilities_Vec4.epsilon = 1e-8;
zero_utilities_Vec4.pool = [];
states_PlayState.game_width = 320;
states_PlayState.game_height = 180;
states_PlayState.level_rect = zero_utilities_Rect.get(64,64,states_PlayState.game_width,states_PlayState.game_height);
ui_UIObject.all = [];
util_Audio.volume = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(util_Sound.DOUBLE_JUMP,0.5);
	_g.set(util_Sound.GLIDE,0.5);
	_g.set(util_Sound.GRAVITY_FLIP,0.5);
	_g.set(util_Sound.HIGH_JUMP,0.5);
	_g.set(util_Sound.JETPACK,0.5);
	_g.set(util_Sound.JUMP,0.5);
	_g.set(util_Sound.NICE_JOB,0.5);
	_g.set(util_Sound.PARKOUR,0.5);
	_g.set(util_Sound.PING_PONG,0.5);
	_g.set(util_Sound.POGO,0.5);
	_g.set(util_Sound.SKILL_SWAP,0.5);
	_g.set(util_Sound.ZERO_GRAVITY,0.5);
	_g.set(util_Sound.SFX_BOOST,0.9);
	_g.set(util_Sound.SFX_BOUNCE,0.4);
	_g.set(util_Sound.SFX_CHARGE,0.7);
	_g.set(util_Sound.SFX_DASH,0.6);
	_g.set(util_Sound.SFX_DIE,0.9);
	_g.set(util_Sound.SFX_DOUBLE_JUMP,0.9);
	_g.set(util_Sound.SFX_GET,0.75);
	_g.set(util_Sound.SFX_GRAV_SHIFT,0.6);
	_g.set(util_Sound.SFX_HURT,0.9);
	_g.set(util_Sound.SFX_JUMP,0.8);
	_g.set(util_Sound.SFX_LAND,0.2);
	_g.set(util_Sound.SFX_POGO,0.6);
	_g.set(util_Sound.SFX_PONG,0.3);
	_g.set(util_Sound.SFX_PONG_HIT,0.5);
	_g.set(util_Sound.SFX_SPAWN,0.7);
	_g.set(util_Sound.SFX_SPIKES_DOWN,0.6);
	_g.set(util_Sound.SFX_SPIKES_UP,0.8);
	_g.set(util_Sound.SFX_TWINKLE,0.5);
	$r = _g;
	return $r;
}(this));
util_Audio.sounds = new haxe_ds_EnumValueMap();
util_Audio.cooldowns = new haxe_ds_EnumValueMap();
var util_Constants_GRAVITY = 500;
var util_Constants_COYOTE_TIME = 0.08;
var util_Constants_JUMP_DAMPNER = 0.5;
var util_Constants_JUMP_POWER = 224;
var util_Constants_MAX_VELOCITY_Y = 500;
var util_Constants_JETPACK_ACCELERATION = -200;
var util_Constants_JETPACK_BUMP_AMT = 50;
var util_Constants_GLIDE_MAX_VEL_Y = 10;
var util_Constants_ROLLING_BALL_BOUNCE_FORCE = 64;
var util_Constants_ROLLING_BALL_X_SPEED = 40;
var util_Constants_SAWBLADE_SPEED = 16;
var util_Constants_SPIKES_TIMER = 2;
var util_Constants_POINTS_PER_HAZARD = 3;
var util_Constants_WALK_SPEED = 64;
var util_Constants_POGO_MIN_WALK_SPEED = 12;
var util_Constants_POGO_BOUNCE_FORCE = 112;
var util_Constants_POGO_MAX_JUMP_FORCE = 300;
var util_Constants_HIGH_JUMP_CHARGE_TIME = 1;
var util_Constants_HIGH_JUMP_MIN_FORCE = 128;
var util_Constants_HIGH_JUMP_MAX_FORCE = 400;
var util_Constants_ZERO_G_ROTATION_SPEED = 0.075;
var util_Constants_ZERO_G_BOOST_SPEED = 96;
var util_Constants_PARKOUR_DASH_SPEED = 240;
var util_Constants_PARKOUR_DASH_THRESHOLD = 32;
var util_Constants_INVULNERABILITY_PERIOD = 2.5;
var util_Constants_POWERUP_INVULNERABILITY_PERIOD = 1.5;
var util_Constants_HEALTH = 3;
var util_GameState_points = 0;
var util_GameState_times = [];
var util_GameState_high_score = Std.parseInt(window.localStorage.getItem("hiscore"));
var util_GameState_muted = Std.parseInt(window.localStorage.getItem("muted")) == 1;
util_Pointer.last = false;
util_Pointer._pressed = false;
util_Pointer.pressed = false;
zero_utilities_Vec2.epsilon = 1e-8;
zero_utilities_Vec2.pool = [];
var util_VecUtil_UP_VEC2 = zero_utilities_Vec2.get(0,-1);
var util_VecUtil_DOWN_VEC2 = zero_utilities_Vec2.get(0,1);
var util_VecUtil_LEFT_VEC2 = zero_utilities_Vec2.get(-1,0);
var util_VecUtil_RIGHT_VEC2 = zero_utilities_Vec2.get(1,0);
var util_VecUtil_DOWN_V2 = new hxmath_math_Vector2Default(0,1);
zero_utilities_Ease.ELASTIC_AMPLITUDE = 1;
zero_utilities_Ease.ELASTIC_PERIOD = 0.4;
zero_utilities_SyncedSin.counter = 0.0;
zero_utilities_Timer.timers = [];
zero_utilities_Timer.pool = [];
zero_utilities_Timer.epsilon = 1e-8;
zero_utilities_Tween.active_tweens = [];
zero_utilities_Tween.pool = [];
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
