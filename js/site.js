// Generated by Haxe 4.0.0-rc.2+77068e10c
(function () { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var Main = function() { };
Main.main = function() {
	return new Site();
};
var Site = function() {
	this.page = Util.get_page();
	Util.get_text("md/" + this.page.current_page + ".md",$bind(this,this.build_out));
};
Site.prototype = {
	build_out: function(content) {
		var tmp = this.page.path.slice(0,this.page.path.length - 1);
		window.document.getElementById("header").innerHTML = Util.build_breadcrumbs(tmp);
		window.document.getElementById("content").innerHTML = Util.parse_markdown(content);
		Util.treat_links(this.page.path);
		var tmp1 = Util.first_char_uppercase(Util.clean_text(this.page.current_page));
		window.document.title = "01010111 - " + tmp1;
	}
};
var Util = function() { };
Util.get_page = function() {
	var slug = Util.get_slug();
	var path = Util.get_path(slug);
	return { slug : slug, path : path, current_page : Util.get_current_page(path)};
};
Util.get_slug = function() {
	var split_href = window.location.href.split("?");
	if(split_href.length == 1) {
		return "";
	} else {
		return split_href[1];
	}
};
Util.get_path = function(slug) {
	if(slug.length == 0) {
		return ["index"];
	} else {
		return slug.split("/");
	}
};
Util.get_current_page = function(path) {
	if(path.length == 0) {
		return "index";
	} else {
		return path[path.length - 1];
	}
};
Util.get_text = function(src,callback) {
	var q = new haxe_http_HttpJs(src);
	q.onData = callback;
	q.request();
};
Util.parse_markdown = function(md) {
	return marked(md);
};
Util.build_breadcrumbs = function(path) {
	var bc = "";
	var arr = [];
	var _g = 0;
	while(_g < path.length) {
		var link = path[_g];
		++_g;
		arr.push(link);
		bc += "<a href=\"" + Util.path_to_link(arr) + "\">" + Util.first_char_uppercase(link) + "</a> > ";
	}
	bc = HxOverrides.substr(bc,0,bc.length - 3);
	return bc;
};
Util.path_to_link = function(path) {
	return "?" + path.join("/");
};
Util.treat_links = function(path) {
	var links = window.document.getElementById("content").getElementsByTagName("a");
	console.log("src/Util.hx:67:",links);
	var _g = 0;
	while(_g < links.length) {
		var a = links[_g];
		++_g;
		var link = a;
		if(!Util.is_local(link.href)) {
			continue;
		}
		if(link.href.indexOf("#") >= 0) {
			continue;
		}
		var href = link.href.split("/").pop();
		link.href = "" + Util.path_to_link(path) + "/" + href;
	}
};
Util.is_local = function(link) {
	return window.document.location.href.split("/")[0] == link.split("/")[0];
};
Util.first_char_uppercase = function(s) {
	return HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length - 1);
};
Util.clean_text = function(s) {
	return s.split("_").join(" ").split("-").join(" ");
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
};
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				s = null;
			}
			if(s != null && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.responseText != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.onData(_gthis.responseData = r.responseText);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseData = r.responseText;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseData = r.responseText;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.name;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			this.req = null;
			this.onError(e3.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g2 = 0;
		var _g11 = this.headers;
		while(_g2 < _g11.length) {
			var h1 = _g11[_g2];
			++_g2;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Browser = function() { };
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Main.main();
})();
